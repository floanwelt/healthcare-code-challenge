/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_THREADS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_allocator_type swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_difference_type swig_types[2]
#define SWIGTYPE_p_imebra__Age swig_types[3]
#define SWIGTYPE_p_imebra__AssociationBase swig_types[4]
#define SWIGTYPE_p_imebra__AssociationMessage swig_types[5]
#define SWIGTYPE_p_imebra__AssociationSCP swig_types[6]
#define SWIGTYPE_p_imebra__AssociationSCU swig_types[7]
#define SWIGTYPE_p_imebra__BaseStreamInput swig_types[8]
#define SWIGTYPE_p_imebra__BaseStreamOutput swig_types[9]
#define SWIGTYPE_p_imebra__BaseUIDGenerator swig_types[10]
#define SWIGTYPE_p_imebra__CCancelCommand swig_types[11]
#define SWIGTYPE_p_imebra__CEchoCommand swig_types[12]
#define SWIGTYPE_p_imebra__CEchoResponse swig_types[13]
#define SWIGTYPE_p_imebra__CFindCommand swig_types[14]
#define SWIGTYPE_p_imebra__CFindResponse swig_types[15]
#define SWIGTYPE_p_imebra__CGetCommand swig_types[16]
#define SWIGTYPE_p_imebra__CGetResponse swig_types[17]
#define SWIGTYPE_p_imebra__CMoveCommand swig_types[18]
#define SWIGTYPE_p_imebra__CMoveResponse swig_types[19]
#define SWIGTYPE_p_imebra__CPartialResponse swig_types[20]
#define SWIGTYPE_p_imebra__CStoreCommand swig_types[21]
#define SWIGTYPE_p_imebra__CStoreResponse swig_types[22]
#define SWIGTYPE_p_imebra__CodecFactory swig_types[23]
#define SWIGTYPE_p_imebra__ColorTransformsFactory swig_types[24]
#define SWIGTYPE_p_imebra__DataSet swig_types[25]
#define SWIGTYPE_p_imebra__Date swig_types[26]
#define SWIGTYPE_p_imebra__DicomDictionary swig_types[27]
#define SWIGTYPE_p_imebra__DicomDir swig_types[28]
#define SWIGTYPE_p_imebra__DicomDirEntry swig_types[29]
#define SWIGTYPE_p_imebra__DimseCommand swig_types[30]
#define SWIGTYPE_p_imebra__DimseCommandBase swig_types[31]
#define SWIGTYPE_p_imebra__DimseResponse swig_types[32]
#define SWIGTYPE_p_imebra__DimseService swig_types[33]
#define SWIGTYPE_p_imebra__DrawBitmap swig_types[34]
#define SWIGTYPE_p_imebra__FileStreamInput swig_types[35]
#define SWIGTYPE_p_imebra__FileStreamOutput swig_types[36]
#define SWIGTYPE_p_imebra__Image swig_types[37]
#define SWIGTYPE_p_imebra__LUT swig_types[38]
#define SWIGTYPE_p_imebra__Memory swig_types[39]
#define SWIGTYPE_p_imebra__MemoryPool swig_types[40]
#define SWIGTYPE_p_imebra__MemoryStreamInput swig_types[41]
#define SWIGTYPE_p_imebra__MemoryStreamOutput swig_types[42]
#define SWIGTYPE_p_imebra__ModalityVOILUT swig_types[43]
#define SWIGTYPE_p_imebra__MutableAssociationMessage swig_types[44]
#define SWIGTYPE_p_imebra__MutableDataSet swig_types[45]
#define SWIGTYPE_p_imebra__MutableDicomDir swig_types[46]
#define SWIGTYPE_p_imebra__MutableDicomDirEntry swig_types[47]
#define SWIGTYPE_p_imebra__MutableImage swig_types[48]
#define SWIGTYPE_p_imebra__MutableMemory swig_types[49]
#define SWIGTYPE_p_imebra__MutableOverlay swig_types[50]
#define SWIGTYPE_p_imebra__MutableTag swig_types[51]
#define SWIGTYPE_p_imebra__NActionCommand swig_types[52]
#define SWIGTYPE_p_imebra__NActionResponse swig_types[53]
#define SWIGTYPE_p_imebra__NCreateCommand swig_types[54]
#define SWIGTYPE_p_imebra__NCreateResponse swig_types[55]
#define SWIGTYPE_p_imebra__NDeleteCommand swig_types[56]
#define SWIGTYPE_p_imebra__NDeleteResponse swig_types[57]
#define SWIGTYPE_p_imebra__NEventReportCommand swig_types[58]
#define SWIGTYPE_p_imebra__NEventReportResponse swig_types[59]
#define SWIGTYPE_p_imebra__NGetCommand swig_types[60]
#define SWIGTYPE_p_imebra__NGetResponse swig_types[61]
#define SWIGTYPE_p_imebra__NSetCommand swig_types[62]
#define SWIGTYPE_p_imebra__NSetResponse swig_types[63]
#define SWIGTYPE_p_imebra__Overlay swig_types[64]
#define SWIGTYPE_p_imebra__PatientName swig_types[65]
#define SWIGTYPE_p_imebra__PipeStream swig_types[66]
#define SWIGTYPE_p_imebra__PresentationContext swig_types[67]
#define SWIGTYPE_p_imebra__PresentationContexts swig_types[68]
#define SWIGTYPE_p_imebra__RandomUIDGenerator swig_types[69]
#define SWIGTYPE_p_imebra__ReadingDataHandler swig_types[70]
#define SWIGTYPE_p_imebra__ReadingDataHandlerNumeric swig_types[71]
#define SWIGTYPE_p_imebra__SerialNumberUIDGenerator swig_types[72]
#define SWIGTYPE_p_imebra__StreamReader swig_types[73]
#define SWIGTYPE_p_imebra__StreamTimeout swig_types[74]
#define SWIGTYPE_p_imebra__StreamWriter swig_types[75]
#define SWIGTYPE_p_imebra__TCPActiveAddress swig_types[76]
#define SWIGTYPE_p_imebra__TCPAddress swig_types[77]
#define SWIGTYPE_p_imebra__TCPListener swig_types[78]
#define SWIGTYPE_p_imebra__TCPPassiveAddress swig_types[79]
#define SWIGTYPE_p_imebra__TCPStream swig_types[80]
#define SWIGTYPE_p_imebra__Tag swig_types[81]
#define SWIGTYPE_p_imebra__TagId swig_types[82]
#define SWIGTYPE_p_imebra__Transform swig_types[83]
#define SWIGTYPE_p_imebra__TransformHighBit swig_types[84]
#define SWIGTYPE_p_imebra__TransformsChain swig_types[85]
#define SWIGTYPE_p_imebra__UIDGeneratorFactory swig_types[86]
#define SWIGTYPE_p_imebra__VOIDescription swig_types[87]
#define SWIGTYPE_p_imebra__VOILUT swig_types[88]
#define SWIGTYPE_p_imebra__WritingDataHandler swig_types[89]
#define SWIGTYPE_p_imebra__WritingDataHandlerNumeric swig_types[90]
#define SWIGTYPE_p_int swig_types[91]
#define SWIGTYPE_p_long_long swig_types[92]
#define SWIGTYPE_p_p_PyObject swig_types[93]
#define SWIGTYPE_p_short swig_types[94]
#define SWIGTYPE_p_signed_char swig_types[95]
#define SWIGTYPE_p_size_type swig_types[96]
#define SWIGTYPE_p_std__allocatorT_imebra__TagId_t swig_types[97]
#define SWIGTYPE_p_std__allocatorT_imebra__VOIDescription_t swig_types[98]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[99]
#define SWIGTYPE_p_std__allocatorT_unsigned_short_t swig_types[100]
#define SWIGTYPE_p_std__invalid_argument swig_types[101]
#define SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t swig_types[102]
#define SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t swig_types[103]
#define SWIGTYPE_p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t swig_types[104]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[105]
#define SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t swig_types[106]
#define SWIGTYPE_p_std__wstring swig_types[107]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[108]
#define SWIGTYPE_p_unsigned_char swig_types[109]
#define SWIGTYPE_p_unsigned_int swig_types[110]
#define SWIGTYPE_p_unsigned_long_long swig_types[111]
#define SWIGTYPE_p_unsigned_short swig_types[112]
#define SWIGTYPE_p_value_type swig_types[113]
static swig_type_info *swig_types[115];
static swig_module_info swig_module = {swig_types, 114, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _imebra.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__imebra

#else
#  define SWIG_init    init_imebra

#endif
#define SWIG_name    "_imebra"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


typedef struct SWIGCDATA {
    char *data;
    size_t   len;
} SWIGCDATA;



extern "C"  {    


static SWIGCDATA cdata_void(void *ptr, size_t nelements)



{
  SWIGCDATA d;
  d.data = (char *) ptr;



  d.len  = nelements;

   return d;
}

}



SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}



#include <imebra/imebra.h>



#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include <utility>


#include <map>


#include <algorithm>


#include <stdint.h>		// Use the C99 official header


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::string,std::allocator< std::string > >());
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_2(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< std::uint16_t > {
      typedef pointer_category category;
      static const char* type_name() { return"std::uint16_t"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::uint16_t, std::allocator< std::uint16_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::uint16_t" "," "std::allocator< std::uint16_t >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_uint16_t_Sg__iterator(std::vector< std::uint16_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_uint16_t_Sg____nonzero__(std::vector< std::uint16_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_uint16_t_Sg____bool__(std::vector< std::uint16_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< unsigned short >::size_type std_vector_Sl_std_uint16_t_Sg____len__(std::vector< std::uint16_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::uint16_t,std::allocator< std::uint16_t > > *std_vector_Sl_std_uint16_t_Sg____getslice__(std::vector< std::uint16_t > *self,std::vector< unsigned short >::difference_type i,std::vector< unsigned short >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg____setslice____SWIG_0(std::vector< std::uint16_t > *self,std::vector< unsigned short >::difference_type i,std::vector< unsigned short >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::uint16_t,std::allocator< std::uint16_t > >());
    }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg____setslice____SWIG_1(std::vector< std::uint16_t > *self,std::vector< unsigned short >::difference_type i,std::vector< unsigned short >::difference_type j,std::vector< std::uint16_t,std::allocator< std::uint16_t > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg____delslice__(std::vector< std::uint16_t > *self,std::vector< unsigned short >::difference_type i,std::vector< unsigned short >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg____delitem____SWIG_0(std::vector< std::uint16_t > *self,std::vector< unsigned short >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::uint16_t,std::allocator< std::uint16_t > > *std_vector_Sl_std_uint16_t_Sg____getitem____SWIG_0(std::vector< std::uint16_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::uint16_t,std::allocator< std::uint16_t > >::difference_type id = i;
      std::vector< std::uint16_t,std::allocator< std::uint16_t > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg____setitem____SWIG_0(std::vector< std::uint16_t > *self,PySliceObject *slice,std::vector< std::uint16_t,std::allocator< std::uint16_t > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::uint16_t,std::allocator< std::uint16_t > >::difference_type id = i;
      std::vector< std::uint16_t,std::allocator< std::uint16_t > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg____setitem____SWIG_1(std::vector< std::uint16_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::uint16_t,std::allocator< std::uint16_t > >::difference_type id = i;
      std::vector< std::uint16_t,std::allocator< std::uint16_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg____delitem____SWIG_1(std::vector< std::uint16_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::uint16_t,std::allocator< std::uint16_t > >::difference_type id = i;
      std::vector< std::uint16_t,std::allocator< std::uint16_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< unsigned short >::value_type const &std_vector_Sl_std_uint16_t_Sg____getitem____SWIG_1(std::vector< std::uint16_t > const *self,std::vector< unsigned short >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}

SWIGINTERN void std_vector_Sl_std_uint16_t_Sg____setitem____SWIG_2(std::vector< std::uint16_t > *self,std::vector< unsigned short >::difference_type i,std::vector< unsigned short >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< unsigned short >::value_type std_vector_Sl_std_uint16_t_Sg__pop(std::vector< std::uint16_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::uint16_t,std::allocator< std::uint16_t > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg__append(std::vector< std::uint16_t > *self,std::vector< unsigned short >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< unsigned short >::iterator std_vector_Sl_std_uint16_t_Sg__erase__SWIG_0(std::vector< std::uint16_t > *self,std::vector< unsigned short >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< unsigned short >::iterator std_vector_Sl_std_uint16_t_Sg__erase__SWIG_1(std::vector< std::uint16_t > *self,std::vector< unsigned short >::iterator first,std::vector< unsigned short >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< unsigned short >::iterator std_vector_Sl_std_uint16_t_Sg__insert__SWIG_0(std::vector< std::uint16_t > *self,std::vector< unsigned short >::iterator pos,std::vector< unsigned short >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg__insert__SWIG_1(std::vector< std::uint16_t > *self,std::vector< unsigned short >::iterator pos,std::vector< unsigned short >::size_type n,std::vector< unsigned short >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< imebra::TagId > {
      typedef pointer_category category;
      static const char* type_name() { return"imebra::TagId"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< imebra::TagId, std::allocator< imebra::TagId > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "imebra::TagId" "," "std::allocator< imebra::TagId >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_imebra_TagId_Sg__iterator(std::vector< imebra::TagId > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_imebra_TagId_Sg____nonzero__(std::vector< imebra::TagId > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_imebra_TagId_Sg____bool__(std::vector< imebra::TagId > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< imebra::TagId >::size_type std_vector_Sl_imebra_TagId_Sg____len__(std::vector< imebra::TagId > const *self){
      return self->size();
    }
SWIGINTERN std::vector< imebra::TagId,std::allocator< imebra::TagId > > *std_vector_Sl_imebra_TagId_Sg____getslice__(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::difference_type i,std::vector< imebra::TagId >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg____setslice____SWIG_0(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::difference_type i,std::vector< imebra::TagId >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< imebra::TagId,std::allocator< imebra::TagId > >());
    }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg____setslice____SWIG_1(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::difference_type i,std::vector< imebra::TagId >::difference_type j,std::vector< imebra::TagId,std::allocator< imebra::TagId > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg____delslice__(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::difference_type i,std::vector< imebra::TagId >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg____delitem____SWIG_0(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< imebra::TagId,std::allocator< imebra::TagId > > *std_vector_Sl_imebra_TagId_Sg____getitem____SWIG_0(std::vector< imebra::TagId > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< imebra::TagId,std::allocator< imebra::TagId > >::difference_type id = i;
      std::vector< imebra::TagId,std::allocator< imebra::TagId > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg____setitem____SWIG_0(std::vector< imebra::TagId > *self,PySliceObject *slice,std::vector< imebra::TagId,std::allocator< imebra::TagId > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< imebra::TagId,std::allocator< imebra::TagId > >::difference_type id = i;
      std::vector< imebra::TagId,std::allocator< imebra::TagId > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg____setitem____SWIG_1(std::vector< imebra::TagId > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< imebra::TagId,std::allocator< imebra::TagId > >::difference_type id = i;
      std::vector< imebra::TagId,std::allocator< imebra::TagId > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg____delitem____SWIG_1(std::vector< imebra::TagId > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< imebra::TagId,std::allocator< imebra::TagId > >::difference_type id = i;
      std::vector< imebra::TagId,std::allocator< imebra::TagId > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< imebra::TagId >::value_type const &std_vector_Sl_imebra_TagId_Sg____getitem____SWIG_1(std::vector< imebra::TagId > const *self,std::vector< imebra::TagId >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg____setitem____SWIG_2(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::difference_type i,std::vector< imebra::TagId >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< imebra::TagId >::value_type std_vector_Sl_imebra_TagId_Sg__pop(std::vector< imebra::TagId > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< imebra::TagId,std::allocator< imebra::TagId > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg__append(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< imebra::TagId >::iterator std_vector_Sl_imebra_TagId_Sg__erase__SWIG_0(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< imebra::TagId >::iterator std_vector_Sl_imebra_TagId_Sg__erase__SWIG_1(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::iterator first,std::vector< imebra::TagId >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< imebra::TagId >::iterator std_vector_Sl_imebra_TagId_Sg__insert__SWIG_0(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::iterator pos,std::vector< imebra::TagId >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg__insert__SWIG_1(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::iterator pos,std::vector< imebra::TagId >::size_type n,std::vector< imebra::TagId >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< imebra::VOIDescription > {
      typedef pointer_category category;
      static const char* type_name() { return"imebra::VOIDescription"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< imebra::VOIDescription, std::allocator< imebra::VOIDescription > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "imebra::VOIDescription" "," "std::allocator< imebra::VOIDescription >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_imebra_VOIDescription_Sg__iterator(std::vector< imebra::VOIDescription > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_imebra_VOIDescription_Sg____nonzero__(std::vector< imebra::VOIDescription > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_imebra_VOIDescription_Sg____bool__(std::vector< imebra::VOIDescription > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< imebra::VOIDescription >::size_type std_vector_Sl_imebra_VOIDescription_Sg____len__(std::vector< imebra::VOIDescription > const *self){
      return self->size();
    }
SWIGINTERN std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *std_vector_Sl_imebra_VOIDescription_Sg____getslice__(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::difference_type i,std::vector< imebra::VOIDescription >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg____setslice____SWIG_0(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::difference_type i,std::vector< imebra::VOIDescription >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >());
    }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg____setslice____SWIG_1(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::difference_type i,std::vector< imebra::VOIDescription >::difference_type j,std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg____delslice__(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::difference_type i,std::vector< imebra::VOIDescription >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg____delitem____SWIG_0(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *std_vector_Sl_imebra_VOIDescription_Sg____getitem____SWIG_0(std::vector< imebra::VOIDescription > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >::difference_type id = i;
      std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg____setitem____SWIG_0(std::vector< imebra::VOIDescription > *self,PySliceObject *slice,std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >::difference_type id = i;
      std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg____setitem____SWIG_1(std::vector< imebra::VOIDescription > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >::difference_type id = i;
      std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg____delitem____SWIG_1(std::vector< imebra::VOIDescription > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >::difference_type id = i;
      std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< imebra::VOIDescription >::value_type const &std_vector_Sl_imebra_VOIDescription_Sg____getitem____SWIG_1(std::vector< imebra::VOIDescription > const *self,std::vector< imebra::VOIDescription >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg____setitem____SWIG_2(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::difference_type i,std::vector< imebra::VOIDescription >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< imebra::VOIDescription >::value_type std_vector_Sl_imebra_VOIDescription_Sg__pop(std::vector< imebra::VOIDescription > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg__append(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< imebra::VOIDescription >::iterator std_vector_Sl_imebra_VOIDescription_Sg__erase__SWIG_0(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< imebra::VOIDescription >::iterator std_vector_Sl_imebra_VOIDescription_Sg__erase__SWIG_1(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::iterator first,std::vector< imebra::VOIDescription >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< imebra::VOIDescription >::iterator std_vector_Sl_imebra_VOIDescription_Sg__insert__SWIG_0(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::iterator pos,std::vector< imebra::VOIDescription >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg__insert__SWIG_1(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::iterator pos,std::vector< imebra::VOIDescription >::size_type n,std::vector< imebra::VOIDescription >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}





  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_cdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  size_t arg2 = (size_t) 1 ;
  int res1 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SWIGCDATA result;
  
  if (!PyArg_ParseTuple(args,(char *)"O|O:cdata",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdata" "', argument " "1"" of type '" "void *""'"); 
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cdata" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = cdata_void(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtrAndSize((&result)->data,(&result)->len);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_memmove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:memmove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memmove" "', argument " "1"" of type '" "void *""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memmove" "', argument " "2"" of type '" "void const *""'");
  }
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< size_t >(size2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    memmove(arg1,(void const *)arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)(arg1)->incr();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)(arg1)->decr();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (PyObject *)(arg1)->next();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (PyObject *)(arg1)->__next__();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (PyObject *)(arg1)->previous();
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StringsList_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringsList___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringsList___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringsList___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringsList___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StringsList___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringsList___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringsList___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringsList___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_string_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StringsList___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringsList___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringsList___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringsList___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringsList___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringsList___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringsList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringsList___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringsList___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringsList___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringsList___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringsList___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__delitem__(std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringsList___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringsList___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringsList___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringsList___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__getitem__(std::vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringsList___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringsList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringsList___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringsList___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringsList___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringsList___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringsList___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringsList___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringsList_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = std_vector_Sl_std_string_Sg__pop(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringsList_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringsList_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringsList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StringsList")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< std::string > *)new std::vector< std::string >();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringsList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StringsList",&obj0)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringsList" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringsList" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::vector< std::string > const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< std::string > const *)arg1)->size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringsList_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringsList_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->swap(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< std::string > const *)arg1)->get_allocator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringsList__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StringsList",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringsList" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->pop_back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringsList_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StringsList_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StringsList_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringsList_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_StringsList__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StringsList",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringsList" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringsList" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringsList" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringsList(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StringsList__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringsList__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringsList__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringsList__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StringsList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringsList_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringsList_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringsList_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringsList_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringsList_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringsList_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringsList_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringsList_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringsList_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringsList_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringsList_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringsList_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringsList_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringsList_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringsList_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringsList_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,(std::string const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StringsList_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringsList_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringsList_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringsList_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringsList_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::string const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringsList_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringsList_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringsList_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringsList_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringsList_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringsList_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reserve(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringsList_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringsList_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringsList_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< std::string > const *)arg1)->capacity();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringsList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StringsList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringsList" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringsList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Groups_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_iterator" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::SwigPyIterator *)std_vector_Sl_std_uint16_t_Sg__iterator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___nonzero__" "', argument " "1"" of type '" "std::vector< std::uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_std_uint16_t_Sg____nonzero__((std::vector< unsigned short > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___bool__" "', argument " "1"" of type '" "std::vector< std::uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_std_uint16_t_Sg____bool__((std::vector< unsigned short > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned short >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___len__" "', argument " "1"" of type '" "std::vector< std::uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_std_uint16_t_Sg____len__((std::vector< unsigned short > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::difference_type arg2 ;
  std::vector< unsigned short >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::uint16_t,std::allocator< std::uint16_t > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Groups___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___getslice__" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups___getslice__" "', argument " "2"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Groups___getslice__" "', argument " "3"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned short >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< std::uint16_t,std::allocator< std::uint16_t > > *)std_vector_Sl_std_uint16_t_Sg____getslice__(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::difference_type arg2 ;
  std::vector< unsigned short >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Groups___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___setslice__" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups___setslice__" "', argument " "2"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Groups___setslice__" "', argument " "3"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned short >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_uint16_t_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::difference_type arg2 ;
  std::vector< unsigned short >::difference_type arg3 ;
  std::vector< std::uint16_t,std::allocator< std::uint16_t > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Groups___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___setslice__" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups___setslice__" "', argument " "2"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Groups___setslice__" "', argument " "3"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned short >::difference_type >(val3);
  {
    std::vector< std::uint16_t,std::allocator< std::uint16_t > > *ptr = (std::vector< std::uint16_t,std::allocator< std::uint16_t > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Groups___setslice__" "', argument " "4"" of type '" "std::vector< std::uint16_t,std::allocator< std::uint16_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Groups___setslice__" "', argument " "4"" of type '" "std::vector< std::uint16_t,std::allocator< std::uint16_t > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_uint16_t_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< unsigned short,std::allocator< unsigned short > > const &)*arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Groups___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Groups___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Groups___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::uint16_t >::__setslice__(std::vector< unsigned short >::difference_type,std::vector< unsigned short >::difference_type)\n"
    "    std::vector< std::uint16_t >::__setslice__(std::vector< unsigned short >::difference_type,std::vector< unsigned short >::difference_type,std::vector< std::uint16_t,std::allocator< std::uint16_t > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Groups___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::difference_type arg2 ;
  std::vector< unsigned short >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Groups___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___delslice__" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups___delslice__" "', argument " "2"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Groups___delslice__" "', argument " "3"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned short >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_uint16_t_Sg____delslice__(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___delitem__" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups___delitem__" "', argument " "2"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_uint16_t_Sg____delitem____SWIG_0(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::uint16_t,std::allocator< std::uint16_t > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___getitem__" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< std::uint16_t,std::allocator< std::uint16_t > > *)std_vector_Sl_std_uint16_t_Sg____getitem____SWIG_0(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::uint16_t,std::allocator< std::uint16_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Groups___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___setitem__" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::uint16_t,std::allocator< std::uint16_t > > *ptr = (std::vector< std::uint16_t,std::allocator< std::uint16_t > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Groups___setitem__" "', argument " "3"" of type '" "std::vector< std::uint16_t,std::allocator< std::uint16_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Groups___setitem__" "', argument " "3"" of type '" "std::vector< std::uint16_t,std::allocator< std::uint16_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_uint16_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< unsigned short,std::allocator< unsigned short > > const &)*arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___setitem__" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_uint16_t_Sg____setitem____SWIG_1(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___delitem__" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_uint16_t_Sg____delitem____SWIG_1(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Groups___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Groups___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Groups___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::uint16_t >::__delitem__(std::vector< unsigned short >::difference_type)\n"
    "    std::vector< std::uint16_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Groups___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned short >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___getitem__" "', argument " "1"" of type '" "std::vector< std::uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups___getitem__" "', argument " "2"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< unsigned short >::value_type *) &std_vector_Sl_std_uint16_t_Sg____getitem____SWIG_1((std::vector< unsigned short > const *)arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Groups___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Groups___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Groups___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::uint16_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::uint16_t >::__getitem__(std::vector< unsigned short >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Groups___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::difference_type arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned short >::value_type temp3 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Groups___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups___setitem__" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups___setitem__" "', argument " "2"" of type '" "std::vector< unsigned short >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Groups___setitem__" "', argument " "3"" of type '" "std::vector< unsigned short >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned short >::value_type >(val3);
  arg3 = &temp3;
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_std_uint16_t_Sg____setitem____SWIG_2(arg1,arg2,(unsigned short const &)*arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Groups___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Groups___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Groups___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Groups___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::uint16_t >::__setitem__(PySliceObject *,std::vector< std::uint16_t,std::allocator< std::uint16_t > > const &)\n"
    "    std::vector< std::uint16_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::uint16_t >::__setitem__(std::vector< unsigned short >::difference_type,std::vector< unsigned short >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Groups_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned short >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_pop" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< unsigned short >::value_type)std_vector_Sl_std_uint16_t_Sg__pop(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned short >::value_type temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_append" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups_append" "', argument " "2"" of type '" "std::vector< unsigned short >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned short >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_std_uint16_t_Sg__append(arg1,(unsigned short const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Groups__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Groups")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< std::uint16_t > *)new std::vector< std::uint16_t >();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Groups__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::uint16_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Groups",&obj0)) SWIG_fail;
  {
    std::vector< std::uint16_t,std::allocator< std::uint16_t > > *ptr = (std::vector< std::uint16_t,std::allocator< std::uint16_t > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Groups" "', argument " "1"" of type '" "std::vector< std::uint16_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Groups" "', argument " "1"" of type '" "std::vector< std::uint16_t > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< std::uint16_t > *)new std::vector< std::uint16_t >((std::vector< std::uint16_t > const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_empty" "', argument " "1"" of type '" "std::vector< std::uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::vector< std::uint16_t > const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned short >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_size" "', argument " "1"" of type '" "std::vector< std::uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< std::uint16_t > const *)arg1)->size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< std::uint16_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_swap" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Groups_swap" "', argument " "2"" of type '" "std::vector< std::uint16_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Groups_swap" "', argument " "2"" of type '" "std::vector< std::uint16_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::uint16_t > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->swap(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned short >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_begin" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned short >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned short >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_end" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned short >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned short >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_rbegin" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned short >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned short >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_rend" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned short >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_clear" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< unsigned short > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_get_allocator" "', argument " "1"" of type '" "std::vector< std::uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< std::uint16_t > const *)arg1)->get_allocator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned short >::allocator_type(static_cast< const std::vector< unsigned short >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_unsigned_short_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Groups__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned short >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::uint16_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Groups",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Groups" "', argument " "1"" of type '" "std::vector< unsigned short >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned short >::size_type >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< std::uint16_t > *)new std::vector< std::uint16_t >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_pop_back" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->pop_back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_resize" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups_resize" "', argument " "2"" of type '" "std::vector< unsigned short >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned short >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< unsigned short >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_erase" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups_erase" "', argument " "2"" of type '" "std::vector< unsigned short >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups_erase" "', argument " "2"" of type '" "std::vector< unsigned short >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_std_uint16_t_Sg__erase__SWIG_0(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned short >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned short >::iterator > arg2 ;
  SwigValueWrapper< std::vector< unsigned short >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< unsigned short >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Groups_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_erase" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups_erase" "', argument " "2"" of type '" "std::vector< unsigned short >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups_erase" "', argument " "2"" of type '" "std::vector< unsigned short >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups_erase" "', argument " "3"" of type '" "std::vector< unsigned short >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups_erase" "', argument " "3"" of type '" "std::vector< unsigned short >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_std_uint16_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned short >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_Groups_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_Groups_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Groups_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::uint16_t >::erase(std::vector< unsigned short >::iterator)\n"
    "    std::vector< std::uint16_t >::erase(std::vector< unsigned short >::iterator,std::vector< unsigned short >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Groups__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned short >::size_type arg1 ;
  std::vector< unsigned short >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned short >::value_type temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::uint16_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Groups",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Groups" "', argument " "1"" of type '" "std::vector< unsigned short >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned short >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Groups" "', argument " "2"" of type '" "std::vector< unsigned short >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned short >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< std::uint16_t > *)new std::vector< std::uint16_t >(arg1,(std::vector< unsigned short >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Groups(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Groups__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Groups__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Groups__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Groups__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Groups'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::uint16_t >::vector()\n"
    "    std::vector< std::uint16_t >::vector(std::vector< std::uint16_t > const &)\n"
    "    std::vector< std::uint16_t >::vector(std::vector< unsigned short >::size_type)\n"
    "    std::vector< std::uint16_t >::vector(std::vector< unsigned short >::size_type,std::vector< unsigned short >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Groups_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned short >::value_type temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_push_back" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups_push_back" "', argument " "2"" of type '" "std::vector< unsigned short >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned short >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->push_back((std::vector< unsigned short >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned short >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_front" "', argument " "1"" of type '" "std::vector< std::uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< unsigned short >::value_type *) &((std::vector< std::uint16_t > const *)arg1)->front();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned short >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_back" "', argument " "1"" of type '" "std::vector< std::uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< unsigned short >::value_type *) &((std::vector< std::uint16_t > const *)arg1)->back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned short >::value_type temp3 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Groups_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_assign" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups_assign" "', argument " "2"" of type '" "std::vector< unsigned short >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Groups_assign" "', argument " "3"" of type '" "std::vector< unsigned short >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned short >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->assign(arg2,(std::vector< unsigned short >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned short >::value_type temp3 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Groups_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_resize" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups_resize" "', argument " "2"" of type '" "std::vector< unsigned short >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Groups_resize" "', argument " "3"" of type '" "std::vector< unsigned short >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned short >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2,(std::vector< unsigned short >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Groups_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Groups_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Groups_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::uint16_t >::resize(std::vector< unsigned short >::size_type)\n"
    "    std::vector< std::uint16_t >::resize(std::vector< unsigned short >::size_type,std::vector< unsigned short >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Groups_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned short >::iterator > arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< unsigned short >::value_type temp3 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< unsigned short >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Groups_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_insert" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups_insert" "', argument " "2"" of type '" "std::vector< unsigned short >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups_insert" "', argument " "2"" of type '" "std::vector< unsigned short >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Groups_insert" "', argument " "3"" of type '" "std::vector< unsigned short >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned short >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_std_uint16_t_Sg__insert__SWIG_0(arg1,arg2,(unsigned short const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned short >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned short >::iterator > arg2 ;
  std::vector< unsigned short >::size_type arg3 ;
  std::vector< unsigned short >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< unsigned short >::value_type temp4 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Groups_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_insert" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups_insert" "', argument " "2"" of type '" "std::vector< unsigned short >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Groups_insert" "', argument " "2"" of type '" "std::vector< unsigned short >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Groups_insert" "', argument " "3"" of type '" "std::vector< unsigned short >::size_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned short >::size_type >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Groups_insert" "', argument " "4"" of type '" "std::vector< unsigned short >::value_type""'");
  } 
  temp4 = static_cast< std::vector< unsigned short >::value_type >(val4);
  arg4 = &temp4;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_std_uint16_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(unsigned short const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Groups_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::uint16_t,std::allocator< std::uint16_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned short >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Groups_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Groups_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::uint16_t >::insert(std::vector< unsigned short >::iterator,std::vector< unsigned short >::value_type const &)\n"
    "    std::vector< std::uint16_t >::insert(std::vector< unsigned short >::iterator,std::vector< unsigned short >::size_type,std::vector< unsigned short >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Groups_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Groups_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_reserve" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Groups_reserve" "', argument " "2"" of type '" "std::vector< unsigned short >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned short >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reserve(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Groups_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned short >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Groups_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Groups_capacity" "', argument " "1"" of type '" "std::vector< std::uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< std::uint16_t > const *)arg1)->capacity();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Groups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Groups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Groups" "', argument " "1"" of type '" "std::vector< std::uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::uint16_t > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Groups_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TagsIds_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_iterator" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::SwigPyIterator *)std_vector_Sl_imebra_TagId_Sg__iterator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___nonzero__" "', argument " "1"" of type '" "std::vector< imebra::TagId > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_imebra_TagId_Sg____nonzero__((std::vector< imebra::TagId > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___bool__" "', argument " "1"" of type '" "std::vector< imebra::TagId > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_imebra_TagId_Sg____bool__((std::vector< imebra::TagId > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___len__" "', argument " "1"" of type '" "std::vector< imebra::TagId > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_imebra_TagId_Sg____len__((std::vector< imebra::TagId > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::difference_type arg2 ;
  std::vector< imebra::TagId >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< imebra::TagId,std::allocator< imebra::TagId > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagsIds___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___getslice__" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds___getslice__" "', argument " "2"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagsIds___getslice__" "', argument " "3"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< imebra::TagId >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< imebra::TagId,std::allocator< imebra::TagId > > *)std_vector_Sl_imebra_TagId_Sg____getslice__(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::difference_type arg2 ;
  std::vector< imebra::TagId >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagsIds___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___setslice__" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds___setslice__" "', argument " "2"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagsIds___setslice__" "', argument " "3"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< imebra::TagId >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_TagId_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::difference_type arg2 ;
  std::vector< imebra::TagId >::difference_type arg3 ;
  std::vector< imebra::TagId,std::allocator< imebra::TagId > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagsIds___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___setslice__" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds___setslice__" "', argument " "2"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagsIds___setslice__" "', argument " "3"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< imebra::TagId >::difference_type >(val3);
  {
    std::vector< imebra::TagId,std::allocator< imebra::TagId > > *ptr = (std::vector< imebra::TagId,std::allocator< imebra::TagId > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagsIds___setslice__" "', argument " "4"" of type '" "std::vector< imebra::TagId,std::allocator< imebra::TagId > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagsIds___setslice__" "', argument " "4"" of type '" "std::vector< imebra::TagId,std::allocator< imebra::TagId > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_TagId_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< imebra::TagId,std::allocator< imebra::TagId > > const &)*arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TagsIds___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TagsIds___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TagsIds___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::TagId >::__setslice__(std::vector< imebra::TagId >::difference_type,std::vector< imebra::TagId >::difference_type)\n"
    "    std::vector< imebra::TagId >::__setslice__(std::vector< imebra::TagId >::difference_type,std::vector< imebra::TagId >::difference_type,std::vector< imebra::TagId,std::allocator< imebra::TagId > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TagsIds___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::difference_type arg2 ;
  std::vector< imebra::TagId >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagsIds___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___delslice__" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds___delslice__" "', argument " "2"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagsIds___delslice__" "', argument " "3"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< imebra::TagId >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_TagId_Sg____delslice__(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___delitem__" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds___delitem__" "', argument " "2"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_TagId_Sg____delitem____SWIG_0(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< imebra::TagId,std::allocator< imebra::TagId > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___getitem__" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< imebra::TagId,std::allocator< imebra::TagId > > *)std_vector_Sl_imebra_TagId_Sg____getitem____SWIG_0(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< imebra::TagId,std::allocator< imebra::TagId > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagsIds___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___setitem__" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< imebra::TagId,std::allocator< imebra::TagId > > *ptr = (std::vector< imebra::TagId,std::allocator< imebra::TagId > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagsIds___setitem__" "', argument " "3"" of type '" "std::vector< imebra::TagId,std::allocator< imebra::TagId > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagsIds___setitem__" "', argument " "3"" of type '" "std::vector< imebra::TagId,std::allocator< imebra::TagId > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_TagId_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< imebra::TagId,std::allocator< imebra::TagId > > const &)*arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___setitem__" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_TagId_Sg____setitem____SWIG_1(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___delitem__" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_TagId_Sg____delitem____SWIG_1(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_TagsIds___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TagsIds___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TagsIds___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::TagId >::__delitem__(std::vector< imebra::TagId >::difference_type)\n"
    "    std::vector< imebra::TagId >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TagsIds___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< imebra::TagId >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___getitem__" "', argument " "1"" of type '" "std::vector< imebra::TagId > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds___getitem__" "', argument " "2"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< imebra::TagId >::value_type *) &std_vector_Sl_imebra_TagId_Sg____getitem____SWIG_1((std::vector< imebra::TagId > const *)arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TagId, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_TagsIds___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TagsIds___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TagsIds___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::TagId >::__getitem__(PySliceObject *)\n"
    "    std::vector< imebra::TagId >::__getitem__(std::vector< imebra::TagId >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TagsIds___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::difference_type arg2 ;
  std::vector< imebra::TagId >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagsIds___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds___setitem__" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds___setitem__" "', argument " "2"" of type '" "std::vector< imebra::TagId >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagsIds___setitem__" "', argument " "3"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagsIds___setitem__" "', argument " "3"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< imebra::TagId >::value_type * >(argp3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_TagId_Sg____setitem____SWIG_2(arg1,arg2,(imebra::TagId const &)*arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_TagsIds___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TagsIds___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_imebra__TagId, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TagsIds___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TagsIds___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::TagId >::__setitem__(PySliceObject *,std::vector< imebra::TagId,std::allocator< imebra::TagId > > const &)\n"
    "    std::vector< imebra::TagId >::__setitem__(PySliceObject *)\n"
    "    std::vector< imebra::TagId >::__setitem__(std::vector< imebra::TagId >::difference_type,std::vector< imebra::TagId >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TagsIds_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_pop" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = std_vector_Sl_imebra_TagId_Sg__pop(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< imebra::TagId >::value_type(static_cast< const std::vector< imebra::TagId >::value_type& >(result))), SWIGTYPE_p_imebra__TagId, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_append" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagsIds_append" "', argument " "2"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagsIds_append" "', argument " "2"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< imebra::TagId >::value_type * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_imebra_TagId_Sg__append(arg1,(imebra::TagId const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagsIds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TagsIds")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::TagId > *)new std::vector< imebra::TagId >();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagsIds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TagsIds",&obj0)) SWIG_fail;
  {
    std::vector< imebra::TagId,std::allocator< imebra::TagId > > *ptr = (std::vector< imebra::TagId,std::allocator< imebra::TagId > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TagsIds" "', argument " "1"" of type '" "std::vector< imebra::TagId > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TagsIds" "', argument " "1"" of type '" "std::vector< imebra::TagId > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::TagId > *)new std::vector< imebra::TagId >((std::vector< imebra::TagId > const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_empty" "', argument " "1"" of type '" "std::vector< imebra::TagId > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::vector< imebra::TagId > const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_size" "', argument " "1"" of type '" "std::vector< imebra::TagId > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< imebra::TagId > const *)arg1)->size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_swap" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagsIds_swap" "', argument " "2"" of type '" "std::vector< imebra::TagId > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagsIds_swap" "', argument " "2"" of type '" "std::vector< imebra::TagId > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< imebra::TagId > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->swap(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_begin" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::TagId >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_end" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::TagId >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_rbegin" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::TagId >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_rend" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::TagId >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_clear" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< imebra::TagId > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_get_allocator" "', argument " "1"" of type '" "std::vector< imebra::TagId > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< imebra::TagId > const *)arg1)->get_allocator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::vector< imebra::TagId >::allocator_type(static_cast< const std::vector< imebra::TagId >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_imebra__TagId_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagsIds__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TagsIds",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TagsIds" "', argument " "1"" of type '" "std::vector< imebra::TagId >::size_type""'");
  } 
  arg1 = static_cast< std::vector< imebra::TagId >::size_type >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::TagId > *)new std::vector< imebra::TagId >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_pop_back" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->pop_back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_resize" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds_resize" "', argument " "2"" of type '" "std::vector< imebra::TagId >::size_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< imebra::TagId >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_erase" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds_erase" "', argument " "2"" of type '" "std::vector< imebra::TagId >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds_erase" "', argument " "2"" of type '" "std::vector< imebra::TagId >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_imebra_TagId_Sg__erase__SWIG_0(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::TagId >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::iterator arg2 ;
  std::vector< imebra::TagId >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< imebra::TagId >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagsIds_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_erase" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds_erase" "', argument " "2"" of type '" "std::vector< imebra::TagId >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds_erase" "', argument " "2"" of type '" "std::vector< imebra::TagId >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds_erase" "', argument " "3"" of type '" "std::vector< imebra::TagId >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds_erase" "', argument " "3"" of type '" "std::vector< imebra::TagId >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_imebra_TagId_Sg__erase__SWIG_1(arg1,arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::TagId >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_TagsIds_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_TagsIds_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TagsIds_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::TagId >::erase(std::vector< imebra::TagId >::iterator)\n"
    "    std::vector< imebra::TagId >::erase(std::vector< imebra::TagId >::iterator,std::vector< imebra::TagId >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_TagsIds__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId >::size_type arg1 ;
  std::vector< imebra::TagId >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< imebra::TagId > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TagsIds",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TagsIds" "', argument " "1"" of type '" "std::vector< imebra::TagId >::size_type""'");
  } 
  arg1 = static_cast< std::vector< imebra::TagId >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TagsIds" "', argument " "2"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TagsIds" "', argument " "2"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< imebra::TagId >::value_type * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::TagId > *)new std::vector< imebra::TagId >(arg1,(std::vector< imebra::TagId >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagsIds(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TagsIds__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TagsIds__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TagsIds__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TagsIds__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TagsIds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::TagId >::vector()\n"
    "    std::vector< imebra::TagId >::vector(std::vector< imebra::TagId > const &)\n"
    "    std::vector< imebra::TagId >::vector(std::vector< imebra::TagId >::size_type)\n"
    "    std::vector< imebra::TagId >::vector(std::vector< imebra::TagId >::size_type,std::vector< imebra::TagId >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TagsIds_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_push_back" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TagsIds_push_back" "', argument " "2"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagsIds_push_back" "', argument " "2"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< imebra::TagId >::value_type * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->push_back((std::vector< imebra::TagId >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_front" "', argument " "1"" of type '" "std::vector< imebra::TagId > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::TagId >::value_type *) &((std::vector< imebra::TagId > const *)arg1)->front();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TagId, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_back" "', argument " "1"" of type '" "std::vector< imebra::TagId > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::TagId >::value_type *) &((std::vector< imebra::TagId > const *)arg1)->back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TagId, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::size_type arg2 ;
  std::vector< imebra::TagId >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagsIds_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_assign" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds_assign" "', argument " "2"" of type '" "std::vector< imebra::TagId >::size_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagsIds_assign" "', argument " "3"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagsIds_assign" "', argument " "3"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< imebra::TagId >::value_type * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->assign(arg2,(std::vector< imebra::TagId >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::size_type arg2 ;
  std::vector< imebra::TagId >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagsIds_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_resize" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds_resize" "', argument " "2"" of type '" "std::vector< imebra::TagId >::size_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagsIds_resize" "', argument " "3"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagsIds_resize" "', argument " "3"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< imebra::TagId >::value_type * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2,(std::vector< imebra::TagId >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TagsIds_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_imebra__TagId, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TagsIds_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TagsIds_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::TagId >::resize(std::vector< imebra::TagId >::size_type)\n"
    "    std::vector< imebra::TagId >::resize(std::vector< imebra::TagId >::size_type,std::vector< imebra::TagId >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TagsIds_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::iterator arg2 ;
  std::vector< imebra::TagId >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< imebra::TagId >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TagsIds_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_insert" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds_insert" "', argument " "2"" of type '" "std::vector< imebra::TagId >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds_insert" "', argument " "2"" of type '" "std::vector< imebra::TagId >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TagsIds_insert" "', argument " "3"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagsIds_insert" "', argument " "3"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< imebra::TagId >::value_type * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_imebra_TagId_Sg__insert__SWIG_0(arg1,arg2,(imebra::TagId const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::TagId >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::iterator arg2 ;
  std::vector< imebra::TagId >::size_type arg3 ;
  std::vector< imebra::TagId >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TagsIds_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_insert" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds_insert" "', argument " "2"" of type '" "std::vector< imebra::TagId >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TagsIds_insert" "', argument " "2"" of type '" "std::vector< imebra::TagId >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TagsIds_insert" "', argument " "3"" of type '" "std::vector< imebra::TagId >::size_type""'");
  } 
  arg3 = static_cast< std::vector< imebra::TagId >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TagsIds_insert" "', argument " "4"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TagsIds_insert" "', argument " "4"" of type '" "std::vector< imebra::TagId >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< imebra::TagId >::value_type * >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_imebra_TagId_Sg__insert__SWIG_1(arg1,arg2,arg3,(imebra::TagId const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_imebra__TagId, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TagsIds_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::TagId,std::allocator< imebra::TagId > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::TagId >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_imebra__TagId, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TagsIds_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TagsIds_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::TagId >::insert(std::vector< imebra::TagId >::iterator,std::vector< imebra::TagId >::value_type const &)\n"
    "    std::vector< imebra::TagId >::insert(std::vector< imebra::TagId >::iterator,std::vector< imebra::TagId >::size_type,std::vector< imebra::TagId >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TagsIds_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagsIds_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_reserve" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagsIds_reserve" "', argument " "2"" of type '" "std::vector< imebra::TagId >::size_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::TagId >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reserve(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagsIds_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::TagId >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagsIds_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagsIds_capacity" "', argument " "1"" of type '" "std::vector< imebra::TagId > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< imebra::TagId > const *)arg1)->capacity();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TagsIds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TagsIds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TagsIds" "', argument " "1"" of type '" "std::vector< imebra::TagId > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::TagId > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TagsIds_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VOIs_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_iterator" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::SwigPyIterator *)std_vector_Sl_imebra_VOIDescription_Sg__iterator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___nonzero__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_imebra_VOIDescription_Sg____nonzero__((std::vector< imebra::VOIDescription > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___bool__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_imebra_VOIDescription_Sg____bool__((std::vector< imebra::VOIDescription > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___len__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_imebra_VOIDescription_Sg____len__((std::vector< imebra::VOIDescription > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::difference_type arg2 ;
  std::vector< imebra::VOIDescription >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VOIs___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___getslice__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs___getslice__" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VOIs___getslice__" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *)std_vector_Sl_imebra_VOIDescription_Sg____getslice__(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::difference_type arg2 ;
  std::vector< imebra::VOIDescription >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VOIs___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___setslice__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs___setslice__" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VOIs___setslice__" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_VOIDescription_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::difference_type arg2 ;
  std::vector< imebra::VOIDescription >::difference_type arg3 ;
  std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VOIs___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___setslice__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs___setslice__" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VOIs___setslice__" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val3);
  {
    std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *ptr = (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VOIs___setslice__" "', argument " "4"" of type '" "std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOIs___setslice__" "', argument " "4"" of type '" "std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_VOIDescription_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > const &)*arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VOIs___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VOIs___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VOIs___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::VOIDescription >::__setslice__(std::vector< imebra::VOIDescription >::difference_type,std::vector< imebra::VOIDescription >::difference_type)\n"
    "    std::vector< imebra::VOIDescription >::__setslice__(std::vector< imebra::VOIDescription >::difference_type,std::vector< imebra::VOIDescription >::difference_type,std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VOIs___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::difference_type arg2 ;
  std::vector< imebra::VOIDescription >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VOIs___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___delslice__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs___delslice__" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VOIs___delslice__" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_VOIDescription_Sg____delslice__(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___delitem__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs___delitem__" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_VOIDescription_Sg____delitem____SWIG_0(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___getitem__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *)std_vector_Sl_imebra_VOIDescription_Sg____getitem____SWIG_0(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VOIs___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___setitem__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *ptr = (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VOIs___setitem__" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOIs___setitem__" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_VOIDescription_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > const &)*arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___setitem__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_VOIDescription_Sg____setitem____SWIG_1(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___delitem__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_VOIDescription_Sg____delitem____SWIG_1(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VOIs___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VOIs___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VOIs___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::VOIDescription >::__delitem__(std::vector< imebra::VOIDescription >::difference_type)\n"
    "    std::vector< imebra::VOIDescription >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VOIs___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< imebra::VOIDescription >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___getitem__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs___getitem__" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< imebra::VOIDescription >::value_type *) &std_vector_Sl_imebra_VOIDescription_Sg____getitem____SWIG_1((std::vector< imebra::VOIDescription > const *)arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__VOIDescription, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VOIs___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VOIs___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VOIs___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::VOIDescription >::__getitem__(PySliceObject *)\n"
    "    std::vector< imebra::VOIDescription >::__getitem__(std::vector< imebra::VOIDescription >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VOIs___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::difference_type arg2 ;
  std::vector< imebra::VOIDescription >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VOIs___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs___setitem__" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs___setitem__" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__VOIDescription,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VOIs___setitem__" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOIs___setitem__" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< imebra::VOIDescription >::value_type * >(argp3);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      std_vector_Sl_imebra_VOIDescription_Sg____setitem____SWIG_2(arg1,arg2,(imebra::VOIDescription const &)*arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VOIs___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VOIs___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_imebra__VOIDescription, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VOIs___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VOIs___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::VOIDescription >::__setitem__(PySliceObject *,std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > const &)\n"
    "    std::vector< imebra::VOIDescription >::__setitem__(PySliceObject *)\n"
    "    std::vector< imebra::VOIDescription >::__setitem__(std::vector< imebra::VOIDescription >::difference_type,std::vector< imebra::VOIDescription >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VOIs_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_pop" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = std_vector_Sl_imebra_VOIDescription_Sg__pop(arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< imebra::VOIDescription >::value_type(static_cast< const std::vector< imebra::VOIDescription >::value_type& >(result))), SWIGTYPE_p_imebra__VOIDescription, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_append" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__VOIDescription,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VOIs_append" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOIs_append" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< imebra::VOIDescription >::value_type * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_imebra_VOIDescription_Sg__append(arg1,(imebra::VOIDescription const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VOIs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VOIs")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::VOIDescription > *)new std::vector< imebra::VOIDescription >();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VOIs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VOIs",&obj0)) SWIG_fail;
  {
    std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *ptr = (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VOIs" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VOIs" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::VOIDescription > *)new std::vector< imebra::VOIDescription >((std::vector< imebra::VOIDescription > const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_empty" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::vector< imebra::VOIDescription > const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_size" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< imebra::VOIDescription > const *)arg1)->size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_swap" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VOIs_swap" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOIs_swap" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->swap(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_begin" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::VOIDescription >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_end" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::VOIDescription >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_rbegin" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::VOIDescription >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_rend" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::VOIDescription >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_clear" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< imebra::VOIDescription > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_get_allocator" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< imebra::VOIDescription > const *)arg1)->get_allocator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::vector< imebra::VOIDescription >::allocator_type(static_cast< const std::vector< imebra::VOIDescription >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_imebra__VOIDescription_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VOIs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VOIs",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VOIs" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription >::size_type""'");
  } 
  arg1 = static_cast< std::vector< imebra::VOIDescription >::size_type >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::VOIDescription > *)new std::vector< imebra::VOIDescription >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_pop_back" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->pop_back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_resize" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs_resize" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::size_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< imebra::VOIDescription >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_erase" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs_erase" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs_erase" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_imebra_VOIDescription_Sg__erase__SWIG_0(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::VOIDescription >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::iterator arg2 ;
  std::vector< imebra::VOIDescription >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< imebra::VOIDescription >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VOIs_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_erase" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs_erase" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs_erase" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs_erase" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs_erase" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_imebra_VOIDescription_Sg__erase__SWIG_1(arg1,arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::VOIDescription >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VOIs_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VOIs_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VOIs_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::VOIDescription >::erase(std::vector< imebra::VOIDescription >::iterator)\n"
    "    std::vector< imebra::VOIDescription >::erase(std::vector< imebra::VOIDescription >::iterator,std::vector< imebra::VOIDescription >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VOIs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription >::size_type arg1 ;
  std::vector< imebra::VOIDescription >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< imebra::VOIDescription > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VOIs",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VOIs" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription >::size_type""'");
  } 
  arg1 = static_cast< std::vector< imebra::VOIDescription >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__VOIDescription,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VOIs" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VOIs" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< imebra::VOIDescription >::value_type * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::VOIDescription > *)new std::vector< imebra::VOIDescription >(arg1,(std::vector< imebra::VOIDescription >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VOIs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VOIs__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VOIs__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VOIs__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__VOIDescription, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VOIs__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VOIs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::VOIDescription >::vector()\n"
    "    std::vector< imebra::VOIDescription >::vector(std::vector< imebra::VOIDescription > const &)\n"
    "    std::vector< imebra::VOIDescription >::vector(std::vector< imebra::VOIDescription >::size_type)\n"
    "    std::vector< imebra::VOIDescription >::vector(std::vector< imebra::VOIDescription >::size_type,std::vector< imebra::VOIDescription >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VOIs_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_push_back" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__VOIDescription,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VOIs_push_back" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOIs_push_back" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< imebra::VOIDescription >::value_type * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->push_back((std::vector< imebra::VOIDescription >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_front" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::VOIDescription >::value_type *) &((std::vector< imebra::VOIDescription > const *)arg1)->front();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__VOIDescription, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_back" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< imebra::VOIDescription >::value_type *) &((std::vector< imebra::VOIDescription > const *)arg1)->back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__VOIDescription, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::size_type arg2 ;
  std::vector< imebra::VOIDescription >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VOIs_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_assign" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs_assign" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::size_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__VOIDescription,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VOIs_assign" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOIs_assign" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< imebra::VOIDescription >::value_type * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->assign(arg2,(std::vector< imebra::VOIDescription >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::size_type arg2 ;
  std::vector< imebra::VOIDescription >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VOIs_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_resize" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs_resize" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::size_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__VOIDescription,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VOIs_resize" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOIs_resize" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< imebra::VOIDescription >::value_type * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2,(std::vector< imebra::VOIDescription >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VOIs_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_imebra__VOIDescription, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VOIs_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VOIs_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::VOIDescription >::resize(std::vector< imebra::VOIDescription >::size_type)\n"
    "    std::vector< imebra::VOIDescription >::resize(std::vector< imebra::VOIDescription >::size_type,std::vector< imebra::VOIDescription >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VOIs_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::iterator arg2 ;
  std::vector< imebra::VOIDescription >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< imebra::VOIDescription >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VOIs_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_insert" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs_insert" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs_insert" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__VOIDescription,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VOIs_insert" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOIs_insert" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< imebra::VOIDescription >::value_type * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_imebra_VOIDescription_Sg__insert__SWIG_0(arg1,arg2,(imebra::VOIDescription const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< imebra::VOIDescription >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::iterator arg2 ;
  std::vector< imebra::VOIDescription >::size_type arg3 ;
  std::vector< imebra::VOIDescription >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VOIs_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_insert" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs_insert" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VOIs_insert" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VOIs_insert" "', argument " "3"" of type '" "std::vector< imebra::VOIDescription >::size_type""'");
  } 
  arg3 = static_cast< std::vector< imebra::VOIDescription >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_imebra__VOIDescription,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VOIs_insert" "', argument " "4"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOIs_insert" "', argument " "4"" of type '" "std::vector< imebra::VOIDescription >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< imebra::VOIDescription >::value_type * >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_imebra_VOIDescription_Sg__insert__SWIG_1(arg1,arg2,arg3,(imebra::VOIDescription const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_imebra__VOIDescription, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VOIs_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< imebra::VOIDescription >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_imebra__VOIDescription, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VOIs_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VOIs_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< imebra::VOIDescription >::insert(std::vector< imebra::VOIDescription >::iterator,std::vector< imebra::VOIDescription >::value_type const &)\n"
    "    std::vector< imebra::VOIDescription >::insert(std::vector< imebra::VOIDescription >::iterator,std::vector< imebra::VOIDescription >::size_type,std::vector< imebra::VOIDescription >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VOIs_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VOIs_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_reserve" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOIs_reserve" "', argument " "2"" of type '" "std::vector< imebra::VOIDescription >::size_type""'");
  } 
  arg2 = static_cast< std::vector< imebra::VOIDescription >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reserve(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOIs_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< imebra::VOIDescription >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VOIs_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOIs_capacity" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector< imebra::VOIDescription > const *)arg1)->capacity();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VOIs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VOIs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VOIs" "', argument " "1"" of type '" "std::vector< imebra::VOIDescription > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< imebra::VOIDescription > * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VOIs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_uidVerificationSOPClass_1_2_840_10008_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVerificationSOPClass_1_2_840_10008_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVerificationSOPClass_1_2_840_10008_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVerificationSOPClass_1_2_840_10008_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImplicitVRLittleEndian_1_2_840_10008_1_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImplicitVRLittleEndian_1_2_840_10008_1_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImplicitVRLittleEndian_1_2_840_10008_1_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImplicitVRLittleEndian_1_2_840_10008_1_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidExplicitVRLittleEndian_1_2_840_10008_1_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidExplicitVRLittleEndian_1_2_840_10008_1_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidExplicitVRLittleEndian_1_2_840_10008_1_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidExplicitVRLittleEndian_1_2_840_10008_1_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDeflatedExplicitVRLittleEndian_1_2_840_10008_1_2_1_99_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDeflatedExplicitVRLittleEndian_1_2_840_10008_1_2_1_99 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDeflatedExplicitVRLittleEndian_1_2_840_10008_1_2_1_99_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDeflatedExplicitVRLittleEndian_1_2_840_10008_1_2_1_99);
  return pyobj;
}


SWIGINTERN int Swig_var_uidExplicitVRBigEndian_1_2_840_10008_1_2_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidExplicitVRBigEndian_1_2_840_10008_1_2_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidExplicitVRBigEndian_1_2_840_10008_1_2_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidExplicitVRBigEndian_1_2_840_10008_1_2_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGBaselineProcess1_1_2_840_10008_1_2_4_50_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGBaselineProcess1_1_2_840_10008_1_2_4_50 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGBaselineProcess1_1_2_840_10008_1_2_4_50_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGBaselineProcess1_1_2_840_10008_1_2_4_50);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGExtendedProcess2_4_1_2_840_10008_1_2_4_51_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGExtendedProcess2_4_1_2_840_10008_1_2_4_51 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGExtendedProcess2_4_1_2_840_10008_1_2_4_51_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGExtendedProcess2_4_1_2_840_10008_1_2_4_51);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGExtendedProcess3_5_1_2_840_10008_1_2_4_52_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGExtendedProcess3_5_1_2_840_10008_1_2_4_52 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGExtendedProcess3_5_1_2_840_10008_1_2_4_52_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGExtendedProcess3_5_1_2_840_10008_1_2_4_52);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGSpectralSelectionNonHierarchicalProcess6_8_1_2_840_10008_1_2_4_53_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGSpectralSelectionNonHierarchicalProcess6_8_1_2_840_10008_1_2_4_53 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGSpectralSelectionNonHierarchicalProcess6_8_1_2_840_10008_1_2_4_53_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGSpectralSelectionNonHierarchicalProcess6_8_1_2_840_10008_1_2_4_53);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGSpectralSelectionNonHierarchicalProcess7_9_1_2_840_10008_1_2_4_54_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGSpectralSelectionNonHierarchicalProcess7_9_1_2_840_10008_1_2_4_54 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGSpectralSelectionNonHierarchicalProcess7_9_1_2_840_10008_1_2_4_54_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGSpectralSelectionNonHierarchicalProcess7_9_1_2_840_10008_1_2_4_54);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGFullProgressionNonHierarchicalProcess10_12_1_2_840_10008_1_2_4_55_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGFullProgressionNonHierarchicalProcess10_12_1_2_840_10008_1_2_4_55 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGFullProgressionNonHierarchicalProcess10_12_1_2_840_10008_1_2_4_55_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGFullProgressionNonHierarchicalProcess10_12_1_2_840_10008_1_2_4_55);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGFullProgressionNonHierarchicalProcess11_13_1_2_840_10008_1_2_4_56_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGFullProgressionNonHierarchicalProcess11_13_1_2_840_10008_1_2_4_56 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGFullProgressionNonHierarchicalProcess11_13_1_2_840_10008_1_2_4_56_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGFullProgressionNonHierarchicalProcess11_13_1_2_840_10008_1_2_4_56);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGLosslessNonHierarchicalProcess14_1_2_840_10008_1_2_4_57_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGLosslessNonHierarchicalProcess14_1_2_840_10008_1_2_4_57 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGLosslessNonHierarchicalProcess14_1_2_840_10008_1_2_4_57_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGLosslessNonHierarchicalProcess14_1_2_840_10008_1_2_4_57);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGLosslessNonHierarchicalProcess15_1_2_840_10008_1_2_4_58_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGLosslessNonHierarchicalProcess15_1_2_840_10008_1_2_4_58 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGLosslessNonHierarchicalProcess15_1_2_840_10008_1_2_4_58_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGLosslessNonHierarchicalProcess15_1_2_840_10008_1_2_4_58);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGExtendedHierarchicalProcess16_18_1_2_840_10008_1_2_4_59_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGExtendedHierarchicalProcess16_18_1_2_840_10008_1_2_4_59 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGExtendedHierarchicalProcess16_18_1_2_840_10008_1_2_4_59_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGExtendedHierarchicalProcess16_18_1_2_840_10008_1_2_4_59);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGExtendedHierarchicalProcess17_19_1_2_840_10008_1_2_4_60_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGExtendedHierarchicalProcess17_19_1_2_840_10008_1_2_4_60 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGExtendedHierarchicalProcess17_19_1_2_840_10008_1_2_4_60_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGExtendedHierarchicalProcess17_19_1_2_840_10008_1_2_4_60);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGSpectralSelectionHierarchicalProcess20_22_1_2_840_10008_1_2_4_61_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGSpectralSelectionHierarchicalProcess20_22_1_2_840_10008_1_2_4_61 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGSpectralSelectionHierarchicalProcess20_22_1_2_840_10008_1_2_4_61_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGSpectralSelectionHierarchicalProcess20_22_1_2_840_10008_1_2_4_61);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGSpectralSelectionHierarchicalProcess21_23_1_2_840_10008_1_2_4_62_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGSpectralSelectionHierarchicalProcess21_23_1_2_840_10008_1_2_4_62 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGSpectralSelectionHierarchicalProcess21_23_1_2_840_10008_1_2_4_62_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGSpectralSelectionHierarchicalProcess21_23_1_2_840_10008_1_2_4_62);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGFullProgressionHierarchicalProcess24_26_1_2_840_10008_1_2_4_63_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGFullProgressionHierarchicalProcess24_26_1_2_840_10008_1_2_4_63 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGFullProgressionHierarchicalProcess24_26_1_2_840_10008_1_2_4_63_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGFullProgressionHierarchicalProcess24_26_1_2_840_10008_1_2_4_63);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGFullProgressionHierarchicalProcess25_27_1_2_840_10008_1_2_4_64_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGFullProgressionHierarchicalProcess25_27_1_2_840_10008_1_2_4_64 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGFullProgressionHierarchicalProcess25_27_1_2_840_10008_1_2_4_64_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGFullProgressionHierarchicalProcess25_27_1_2_840_10008_1_2_4_64);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGLosslessHierarchicalProcess28_1_2_840_10008_1_2_4_65_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGLosslessHierarchicalProcess28_1_2_840_10008_1_2_4_65 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGLosslessHierarchicalProcess28_1_2_840_10008_1_2_4_65_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGLosslessHierarchicalProcess28_1_2_840_10008_1_2_4_65);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGLosslessHierarchicalProcess29_1_2_840_10008_1_2_4_66_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGLosslessHierarchicalProcess29_1_2_840_10008_1_2_4_66 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGLosslessHierarchicalProcess29_1_2_840_10008_1_2_4_66_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGLosslessHierarchicalProcess29_1_2_840_10008_1_2_4_66);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1_1_2_840_10008_1_2_4_70_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1_1_2_840_10008_1_2_4_70 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1_1_2_840_10008_1_2_4_70_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1_1_2_840_10008_1_2_4_70);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGLSLosslessImageCompression_1_2_840_10008_1_2_4_80_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGLSLosslessImageCompression_1_2_840_10008_1_2_4_80 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGLSLosslessImageCompression_1_2_840_10008_1_2_4_80_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGLSLosslessImageCompression_1_2_840_10008_1_2_4_80);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEGLSLossyNearLosslessImageCompression_1_2_840_10008_1_2_4_81_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEGLSLossyNearLosslessImageCompression_1_2_840_10008_1_2_4_81 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEGLSLossyNearLosslessImageCompression_1_2_840_10008_1_2_4_81_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEGLSLossyNearLosslessImageCompression_1_2_840_10008_1_2_4_81);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEG2000ImageCompressionLosslessOnly_1_2_840_10008_1_2_4_90_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEG2000ImageCompressionLosslessOnly_1_2_840_10008_1_2_4_90 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEG2000ImageCompressionLosslessOnly_1_2_840_10008_1_2_4_90_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEG2000ImageCompressionLosslessOnly_1_2_840_10008_1_2_4_90);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEG2000ImageCompression_1_2_840_10008_1_2_4_91_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEG2000ImageCompression_1_2_840_10008_1_2_4_91 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEG2000ImageCompression_1_2_840_10008_1_2_4_91_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEG2000ImageCompression_1_2_840_10008_1_2_4_91);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEG2000Part2MulticomponentImageCompressionLosslessOnly_1_2_840_10008_1_2_4_92_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEG2000Part2MulticomponentImageCompressionLosslessOnly_1_2_840_10008_1_2_4_92 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEG2000Part2MulticomponentImageCompressionLosslessOnly_1_2_840_10008_1_2_4_92_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEG2000Part2MulticomponentImageCompressionLosslessOnly_1_2_840_10008_1_2_4_92);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPEG2000Part2MulticomponentImageCompression_1_2_840_10008_1_2_4_93_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPEG2000Part2MulticomponentImageCompression_1_2_840_10008_1_2_4_93 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPEG2000Part2MulticomponentImageCompression_1_2_840_10008_1_2_4_93_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPEG2000Part2MulticomponentImageCompression_1_2_840_10008_1_2_4_93);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPIPReferenced_1_2_840_10008_1_2_4_94_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPIPReferenced_1_2_840_10008_1_2_4_94 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPIPReferenced_1_2_840_10008_1_2_4_94_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPIPReferenced_1_2_840_10008_1_2_4_94);
  return pyobj;
}


SWIGINTERN int Swig_var_uidJPIPReferencedDeflate_1_2_840_10008_1_2_4_95_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidJPIPReferencedDeflate_1_2_840_10008_1_2_4_95 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidJPIPReferencedDeflate_1_2_840_10008_1_2_4_95_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidJPIPReferencedDeflate_1_2_840_10008_1_2_4_95);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMPEG2MainProfileMainLevel_1_2_840_10008_1_2_4_100_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMPEG2MainProfileMainLevel_1_2_840_10008_1_2_4_100 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMPEG2MainProfileMainLevel_1_2_840_10008_1_2_4_100_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMPEG2MainProfileMainLevel_1_2_840_10008_1_2_4_100);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMPEG2MainProfileHighLevel_1_2_840_10008_1_2_4_101_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMPEG2MainProfileHighLevel_1_2_840_10008_1_2_4_101 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMPEG2MainProfileHighLevel_1_2_840_10008_1_2_4_101_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMPEG2MainProfileHighLevel_1_2_840_10008_1_2_4_101);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMPEG4AVCH264HighProfileLevel41_1_2_840_10008_1_2_4_102_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMPEG4AVCH264HighProfileLevel41_1_2_840_10008_1_2_4_102 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMPEG4AVCH264HighProfileLevel41_1_2_840_10008_1_2_4_102_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMPEG4AVCH264HighProfileLevel41_1_2_840_10008_1_2_4_102);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMPEG4AVCH264BDcompatibleHighProfileLevel41_1_2_840_10008_1_2_4_103_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMPEG4AVCH264BDcompatibleHighProfileLevel41_1_2_840_10008_1_2_4_103 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMPEG4AVCH264BDcompatibleHighProfileLevel41_1_2_840_10008_1_2_4_103_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMPEG4AVCH264BDcompatibleHighProfileLevel41_1_2_840_10008_1_2_4_103);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMPEG4AVCH264HighProfileLevel42For2DVideo_1_2_840_10008_1_2_4_104_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMPEG4AVCH264HighProfileLevel42For2DVideo_1_2_840_10008_1_2_4_104 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMPEG4AVCH264HighProfileLevel42For2DVideo_1_2_840_10008_1_2_4_104_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMPEG4AVCH264HighProfileLevel42For2DVideo_1_2_840_10008_1_2_4_104);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMPEG4AVCH264HighProfileLevel42For3DVideo_1_2_840_10008_1_2_4_105_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMPEG4AVCH264HighProfileLevel42For3DVideo_1_2_840_10008_1_2_4_105 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMPEG4AVCH264HighProfileLevel42For3DVideo_1_2_840_10008_1_2_4_105_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMPEG4AVCH264HighProfileLevel42For3DVideo_1_2_840_10008_1_2_4_105);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMPEG4AVCH264StereoHighProfileLevel42_1_2_840_10008_1_2_4_106_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMPEG4AVCH264StereoHighProfileLevel42_1_2_840_10008_1_2_4_106 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMPEG4AVCH264StereoHighProfileLevel42_1_2_840_10008_1_2_4_106_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMPEG4AVCH264StereoHighProfileLevel42_1_2_840_10008_1_2_4_106);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHEVCH265MainProfileLevel51_1_2_840_10008_1_2_4_107_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHEVCH265MainProfileLevel51_1_2_840_10008_1_2_4_107 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHEVCH265MainProfileLevel51_1_2_840_10008_1_2_4_107_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHEVCH265MainProfileLevel51_1_2_840_10008_1_2_4_107);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHEVCH265Main10ProfileLevel51_1_2_840_10008_1_2_4_108_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHEVCH265Main10ProfileLevel51_1_2_840_10008_1_2_4_108 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHEVCH265Main10ProfileLevel51_1_2_840_10008_1_2_4_108_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHEVCH265Main10ProfileLevel51_1_2_840_10008_1_2_4_108);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRLELossless_1_2_840_10008_1_2_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRLELossless_1_2_840_10008_1_2_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRLELossless_1_2_840_10008_1_2_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRLELossless_1_2_840_10008_1_2_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRFC2557MIMEencapsulation_1_2_840_10008_1_2_6_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRFC2557MIMEencapsulation_1_2_840_10008_1_2_6_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRFC2557MIMEencapsulation_1_2_840_10008_1_2_6_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRFC2557MIMEencapsulation_1_2_840_10008_1_2_6_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidXMLEncoding_1_2_840_10008_1_2_6_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidXMLEncoding_1_2_840_10008_1_2_6_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidXMLEncoding_1_2_840_10008_1_2_6_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidXMLEncoding_1_2_840_10008_1_2_6_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMediaStorageDirectoryStorage_1_2_840_10008_1_3_10_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMediaStorageDirectoryStorage_1_2_840_10008_1_3_10 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMediaStorageDirectoryStorage_1_2_840_10008_1_3_10_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMediaStorageDirectoryStorage_1_2_840_10008_1_3_10);
  return pyobj;
}


SWIGINTERN int Swig_var_uidTalairachBrainAtlasFrameofReference_1_2_840_10008_1_4_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidTalairachBrainAtlasFrameofReference_1_2_840_10008_1_4_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidTalairachBrainAtlasFrameofReference_1_2_840_10008_1_4_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidTalairachBrainAtlasFrameofReference_1_2_840_10008_1_4_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2T1FrameofReference_1_2_840_10008_1_4_1_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2T1FrameofReference_1_2_840_10008_1_4_1_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2T1FrameofReference_1_2_840_10008_1_4_1_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2T1FrameofReference_1_2_840_10008_1_4_1_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2T2FrameofReference_1_2_840_10008_1_4_1_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2T2FrameofReference_1_2_840_10008_1_4_1_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2T2FrameofReference_1_2_840_10008_1_4_1_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2T2FrameofReference_1_2_840_10008_1_4_1_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2PDFrameofReference_1_2_840_10008_1_4_1_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2PDFrameofReference_1_2_840_10008_1_4_1_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2PDFrameofReference_1_2_840_10008_1_4_1_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2PDFrameofReference_1_2_840_10008_1_4_1_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2EPIFrameofReference_1_2_840_10008_1_4_1_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2EPIFrameofReference_1_2_840_10008_1_4_1_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2EPIFrameofReference_1_2_840_10008_1_4_1_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2EPIFrameofReference_1_2_840_10008_1_4_1_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2FILT1FrameofReference_1_2_840_10008_1_4_1_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2FILT1FrameofReference_1_2_840_10008_1_4_1_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2FILT1FrameofReference_1_2_840_10008_1_4_1_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2FILT1FrameofReference_1_2_840_10008_1_4_1_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2PETFrameofReference_1_2_840_10008_1_4_1_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2PETFrameofReference_1_2_840_10008_1_4_1_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2PETFrameofReference_1_2_840_10008_1_4_1_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2PETFrameofReference_1_2_840_10008_1_4_1_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2TRANSMFrameofReference_1_2_840_10008_1_4_1_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2TRANSMFrameofReference_1_2_840_10008_1_4_1_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2TRANSMFrameofReference_1_2_840_10008_1_4_1_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2TRANSMFrameofReference_1_2_840_10008_1_4_1_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2SPECTFrameofReference_1_2_840_10008_1_4_1_9_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2SPECTFrameofReference_1_2_840_10008_1_4_1_9 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2SPECTFrameofReference_1_2_840_10008_1_4_1_9_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2SPECTFrameofReference_1_2_840_10008_1_4_1_9);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2GRAYFrameofReference_1_2_840_10008_1_4_1_10_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2GRAYFrameofReference_1_2_840_10008_1_4_1_10 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2GRAYFrameofReference_1_2_840_10008_1_4_1_10_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2GRAYFrameofReference_1_2_840_10008_1_4_1_10);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2WHITEFrameofReference_1_2_840_10008_1_4_1_11_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2WHITEFrameofReference_1_2_840_10008_1_4_1_11 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2WHITEFrameofReference_1_2_840_10008_1_4_1_11_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2WHITEFrameofReference_1_2_840_10008_1_4_1_11);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2CSFFrameofReference_1_2_840_10008_1_4_1_12_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2CSFFrameofReference_1_2_840_10008_1_4_1_12 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2CSFFrameofReference_1_2_840_10008_1_4_1_12_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2CSFFrameofReference_1_2_840_10008_1_4_1_12);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2BRAINMASKFrameofReference_1_2_840_10008_1_4_1_13_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2BRAINMASKFrameofReference_1_2_840_10008_1_4_1_13 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2BRAINMASKFrameofReference_1_2_840_10008_1_4_1_13_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2BRAINMASKFrameofReference_1_2_840_10008_1_4_1_13);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2AVG305T1FrameofReference_1_2_840_10008_1_4_1_14_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2AVG305T1FrameofReference_1_2_840_10008_1_4_1_14 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2AVG305T1FrameofReference_1_2_840_10008_1_4_1_14_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2AVG305T1FrameofReference_1_2_840_10008_1_4_1_14);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2AVG152T1FrameofReference_1_2_840_10008_1_4_1_15_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2AVG152T1FrameofReference_1_2_840_10008_1_4_1_15 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2AVG152T1FrameofReference_1_2_840_10008_1_4_1_15_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2AVG152T1FrameofReference_1_2_840_10008_1_4_1_15);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2AVG152T2FrameofReference_1_2_840_10008_1_4_1_16_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2AVG152T2FrameofReference_1_2_840_10008_1_4_1_16 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2AVG152T2FrameofReference_1_2_840_10008_1_4_1_16_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2AVG152T2FrameofReference_1_2_840_10008_1_4_1_16);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2AVG152PDFrameofReference_1_2_840_10008_1_4_1_17_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2AVG152PDFrameofReference_1_2_840_10008_1_4_1_17 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2AVG152PDFrameofReference_1_2_840_10008_1_4_1_17_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2AVG152PDFrameofReference_1_2_840_10008_1_4_1_17);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSPM2SINGLESUBJT1FrameofReference_1_2_840_10008_1_4_1_18_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSPM2SINGLESUBJT1FrameofReference_1_2_840_10008_1_4_1_18 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSPM2SINGLESUBJT1FrameofReference_1_2_840_10008_1_4_1_18_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSPM2SINGLESUBJT1FrameofReference_1_2_840_10008_1_4_1_18);
  return pyobj;
}


SWIGINTERN int Swig_var_uidICBM452T1FrameofReference_1_2_840_10008_1_4_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidICBM452T1FrameofReference_1_2_840_10008_1_4_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidICBM452T1FrameofReference_1_2_840_10008_1_4_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidICBM452T1FrameofReference_1_2_840_10008_1_4_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidICBMSingleSubjectMRIFrameofReference_1_2_840_10008_1_4_2_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidICBMSingleSubjectMRIFrameofReference_1_2_840_10008_1_4_2_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidICBMSingleSubjectMRIFrameofReference_1_2_840_10008_1_4_2_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidICBMSingleSubjectMRIFrameofReference_1_2_840_10008_1_4_2_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHotIronColorPaletteSOPInstance_1_2_840_10008_1_5_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHotIronColorPaletteSOPInstance_1_2_840_10008_1_5_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHotIronColorPaletteSOPInstance_1_2_840_10008_1_5_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHotIronColorPaletteSOPInstance_1_2_840_10008_1_5_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPETColorPaletteSOPInstance_1_2_840_10008_1_5_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPETColorPaletteSOPInstance_1_2_840_10008_1_5_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPETColorPaletteSOPInstance_1_2_840_10008_1_5_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPETColorPaletteSOPInstance_1_2_840_10008_1_5_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHotMetalBlueColorPaletteSOPInstance_1_2_840_10008_1_5_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHotMetalBlueColorPaletteSOPInstance_1_2_840_10008_1_5_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHotMetalBlueColorPaletteSOPInstance_1_2_840_10008_1_5_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHotMetalBlueColorPaletteSOPInstance_1_2_840_10008_1_5_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPET20StepColorPaletteSOPInstance_1_2_840_10008_1_5_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPET20StepColorPaletteSOPInstance_1_2_840_10008_1_5_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPET20StepColorPaletteSOPInstance_1_2_840_10008_1_5_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPET20StepColorPaletteSOPInstance_1_2_840_10008_1_5_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSpringColorPaletteSOPInstance_1_2_840_10008_1_5_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSpringColorPaletteSOPInstance_1_2_840_10008_1_5_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSpringColorPaletteSOPInstance_1_2_840_10008_1_5_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSpringColorPaletteSOPInstance_1_2_840_10008_1_5_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSummerColorPaletteSOPInstance_1_2_840_10008_1_5_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSummerColorPaletteSOPInstance_1_2_840_10008_1_5_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSummerColorPaletteSOPInstance_1_2_840_10008_1_5_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSummerColorPaletteSOPInstance_1_2_840_10008_1_5_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidFallColorPaletteSOPInstance_1_2_840_10008_1_5_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidFallColorPaletteSOPInstance_1_2_840_10008_1_5_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidFallColorPaletteSOPInstance_1_2_840_10008_1_5_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidFallColorPaletteSOPInstance_1_2_840_10008_1_5_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uidWinterColorPaletteSOPInstance_1_2_840_10008_1_5_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidWinterColorPaletteSOPInstance_1_2_840_10008_1_5_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidWinterColorPaletteSOPInstance_1_2_840_10008_1_5_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidWinterColorPaletteSOPInstance_1_2_840_10008_1_5_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicStudyContentNotificationSOPClass_1_2_840_10008_1_9_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicStudyContentNotificationSOPClass_1_2_840_10008_1_9 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicStudyContentNotificationSOPClass_1_2_840_10008_1_9_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicStudyContentNotificationSOPClass_1_2_840_10008_1_9);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPapyrus3ImplicitVRLittleEndian_1_2_840_10008_1_20_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPapyrus3ImplicitVRLittleEndian_1_2_840_10008_1_20 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPapyrus3ImplicitVRLittleEndian_1_2_840_10008_1_20_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPapyrus3ImplicitVRLittleEndian_1_2_840_10008_1_20);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStorageCommitmentPushModelSOPClass_1_2_840_10008_1_20_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStorageCommitmentPushModelSOPClass_1_2_840_10008_1_20_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStorageCommitmentPushModelSOPClass_1_2_840_10008_1_20_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStorageCommitmentPushModelSOPClass_1_2_840_10008_1_20_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStorageCommitmentPushModelSOPInstance_1_2_840_10008_1_20_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStorageCommitmentPushModelSOPInstance_1_2_840_10008_1_20_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStorageCommitmentPushModelSOPInstance_1_2_840_10008_1_20_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStorageCommitmentPushModelSOPInstance_1_2_840_10008_1_20_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStorageCommitmentPullModelSOPClass_1_2_840_10008_1_20_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStorageCommitmentPullModelSOPClass_1_2_840_10008_1_20_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStorageCommitmentPullModelSOPClass_1_2_840_10008_1_20_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStorageCommitmentPullModelSOPClass_1_2_840_10008_1_20_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStorageCommitmentPullModelSOPInstance_1_2_840_10008_1_20_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStorageCommitmentPullModelSOPInstance_1_2_840_10008_1_20_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStorageCommitmentPullModelSOPInstance_1_2_840_10008_1_20_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStorageCommitmentPullModelSOPInstance_1_2_840_10008_1_20_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidProceduralEventLoggingSOPClass_1_2_840_10008_1_40_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidProceduralEventLoggingSOPClass_1_2_840_10008_1_40 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidProceduralEventLoggingSOPClass_1_2_840_10008_1_40_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidProceduralEventLoggingSOPClass_1_2_840_10008_1_40);
  return pyobj;
}


SWIGINTERN int Swig_var_uidProceduralEventLoggingSOPInstance_1_2_840_10008_1_40_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidProceduralEventLoggingSOPInstance_1_2_840_10008_1_40_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidProceduralEventLoggingSOPInstance_1_2_840_10008_1_40_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidProceduralEventLoggingSOPInstance_1_2_840_10008_1_40_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSubstanceAdministrationLoggingSOPClass_1_2_840_10008_1_42_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSubstanceAdministrationLoggingSOPClass_1_2_840_10008_1_42 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSubstanceAdministrationLoggingSOPClass_1_2_840_10008_1_42_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSubstanceAdministrationLoggingSOPClass_1_2_840_10008_1_42);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSubstanceAdministrationLoggingSOPInstance_1_2_840_10008_1_42_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSubstanceAdministrationLoggingSOPInstance_1_2_840_10008_1_42_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSubstanceAdministrationLoggingSOPInstance_1_2_840_10008_1_42_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSubstanceAdministrationLoggingSOPInstance_1_2_840_10008_1_42_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOMUIDRegistry_1_2_840_10008_2_6_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOMUIDRegistry_1_2_840_10008_2_6_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOMUIDRegistry_1_2_840_10008_2_6_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOMUIDRegistry_1_2_840_10008_2_6_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOMControlledTerminology_1_2_840_10008_2_16_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOMControlledTerminology_1_2_840_10008_2_16_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOMControlledTerminology_1_2_840_10008_2_16_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOMControlledTerminology_1_2_840_10008_2_16_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidAdultMouseAnatomyOntology_1_2_840_10008_2_16_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidAdultMouseAnatomyOntology_1_2_840_10008_2_16_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidAdultMouseAnatomyOntology_1_2_840_10008_2_16_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidAdultMouseAnatomyOntology_1_2_840_10008_2_16_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUberonOntology_1_2_840_10008_2_16_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUberonOntology_1_2_840_10008_2_16_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUberonOntology_1_2_840_10008_2_16_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUberonOntology_1_2_840_10008_2_16_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidIntegratedTaxonomicInformationSystemITISTaxonomicSerialNumberTSN_1_2_840_10008_2_16_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidIntegratedTaxonomicInformationSystemITISTaxonomicSerialNumberTSN_1_2_840_10008_2_16_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidIntegratedTaxonomicInformationSystemITISTaxonomicSerialNumberTSN_1_2_840_10008_2_16_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidIntegratedTaxonomicInformationSystemITISTaxonomicSerialNumberTSN_1_2_840_10008_2_16_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMouseGenomeInitiativeMGI_1_2_840_10008_2_16_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMouseGenomeInitiativeMGI_1_2_840_10008_2_16_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMouseGenomeInitiativeMGI_1_2_840_10008_2_16_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMouseGenomeInitiativeMGI_1_2_840_10008_2_16_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPubChemCompoundCID_1_2_840_10008_2_16_9_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPubChemCompoundCID_1_2_840_10008_2_16_9 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPubChemCompoundCID_1_2_840_10008_2_16_9_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPubChemCompoundCID_1_2_840_10008_2_16_9);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOMApplicationContextName_1_2_840_10008_3_1_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOMApplicationContextName_1_2_840_10008_3_1_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOMApplicationContextName_1_2_840_10008_3_1_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOMApplicationContextName_1_2_840_10008_3_1_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDetachedPatientManagementSOPClass_1_2_840_10008_3_1_2_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDetachedPatientManagementSOPClass_1_2_840_10008_3_1_2_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDetachedPatientManagementSOPClass_1_2_840_10008_3_1_2_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDetachedPatientManagementSOPClass_1_2_840_10008_3_1_2_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDetachedPatientManagementMetaSOPClass_1_2_840_10008_3_1_2_1_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDetachedPatientManagementMetaSOPClass_1_2_840_10008_3_1_2_1_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDetachedPatientManagementMetaSOPClass_1_2_840_10008_3_1_2_1_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDetachedPatientManagementMetaSOPClass_1_2_840_10008_3_1_2_1_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDetachedVisitManagementSOPClass_1_2_840_10008_3_1_2_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDetachedVisitManagementSOPClass_1_2_840_10008_3_1_2_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDetachedVisitManagementSOPClass_1_2_840_10008_3_1_2_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDetachedVisitManagementSOPClass_1_2_840_10008_3_1_2_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDetachedStudyManagementSOPClass_1_2_840_10008_3_1_2_3_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDetachedStudyManagementSOPClass_1_2_840_10008_3_1_2_3_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDetachedStudyManagementSOPClass_1_2_840_10008_3_1_2_3_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDetachedStudyManagementSOPClass_1_2_840_10008_3_1_2_3_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStudyComponentManagementSOPClass_1_2_840_10008_3_1_2_3_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStudyComponentManagementSOPClass_1_2_840_10008_3_1_2_3_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStudyComponentManagementSOPClass_1_2_840_10008_3_1_2_3_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStudyComponentManagementSOPClass_1_2_840_10008_3_1_2_3_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidModalityPerformedProcedureStepSOPClass_1_2_840_10008_3_1_2_3_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidModalityPerformedProcedureStepSOPClass_1_2_840_10008_3_1_2_3_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidModalityPerformedProcedureStepSOPClass_1_2_840_10008_3_1_2_3_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidModalityPerformedProcedureStepSOPClass_1_2_840_10008_3_1_2_3_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidModalityPerformedProcedureStepRetrieveSOPClass_1_2_840_10008_3_1_2_3_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidModalityPerformedProcedureStepRetrieveSOPClass_1_2_840_10008_3_1_2_3_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidModalityPerformedProcedureStepRetrieveSOPClass_1_2_840_10008_3_1_2_3_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidModalityPerformedProcedureStepRetrieveSOPClass_1_2_840_10008_3_1_2_3_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidModalityPerformedProcedureStepNotificationSOPClass_1_2_840_10008_3_1_2_3_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidModalityPerformedProcedureStepNotificationSOPClass_1_2_840_10008_3_1_2_3_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidModalityPerformedProcedureStepNotificationSOPClass_1_2_840_10008_3_1_2_3_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidModalityPerformedProcedureStepNotificationSOPClass_1_2_840_10008_3_1_2_3_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDetachedResultsManagementSOPClass_1_2_840_10008_3_1_2_5_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDetachedResultsManagementSOPClass_1_2_840_10008_3_1_2_5_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDetachedResultsManagementSOPClass_1_2_840_10008_3_1_2_5_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDetachedResultsManagementSOPClass_1_2_840_10008_3_1_2_5_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDetachedResultsManagementMetaSOPClass_1_2_840_10008_3_1_2_5_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDetachedResultsManagementMetaSOPClass_1_2_840_10008_3_1_2_5_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDetachedResultsManagementMetaSOPClass_1_2_840_10008_3_1_2_5_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDetachedResultsManagementMetaSOPClass_1_2_840_10008_3_1_2_5_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDetachedStudyManagementMetaSOPClass_1_2_840_10008_3_1_2_5_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDetachedStudyManagementMetaSOPClass_1_2_840_10008_3_1_2_5_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDetachedStudyManagementMetaSOPClass_1_2_840_10008_3_1_2_5_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDetachedStudyManagementMetaSOPClass_1_2_840_10008_3_1_2_5_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDetachedInterpretationManagementSOPClass_1_2_840_10008_3_1_2_6_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDetachedInterpretationManagementSOPClass_1_2_840_10008_3_1_2_6_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDetachedInterpretationManagementSOPClass_1_2_840_10008_3_1_2_6_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDetachedInterpretationManagementSOPClass_1_2_840_10008_3_1_2_6_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStorageServiceClass_1_2_840_10008_4_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStorageServiceClass_1_2_840_10008_4_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStorageServiceClass_1_2_840_10008_4_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStorageServiceClass_1_2_840_10008_4_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicFilmSessionSOPClass_1_2_840_10008_5_1_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicFilmSessionSOPClass_1_2_840_10008_5_1_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicFilmSessionSOPClass_1_2_840_10008_5_1_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicFilmSessionSOPClass_1_2_840_10008_5_1_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicFilmBoxSOPClass_1_2_840_10008_5_1_1_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicFilmBoxSOPClass_1_2_840_10008_5_1_1_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicFilmBoxSOPClass_1_2_840_10008_5_1_1_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicFilmBoxSOPClass_1_2_840_10008_5_1_1_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicGrayscaleImageBoxSOPClass_1_2_840_10008_5_1_1_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicGrayscaleImageBoxSOPClass_1_2_840_10008_5_1_1_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicGrayscaleImageBoxSOPClass_1_2_840_10008_5_1_1_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicGrayscaleImageBoxSOPClass_1_2_840_10008_5_1_1_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicColorImageBoxSOPClass_1_2_840_10008_5_1_1_4_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicColorImageBoxSOPClass_1_2_840_10008_5_1_1_4_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicColorImageBoxSOPClass_1_2_840_10008_5_1_1_4_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicColorImageBoxSOPClass_1_2_840_10008_5_1_1_4_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidReferencedImageBoxSOPClass_1_2_840_10008_5_1_1_4_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidReferencedImageBoxSOPClass_1_2_840_10008_5_1_1_4_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidReferencedImageBoxSOPClass_1_2_840_10008_5_1_1_4_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidReferencedImageBoxSOPClass_1_2_840_10008_5_1_1_4_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9);
  return pyobj;
}


SWIGINTERN int Swig_var_uidReferencedGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidReferencedGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidReferencedGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidReferencedGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPrintJobSOPClass_1_2_840_10008_5_1_1_14_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPrintJobSOPClass_1_2_840_10008_5_1_1_14 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPrintJobSOPClass_1_2_840_10008_5_1_1_14_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPrintJobSOPClass_1_2_840_10008_5_1_1_14);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicAnnotationBoxSOPClass_1_2_840_10008_5_1_1_15_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicAnnotationBoxSOPClass_1_2_840_10008_5_1_1_15 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicAnnotationBoxSOPClass_1_2_840_10008_5_1_1_15_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicAnnotationBoxSOPClass_1_2_840_10008_5_1_1_15);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPrinterSOPClass_1_2_840_10008_5_1_1_16_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPrinterSOPClass_1_2_840_10008_5_1_1_16 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPrinterSOPClass_1_2_840_10008_5_1_1_16_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPrinterSOPClass_1_2_840_10008_5_1_1_16);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPrinterConfigurationRetrievalSOPClass_1_2_840_10008_5_1_1_16_376_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPrinterConfigurationRetrievalSOPClass_1_2_840_10008_5_1_1_16_376 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPrinterConfigurationRetrievalSOPClass_1_2_840_10008_5_1_1_16_376_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPrinterConfigurationRetrievalSOPClass_1_2_840_10008_5_1_1_16_376);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPrinterSOPInstance_1_2_840_10008_5_1_1_17_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPrinterSOPInstance_1_2_840_10008_5_1_1_17 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPrinterSOPInstance_1_2_840_10008_5_1_1_17_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPrinterSOPInstance_1_2_840_10008_5_1_1_17);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPrinterConfigurationRetrievalSOPInstance_1_2_840_10008_5_1_1_17_376_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPrinterConfigurationRetrievalSOPInstance_1_2_840_10008_5_1_1_17_376 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPrinterConfigurationRetrievalSOPInstance_1_2_840_10008_5_1_1_17_376_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPrinterConfigurationRetrievalSOPInstance_1_2_840_10008_5_1_1_17_376);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18);
  return pyobj;
}


SWIGINTERN int Swig_var_uidReferencedColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidReferencedColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidReferencedColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidReferencedColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVOILUTBoxSOPClass_1_2_840_10008_5_1_1_22_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVOILUTBoxSOPClass_1_2_840_10008_5_1_1_22 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVOILUTBoxSOPClass_1_2_840_10008_5_1_1_22_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVOILUTBoxSOPClass_1_2_840_10008_5_1_1_22);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPresentationLUTSOPClass_1_2_840_10008_5_1_1_23_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPresentationLUTSOPClass_1_2_840_10008_5_1_1_23 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPresentationLUTSOPClass_1_2_840_10008_5_1_1_23_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPresentationLUTSOPClass_1_2_840_10008_5_1_1_23);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicPrintImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicPrintImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicPrintImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicPrintImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPrintQueueSOPInstance_1_2_840_10008_5_1_1_25_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPrintQueueSOPInstance_1_2_840_10008_5_1_1_25 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPrintQueueSOPInstance_1_2_840_10008_5_1_1_25_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPrintQueueSOPInstance_1_2_840_10008_5_1_1_25);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPrintQueueManagementSOPClass_1_2_840_10008_5_1_1_26_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPrintQueueManagementSOPClass_1_2_840_10008_5_1_1_26 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPrintQueueManagementSOPClass_1_2_840_10008_5_1_1_26_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPrintQueueManagementSOPClass_1_2_840_10008_5_1_1_26);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStoredPrintStorageSOPClass_1_2_840_10008_5_1_1_27_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStoredPrintStorageSOPClass_1_2_840_10008_5_1_1_27 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStoredPrintStorageSOPClass_1_2_840_10008_5_1_1_27_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStoredPrintStorageSOPClass_1_2_840_10008_5_1_1_27);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHardcopyGrayscaleImageStorageSOPClass_1_2_840_10008_5_1_1_29_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHardcopyGrayscaleImageStorageSOPClass_1_2_840_10008_5_1_1_29 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHardcopyGrayscaleImageStorageSOPClass_1_2_840_10008_5_1_1_29_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHardcopyGrayscaleImageStorageSOPClass_1_2_840_10008_5_1_1_29);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHardcopyColorImageStorageSOPClass_1_2_840_10008_5_1_1_30_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHardcopyColorImageStorageSOPClass_1_2_840_10008_5_1_1_30 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHardcopyColorImageStorageSOPClass_1_2_840_10008_5_1_1_30_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHardcopyColorImageStorageSOPClass_1_2_840_10008_5_1_1_30);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPullPrintRequestSOPClass_1_2_840_10008_5_1_1_31_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPullPrintRequestSOPClass_1_2_840_10008_5_1_1_31 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPullPrintRequestSOPClass_1_2_840_10008_5_1_1_31_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPullPrintRequestSOPClass_1_2_840_10008_5_1_1_31);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPullStoredPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_32_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPullStoredPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_32 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPullStoredPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_32_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPullStoredPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_32);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMediaCreationManagementSOPClassUID_1_2_840_10008_5_1_1_33_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMediaCreationManagementSOPClassUID_1_2_840_10008_5_1_1_33 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMediaCreationManagementSOPClassUID_1_2_840_10008_5_1_1_33_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMediaCreationManagementSOPClassUID_1_2_840_10008_5_1_1_33);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDisplaySystemSOPClass_1_2_840_10008_5_1_1_40_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDisplaySystemSOPClass_1_2_840_10008_5_1_1_40 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDisplaySystemSOPClass_1_2_840_10008_5_1_1_40_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDisplaySystemSOPClass_1_2_840_10008_5_1_1_40);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDisplaySystemSOPInstance_1_2_840_10008_5_1_1_40_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDisplaySystemSOPInstance_1_2_840_10008_5_1_1_40_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDisplaySystemSOPInstance_1_2_840_10008_5_1_1_40_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDisplaySystemSOPInstance_1_2_840_10008_5_1_1_40_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidComputedRadiographyImageStorage_1_2_840_10008_5_1_4_1_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidComputedRadiographyImageStorage_1_2_840_10008_5_1_4_1_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidComputedRadiographyImageStorage_1_2_840_10008_5_1_4_1_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidComputedRadiographyImageStorage_1_2_840_10008_5_1_4_1_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDigitalMammographyXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDigitalMammographyXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDigitalMammographyXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDigitalMammographyXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDigitalMammographyXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDigitalMammographyXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDigitalMammographyXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDigitalMammographyXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDigitalIntraOralXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDigitalIntraOralXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDigitalIntraOralXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDigitalIntraOralXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDigitalIntraOralXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_3_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDigitalIntraOralXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_3_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDigitalIntraOralXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_3_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDigitalIntraOralXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_3_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidCTImageStorage_1_2_840_10008_5_1_4_1_1_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidCTImageStorage_1_2_840_10008_5_1_4_1_1_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidCTImageStorage_1_2_840_10008_5_1_4_1_1_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidCTImageStorage_1_2_840_10008_5_1_4_1_1_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidLegacyConvertedEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidLegacyConvertedEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidLegacyConvertedEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidLegacyConvertedEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUltrasoundMultiframeImageStorageRetired_1_2_840_10008_5_1_4_1_1_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUltrasoundMultiframeImageStorageRetired_1_2_840_10008_5_1_4_1_1_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUltrasoundMultiframeImageStorageRetired_1_2_840_10008_5_1_4_1_1_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUltrasoundMultiframeImageStorageRetired_1_2_840_10008_5_1_4_1_1_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUltrasoundMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_3_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUltrasoundMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_3_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUltrasoundMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_3_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUltrasoundMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_3_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMRImageStorage_1_2_840_10008_5_1_4_1_1_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMRImageStorage_1_2_840_10008_5_1_4_1_1_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMRImageStorage_1_2_840_10008_5_1_4_1_1_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMRImageStorage_1_2_840_10008_5_1_4_1_1_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMRSpectroscopyStorage_1_2_840_10008_5_1_4_1_1_4_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMRSpectroscopyStorage_1_2_840_10008_5_1_4_1_1_4_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMRSpectroscopyStorage_1_2_840_10008_5_1_4_1_1_4_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMRSpectroscopyStorage_1_2_840_10008_5_1_4_1_1_4_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEnhancedMRColorImageStorage_1_2_840_10008_5_1_4_1_1_4_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEnhancedMRColorImageStorage_1_2_840_10008_5_1_4_1_1_4_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEnhancedMRColorImageStorage_1_2_840_10008_5_1_4_1_1_4_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEnhancedMRColorImageStorage_1_2_840_10008_5_1_4_1_1_4_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidLegacyConvertedEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidLegacyConvertedEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidLegacyConvertedEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidLegacyConvertedEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUltrasoundImageStorageRetired_1_2_840_10008_5_1_4_1_1_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUltrasoundImageStorageRetired_1_2_840_10008_5_1_4_1_1_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUltrasoundImageStorageRetired_1_2_840_10008_5_1_4_1_1_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUltrasoundImageStorageRetired_1_2_840_10008_5_1_4_1_1_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUltrasoundImageStorage_1_2_840_10008_5_1_4_1_1_6_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUltrasoundImageStorage_1_2_840_10008_5_1_4_1_1_6_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUltrasoundImageStorage_1_2_840_10008_5_1_4_1_1_6_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUltrasoundImageStorage_1_2_840_10008_5_1_4_1_1_6_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEnhancedUSVolumeStorage_1_2_840_10008_5_1_4_1_1_6_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEnhancedUSVolumeStorage_1_2_840_10008_5_1_4_1_1_6_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEnhancedUSVolumeStorage_1_2_840_10008_5_1_4_1_1_6_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEnhancedUSVolumeStorage_1_2_840_10008_5_1_4_1_1_6_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMultiframeSingleBitSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMultiframeSingleBitSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMultiframeSingleBitSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMultiframeSingleBitSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMultiframeGrayscaleByteSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMultiframeGrayscaleByteSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMultiframeGrayscaleByteSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMultiframeGrayscaleByteSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMultiframeGrayscaleWordSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMultiframeGrayscaleWordSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMultiframeGrayscaleWordSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMultiframeGrayscaleWordSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMultiframeTrueColorSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMultiframeTrueColorSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMultiframeTrueColorSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMultiframeTrueColorSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStandaloneOverlayStorage_1_2_840_10008_5_1_4_1_1_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStandaloneOverlayStorage_1_2_840_10008_5_1_4_1_1_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStandaloneOverlayStorage_1_2_840_10008_5_1_4_1_1_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStandaloneOverlayStorage_1_2_840_10008_5_1_4_1_1_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStandaloneCurveStorage_1_2_840_10008_5_1_4_1_1_9_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStandaloneCurveStorage_1_2_840_10008_5_1_4_1_1_9 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStandaloneCurveStorage_1_2_840_10008_5_1_4_1_1_9_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStandaloneCurveStorage_1_2_840_10008_5_1_4_1_1_9);
  return pyobj;
}


SWIGINTERN int Swig_var_uidWaveformStorageTrial_1_2_840_10008_5_1_4_1_1_9_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidWaveformStorageTrial_1_2_840_10008_5_1_4_1_1_9_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidWaveformStorageTrial_1_2_840_10008_5_1_4_1_1_9_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidWaveformStorageTrial_1_2_840_10008_5_1_4_1_1_9_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uid12leadECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uid12leadECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uid12leadECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uid12leadECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGeneralECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGeneralECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGeneralECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGeneralECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidAmbulatoryECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidAmbulatoryECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidAmbulatoryECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidAmbulatoryECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHemodynamicWaveformStorage_1_2_840_10008_5_1_4_1_1_9_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHemodynamicWaveformStorage_1_2_840_10008_5_1_4_1_1_9_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHemodynamicWaveformStorage_1_2_840_10008_5_1_4_1_1_9_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHemodynamicWaveformStorage_1_2_840_10008_5_1_4_1_1_9_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidCardiacElectrophysiologyWaveformStorage_1_2_840_10008_5_1_4_1_1_9_3_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidCardiacElectrophysiologyWaveformStorage_1_2_840_10008_5_1_4_1_1_9_3_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidCardiacElectrophysiologyWaveformStorage_1_2_840_10008_5_1_4_1_1_9_3_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidCardiacElectrophysiologyWaveformStorage_1_2_840_10008_5_1_4_1_1_9_3_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicVoiceAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicVoiceAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicVoiceAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicVoiceAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGeneralAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGeneralAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGeneralAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGeneralAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidArterialPulseWaveformStorage_1_2_840_10008_5_1_4_1_1_9_5_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidArterialPulseWaveformStorage_1_2_840_10008_5_1_4_1_1_9_5_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidArterialPulseWaveformStorage_1_2_840_10008_5_1_4_1_1_9_5_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidArterialPulseWaveformStorage_1_2_840_10008_5_1_4_1_1_9_5_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRespiratoryWaveformStorage_1_2_840_10008_5_1_4_1_1_9_6_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRespiratoryWaveformStorage_1_2_840_10008_5_1_4_1_1_9_6_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRespiratoryWaveformStorage_1_2_840_10008_5_1_4_1_1_9_6_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRespiratoryWaveformStorage_1_2_840_10008_5_1_4_1_1_9_6_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStandaloneModalityLUTStorage_1_2_840_10008_5_1_4_1_1_10_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStandaloneModalityLUTStorage_1_2_840_10008_5_1_4_1_1_10 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStandaloneModalityLUTStorage_1_2_840_10008_5_1_4_1_1_10_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStandaloneModalityLUTStorage_1_2_840_10008_5_1_4_1_1_10);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStandaloneVOILUTStorage_1_2_840_10008_5_1_4_1_1_11_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStandaloneVOILUTStorage_1_2_840_10008_5_1_4_1_1_11 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStandaloneVOILUTStorage_1_2_840_10008_5_1_4_1_1_11_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStandaloneVOILUTStorage_1_2_840_10008_5_1_4_1_1_11);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPseudoColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPseudoColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPseudoColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPseudoColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBlendingSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBlendingSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBlendingSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBlendingSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidXAXRFGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidXAXRFGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidXAXRFGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidXAXRFGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGrayscalePlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGrayscalePlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGrayscalePlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGrayscalePlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidCompositingPlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidCompositingPlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidCompositingPlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidCompositingPlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uidAdvancedBlendingPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidAdvancedBlendingPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidAdvancedBlendingPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidAdvancedBlendingPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_9_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_9 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_9_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_9);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSegmentedVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_10_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSegmentedVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_10 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSegmentedVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_10_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSegmentedVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_10);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMultipleVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_11_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMultipleVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_11 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMultipleVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_11_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMultipleVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_11);
  return pyobj;
}


SWIGINTERN int Swig_var_uidXRayAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_12_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidXRayAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_12_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidXRayAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_12_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidXRayAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_12_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEnhancedXAImageStorage_1_2_840_10008_5_1_4_1_1_12_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEnhancedXAImageStorage_1_2_840_10008_5_1_4_1_1_12_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEnhancedXAImageStorage_1_2_840_10008_5_1_4_1_1_12_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEnhancedXAImageStorage_1_2_840_10008_5_1_4_1_1_12_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidXRayRadiofluoroscopicImageStorage_1_2_840_10008_5_1_4_1_1_12_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidXRayRadiofluoroscopicImageStorage_1_2_840_10008_5_1_4_1_1_12_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidXRayRadiofluoroscopicImageStorage_1_2_840_10008_5_1_4_1_1_12_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidXRayRadiofluoroscopicImageStorage_1_2_840_10008_5_1_4_1_1_12_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEnhancedXRFImageStorage_1_2_840_10008_5_1_4_1_1_12_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEnhancedXRFImageStorage_1_2_840_10008_5_1_4_1_1_12_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEnhancedXRFImageStorage_1_2_840_10008_5_1_4_1_1_12_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEnhancedXRFImageStorage_1_2_840_10008_5_1_4_1_1_12_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidXRayAngiographicBiPlaneImageStorage_1_2_840_10008_5_1_4_1_1_12_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidXRayAngiographicBiPlaneImageStorage_1_2_840_10008_5_1_4_1_1_12_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidXRayAngiographicBiPlaneImageStorage_1_2_840_10008_5_1_4_1_1_12_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidXRayAngiographicBiPlaneImageStorage_1_2_840_10008_5_1_4_1_1_12_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidXRay3DAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_13_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidXRay3DAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_13_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidXRay3DAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_13_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidXRay3DAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_13_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidXRay3DCraniofacialImageStorage_1_2_840_10008_5_1_4_1_1_13_1_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidXRay3DCraniofacialImageStorage_1_2_840_10008_5_1_4_1_1_13_1_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidXRay3DCraniofacialImageStorage_1_2_840_10008_5_1_4_1_1_13_1_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidXRay3DCraniofacialImageStorage_1_2_840_10008_5_1_4_1_1_13_1_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBreastTomosynthesisImageStorage_1_2_840_10008_5_1_4_1_1_13_1_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBreastTomosynthesisImageStorage_1_2_840_10008_5_1_4_1_1_13_1_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBreastTomosynthesisImageStorage_1_2_840_10008_5_1_4_1_1_13_1_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBreastTomosynthesisImageStorage_1_2_840_10008_5_1_4_1_1_13_1_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBreastProjectionXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_13_1_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBreastProjectionXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_13_1_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBreastProjectionXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_13_1_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBreastProjectionXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_13_1_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBreastProjectionXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_13_1_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBreastProjectionXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_13_1_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBreastProjectionXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_13_1_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBreastProjectionXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_13_1_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidIntravascularOpticalCoherenceTomographyImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_14_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidIntravascularOpticalCoherenceTomographyImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_14_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidIntravascularOpticalCoherenceTomographyImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_14_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidIntravascularOpticalCoherenceTomographyImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_14_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidIntravascularOpticalCoherenceTomographyImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_14_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidIntravascularOpticalCoherenceTomographyImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_14_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidIntravascularOpticalCoherenceTomographyImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_14_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidIntravascularOpticalCoherenceTomographyImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_14_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidNuclearMedicineImageStorageRetired_1_2_840_10008_5_1_4_1_1_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidNuclearMedicineImageStorageRetired_1_2_840_10008_5_1_4_1_1_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidNuclearMedicineImageStorageRetired_1_2_840_10008_5_1_4_1_1_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidNuclearMedicineImageStorageRetired_1_2_840_10008_5_1_4_1_1_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidNuclearMedicineImageStorage_1_2_840_10008_5_1_4_1_1_20_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidNuclearMedicineImageStorage_1_2_840_10008_5_1_4_1_1_20 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidNuclearMedicineImageStorage_1_2_840_10008_5_1_4_1_1_20_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidNuclearMedicineImageStorage_1_2_840_10008_5_1_4_1_1_20);
  return pyobj;
}


SWIGINTERN int Swig_var_uidParametricMapStorage_1_2_840_10008_5_1_4_1_1_30_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidParametricMapStorage_1_2_840_10008_5_1_4_1_1_30 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidParametricMapStorage_1_2_840_10008_5_1_4_1_1_30_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidParametricMapStorage_1_2_840_10008_5_1_4_1_1_30);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRawDataStorage_1_2_840_10008_5_1_4_1_1_66_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRawDataStorage_1_2_840_10008_5_1_4_1_1_66 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRawDataStorage_1_2_840_10008_5_1_4_1_1_66_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRawDataStorage_1_2_840_10008_5_1_4_1_1_66);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSpatialFiducialsStorage_1_2_840_10008_5_1_4_1_1_66_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSpatialFiducialsStorage_1_2_840_10008_5_1_4_1_1_66_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSpatialFiducialsStorage_1_2_840_10008_5_1_4_1_1_66_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSpatialFiducialsStorage_1_2_840_10008_5_1_4_1_1_66_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDeformableSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDeformableSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDeformableSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDeformableSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSurfaceSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSurfaceSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSurfaceSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSurfaceSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidTractographyResultsStorage_1_2_840_10008_5_1_4_1_1_66_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidTractographyResultsStorage_1_2_840_10008_5_1_4_1_1_66_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidTractographyResultsStorage_1_2_840_10008_5_1_4_1_1_66_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidTractographyResultsStorage_1_2_840_10008_5_1_4_1_1_66_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRealWorldValueMappingStorage_1_2_840_10008_5_1_4_1_1_67_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRealWorldValueMappingStorage_1_2_840_10008_5_1_4_1_1_67 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRealWorldValueMappingStorage_1_2_840_10008_5_1_4_1_1_67_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRealWorldValueMappingStorage_1_2_840_10008_5_1_4_1_1_67);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSurfaceScanMeshStorage_1_2_840_10008_5_1_4_1_1_68_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSurfaceScanMeshStorage_1_2_840_10008_5_1_4_1_1_68_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSurfaceScanMeshStorage_1_2_840_10008_5_1_4_1_1_68_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSurfaceScanMeshStorage_1_2_840_10008_5_1_4_1_1_68_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSurfaceScanPointCloudStorage_1_2_840_10008_5_1_4_1_1_68_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSurfaceScanPointCloudStorage_1_2_840_10008_5_1_4_1_1_68_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSurfaceScanPointCloudStorage_1_2_840_10008_5_1_4_1_1_68_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSurfaceScanPointCloudStorage_1_2_840_10008_5_1_4_1_1_68_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVLImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVLImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVLImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVLImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVLMultiframeImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVLMultiframeImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVLMultiframeImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVLMultiframeImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVLEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVLEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVLEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVLEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVideoEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVideoEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVideoEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVideoEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVLMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVLMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVLMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVLMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVideoMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVideoMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVideoMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVideoMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVLSlideCoordinatesMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVLSlideCoordinatesMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVLSlideCoordinatesMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVLSlideCoordinatesMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVLPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVLPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVLPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVLPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVideoPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVideoPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVideoPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVideoPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidOphthalmicPhotography8BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidOphthalmicPhotography8BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidOphthalmicPhotography8BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidOphthalmicPhotography8BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidOphthalmicPhotography16BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidOphthalmicPhotography16BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidOphthalmicPhotography16BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidOphthalmicPhotography16BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStereometricRelationshipStorage_1_2_840_10008_5_1_4_1_1_77_1_5_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStereometricRelationshipStorage_1_2_840_10008_5_1_4_1_1_77_1_5_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStereometricRelationshipStorage_1_2_840_10008_5_1_4_1_1_77_1_5_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStereometricRelationshipStorage_1_2_840_10008_5_1_4_1_1_77_1_5_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidOphthalmicTomographyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidOphthalmicTomographyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidOphthalmicTomographyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidOphthalmicTomographyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidWideFieldOphthalmicPhotographyStereographicProjectionImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidWideFieldOphthalmicPhotographyStereographicProjectionImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidWideFieldOphthalmicPhotographyStereographicProjectionImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidWideFieldOphthalmicPhotographyStereographicProjectionImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidWideFieldOphthalmicPhotography3DCoordinatesImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidWideFieldOphthalmicPhotography3DCoordinatesImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidWideFieldOphthalmicPhotography3DCoordinatesImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidWideFieldOphthalmicPhotography3DCoordinatesImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidOphthalmicOpticalCoherenceTomographyEnFaceImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidOphthalmicOpticalCoherenceTomographyEnFaceImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidOphthalmicOpticalCoherenceTomographyEnFaceImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidOphthalmicOpticalCoherenceTomographyEnFaceImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uidOphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorage_1_2_840_10008_5_1_4_1_1_77_1_5_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidOphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorage_1_2_840_10008_5_1_4_1_1_77_1_5_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidOphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorage_1_2_840_10008_5_1_4_1_1_77_1_5_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidOphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorage_1_2_840_10008_5_1_4_1_1_77_1_5_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVLWholeSlideMicroscopyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVLWholeSlideMicroscopyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVLWholeSlideMicroscopyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVLWholeSlideMicroscopyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidLensometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidLensometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidLensometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidLensometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidAutorefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidAutorefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidAutorefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidAutorefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidKeratometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidKeratometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidKeratometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidKeratometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSubjectiveRefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSubjectiveRefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSubjectiveRefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSubjectiveRefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidVisualAcuityMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidVisualAcuityMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidVisualAcuityMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidVisualAcuityMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSpectaclePrescriptionReportStorage_1_2_840_10008_5_1_4_1_1_78_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSpectaclePrescriptionReportStorage_1_2_840_10008_5_1_4_1_1_78_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSpectaclePrescriptionReportStorage_1_2_840_10008_5_1_4_1_1_78_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSpectaclePrescriptionReportStorage_1_2_840_10008_5_1_4_1_1_78_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidOphthalmicAxialMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidOphthalmicAxialMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidOphthalmicAxialMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidOphthalmicAxialMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uidIntraocularLensCalculationsStorage_1_2_840_10008_5_1_4_1_1_78_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidIntraocularLensCalculationsStorage_1_2_840_10008_5_1_4_1_1_78_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidIntraocularLensCalculationsStorage_1_2_840_10008_5_1_4_1_1_78_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidIntraocularLensCalculationsStorage_1_2_840_10008_5_1_4_1_1_78_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMacularGridThicknessandVolumeReportStorage_1_2_840_10008_5_1_4_1_1_79_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMacularGridThicknessandVolumeReportStorage_1_2_840_10008_5_1_4_1_1_79_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMacularGridThicknessandVolumeReportStorage_1_2_840_10008_5_1_4_1_1_79_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMacularGridThicknessandVolumeReportStorage_1_2_840_10008_5_1_4_1_1_79_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidOphthalmicVisualFieldStaticPerimetryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_80_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidOphthalmicVisualFieldStaticPerimetryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_80_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidOphthalmicVisualFieldStaticPerimetryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_80_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidOphthalmicVisualFieldStaticPerimetryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_80_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidOphthalmicThicknessMapStorage_1_2_840_10008_5_1_4_1_1_81_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidOphthalmicThicknessMapStorage_1_2_840_10008_5_1_4_1_1_81_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidOphthalmicThicknessMapStorage_1_2_840_10008_5_1_4_1_1_81_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidOphthalmicThicknessMapStorage_1_2_840_10008_5_1_4_1_1_81_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidCornealTopographyMapStorage_1_2_840_10008_5_1_4_1_1_82_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidCornealTopographyMapStorage_1_2_840_10008_5_1_4_1_1_82_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidCornealTopographyMapStorage_1_2_840_10008_5_1_4_1_1_82_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidCornealTopographyMapStorage_1_2_840_10008_5_1_4_1_1_82_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidTextSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidTextSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidTextSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidTextSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidAudioSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidAudioSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidAudioSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidAudioSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDetailSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDetailSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDetailSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDetailSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidComprehensiveSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidComprehensiveSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidComprehensiveSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidComprehensiveSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicTextSRStorage_1_2_840_10008_5_1_4_1_1_88_11_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicTextSRStorage_1_2_840_10008_5_1_4_1_1_88_11 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicTextSRStorage_1_2_840_10008_5_1_4_1_1_88_11_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicTextSRStorage_1_2_840_10008_5_1_4_1_1_88_11);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEnhancedSRStorage_1_2_840_10008_5_1_4_1_1_88_22_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEnhancedSRStorage_1_2_840_10008_5_1_4_1_1_88_22 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEnhancedSRStorage_1_2_840_10008_5_1_4_1_1_88_22_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEnhancedSRStorage_1_2_840_10008_5_1_4_1_1_88_22);
  return pyobj;
}


SWIGINTERN int Swig_var_uidComprehensiveSRStorage_1_2_840_10008_5_1_4_1_1_88_33_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidComprehensiveSRStorage_1_2_840_10008_5_1_4_1_1_88_33 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidComprehensiveSRStorage_1_2_840_10008_5_1_4_1_1_88_33_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidComprehensiveSRStorage_1_2_840_10008_5_1_4_1_1_88_33);
  return pyobj;
}


SWIGINTERN int Swig_var_uidComprehensive3DSRStorage_1_2_840_10008_5_1_4_1_1_88_34_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidComprehensive3DSRStorage_1_2_840_10008_5_1_4_1_1_88_34 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidComprehensive3DSRStorage_1_2_840_10008_5_1_4_1_1_88_34_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidComprehensive3DSRStorage_1_2_840_10008_5_1_4_1_1_88_34);
  return pyobj;
}


SWIGINTERN int Swig_var_uidExtensibleSRStorage_1_2_840_10008_5_1_4_1_1_88_35_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidExtensibleSRStorage_1_2_840_10008_5_1_4_1_1_88_35 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidExtensibleSRStorage_1_2_840_10008_5_1_4_1_1_88_35_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidExtensibleSRStorage_1_2_840_10008_5_1_4_1_1_88_35);
  return pyobj;
}


SWIGINTERN int Swig_var_uidProcedureLogStorage_1_2_840_10008_5_1_4_1_1_88_40_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidProcedureLogStorage_1_2_840_10008_5_1_4_1_1_88_40 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidProcedureLogStorage_1_2_840_10008_5_1_4_1_1_88_40_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidProcedureLogStorage_1_2_840_10008_5_1_4_1_1_88_40);
  return pyobj;
}


SWIGINTERN int Swig_var_uidMammographyCADSRStorage_1_2_840_10008_5_1_4_1_1_88_50_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidMammographyCADSRStorage_1_2_840_10008_5_1_4_1_1_88_50 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidMammographyCADSRStorage_1_2_840_10008_5_1_4_1_1_88_50_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidMammographyCADSRStorage_1_2_840_10008_5_1_4_1_1_88_50);
  return pyobj;
}


SWIGINTERN int Swig_var_uidKeyObjectSelectionDocumentStorage_1_2_840_10008_5_1_4_1_1_88_59_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidKeyObjectSelectionDocumentStorage_1_2_840_10008_5_1_4_1_1_88_59 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidKeyObjectSelectionDocumentStorage_1_2_840_10008_5_1_4_1_1_88_59_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidKeyObjectSelectionDocumentStorage_1_2_840_10008_5_1_4_1_1_88_59);
  return pyobj;
}


SWIGINTERN int Swig_var_uidChestCADSRStorage_1_2_840_10008_5_1_4_1_1_88_65_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidChestCADSRStorage_1_2_840_10008_5_1_4_1_1_88_65 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidChestCADSRStorage_1_2_840_10008_5_1_4_1_1_88_65_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidChestCADSRStorage_1_2_840_10008_5_1_4_1_1_88_65);
  return pyobj;
}


SWIGINTERN int Swig_var_uidXRayRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_67_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidXRayRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_67 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidXRayRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_67_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidXRayRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_67);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRadiopharmaceuticalRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_68_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRadiopharmaceuticalRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_68 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRadiopharmaceuticalRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_68_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRadiopharmaceuticalRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_68);
  return pyobj;
}


SWIGINTERN int Swig_var_uidColonCADSRStorage_1_2_840_10008_5_1_4_1_1_88_69_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidColonCADSRStorage_1_2_840_10008_5_1_4_1_1_88_69 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidColonCADSRStorage_1_2_840_10008_5_1_4_1_1_88_69_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidColonCADSRStorage_1_2_840_10008_5_1_4_1_1_88_69);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImplantationPlanSRStorage_1_2_840_10008_5_1_4_1_1_88_70_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImplantationPlanSRStorage_1_2_840_10008_5_1_4_1_1_88_70 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImplantationPlanSRStorage_1_2_840_10008_5_1_4_1_1_88_70_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImplantationPlanSRStorage_1_2_840_10008_5_1_4_1_1_88_70);
  return pyobj;
}


SWIGINTERN int Swig_var_uidAcquisitionContextSRStorage_1_2_840_10008_5_1_4_1_1_88_71_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidAcquisitionContextSRStorage_1_2_840_10008_5_1_4_1_1_88_71 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidAcquisitionContextSRStorage_1_2_840_10008_5_1_4_1_1_88_71_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidAcquisitionContextSRStorage_1_2_840_10008_5_1_4_1_1_88_71);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSimplifiedAdultEchoSRStorage_1_2_840_10008_5_1_4_1_1_88_72_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSimplifiedAdultEchoSRStorage_1_2_840_10008_5_1_4_1_1_88_72 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSimplifiedAdultEchoSRStorage_1_2_840_10008_5_1_4_1_1_88_72_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSimplifiedAdultEchoSRStorage_1_2_840_10008_5_1_4_1_1_88_72);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPatientRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_73_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPatientRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_73 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPatientRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_73_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPatientRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_73);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPlannedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_74_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPlannedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_74 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPlannedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_74_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPlannedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_74);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPerformedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_75_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPerformedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_75 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPerformedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_75_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPerformedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_75);
  return pyobj;
}


SWIGINTERN int Swig_var_uidContentAssessmentResultsStorage_1_2_840_10008_5_1_4_1_1_90_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidContentAssessmentResultsStorage_1_2_840_10008_5_1_4_1_1_90_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidContentAssessmentResultsStorage_1_2_840_10008_5_1_4_1_1_90_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidContentAssessmentResultsStorage_1_2_840_10008_5_1_4_1_1_90_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEncapsulatedPDFStorage_1_2_840_10008_5_1_4_1_1_104_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEncapsulatedPDFStorage_1_2_840_10008_5_1_4_1_1_104_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEncapsulatedPDFStorage_1_2_840_10008_5_1_4_1_1_104_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEncapsulatedPDFStorage_1_2_840_10008_5_1_4_1_1_104_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEncapsulatedCDAStorage_1_2_840_10008_5_1_4_1_1_104_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEncapsulatedCDAStorage_1_2_840_10008_5_1_4_1_1_104_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEncapsulatedCDAStorage_1_2_840_10008_5_1_4_1_1_104_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEncapsulatedCDAStorage_1_2_840_10008_5_1_4_1_1_104_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEncapsulatedSTLStorage_1_2_840_10008_5_1_4_1_1_104_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEncapsulatedSTLStorage_1_2_840_10008_5_1_4_1_1_104_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEncapsulatedSTLStorage_1_2_840_10008_5_1_4_1_1_104_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEncapsulatedSTLStorage_1_2_840_10008_5_1_4_1_1_104_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPositronEmissionTomographyImageStorage_1_2_840_10008_5_1_4_1_1_128_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPositronEmissionTomographyImageStorage_1_2_840_10008_5_1_4_1_1_128 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPositronEmissionTomographyImageStorage_1_2_840_10008_5_1_4_1_1_128_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPositronEmissionTomographyImageStorage_1_2_840_10008_5_1_4_1_1_128);
  return pyobj;
}


SWIGINTERN int Swig_var_uidLegacyConvertedEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_128_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidLegacyConvertedEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_128_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidLegacyConvertedEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_128_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidLegacyConvertedEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_128_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStandalonePETCurveStorage_1_2_840_10008_5_1_4_1_1_129_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStandalonePETCurveStorage_1_2_840_10008_5_1_4_1_1_129 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStandalonePETCurveStorage_1_2_840_10008_5_1_4_1_1_129_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStandalonePETCurveStorage_1_2_840_10008_5_1_4_1_1_129);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_130_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_130 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_130_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_130);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBasicStructuredDisplayStorage_1_2_840_10008_5_1_4_1_1_131_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBasicStructuredDisplayStorage_1_2_840_10008_5_1_4_1_1_131 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBasicStructuredDisplayStorage_1_2_840_10008_5_1_4_1_1_131_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBasicStructuredDisplayStorage_1_2_840_10008_5_1_4_1_1_131);
  return pyobj;
}


SWIGINTERN int Swig_var_uidCTDefinedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidCTDefinedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidCTDefinedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidCTDefinedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidCTPerformedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidCTPerformedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidCTPerformedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidCTPerformedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidProtocolApprovalStorage_1_2_840_10008_5_1_4_1_1_200_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidProtocolApprovalStorage_1_2_840_10008_5_1_4_1_1_200_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidProtocolApprovalStorage_1_2_840_10008_5_1_4_1_1_200_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidProtocolApprovalStorage_1_2_840_10008_5_1_4_1_1_200_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidProtocolApprovalInformationModelFIND_1_2_840_10008_5_1_4_1_1_200_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidProtocolApprovalInformationModelFIND_1_2_840_10008_5_1_4_1_1_200_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidProtocolApprovalInformationModelFIND_1_2_840_10008_5_1_4_1_1_200_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidProtocolApprovalInformationModelFIND_1_2_840_10008_5_1_4_1_1_200_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidProtocolApprovalInformationModelMOVE_1_2_840_10008_5_1_4_1_1_200_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidProtocolApprovalInformationModelMOVE_1_2_840_10008_5_1_4_1_1_200_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidProtocolApprovalInformationModelMOVE_1_2_840_10008_5_1_4_1_1_200_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidProtocolApprovalInformationModelMOVE_1_2_840_10008_5_1_4_1_1_200_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidProtocolApprovalInformationModelGET_1_2_840_10008_5_1_4_1_1_200_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidProtocolApprovalInformationModelGET_1_2_840_10008_5_1_4_1_1_200_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidProtocolApprovalInformationModelGET_1_2_840_10008_5_1_4_1_1_200_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidProtocolApprovalInformationModelGET_1_2_840_10008_5_1_4_1_1_200_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTImageStorage_1_2_840_10008_5_1_4_1_1_481_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTImageStorage_1_2_840_10008_5_1_4_1_1_481_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTImageStorage_1_2_840_10008_5_1_4_1_1_481_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTImageStorage_1_2_840_10008_5_1_4_1_1_481_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTDoseStorage_1_2_840_10008_5_1_4_1_1_481_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTDoseStorage_1_2_840_10008_5_1_4_1_1_481_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTDoseStorage_1_2_840_10008_5_1_4_1_1_481_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTDoseStorage_1_2_840_10008_5_1_4_1_1_481_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTStructureSetStorage_1_2_840_10008_5_1_4_1_1_481_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTStructureSetStorage_1_2_840_10008_5_1_4_1_1_481_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTStructureSetStorage_1_2_840_10008_5_1_4_1_1_481_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTStructureSetStorage_1_2_840_10008_5_1_4_1_1_481_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTPlanStorage_1_2_840_10008_5_1_4_1_1_481_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTPlanStorage_1_2_840_10008_5_1_4_1_1_481_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTPlanStorage_1_2_840_10008_5_1_4_1_1_481_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTPlanStorage_1_2_840_10008_5_1_4_1_1_481_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTBrachyTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTBrachyTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTBrachyTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTBrachyTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTTreatmentSummaryRecordStorage_1_2_840_10008_5_1_4_1_1_481_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTTreatmentSummaryRecordStorage_1_2_840_10008_5_1_4_1_1_481_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTTreatmentSummaryRecordStorage_1_2_840_10008_5_1_4_1_1_481_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTTreatmentSummaryRecordStorage_1_2_840_10008_5_1_4_1_1_481_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTIonPlanStorage_1_2_840_10008_5_1_4_1_1_481_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTIonPlanStorage_1_2_840_10008_5_1_4_1_1_481_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTIonPlanStorage_1_2_840_10008_5_1_4_1_1_481_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTIonPlanStorage_1_2_840_10008_5_1_4_1_1_481_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTIonBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_9_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTIonBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_9 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTIonBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_9_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTIonBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_9);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTPhysicianIntentStorage_1_2_840_10008_5_1_4_1_1_481_10_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTPhysicianIntentStorage_1_2_840_10008_5_1_4_1_1_481_10 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTPhysicianIntentStorage_1_2_840_10008_5_1_4_1_1_481_10_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTPhysicianIntentStorage_1_2_840_10008_5_1_4_1_1_481_10);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTSegmentAnnotationStorage_1_2_840_10008_5_1_4_1_1_481_11_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTSegmentAnnotationStorage_1_2_840_10008_5_1_4_1_1_481_11 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTSegmentAnnotationStorage_1_2_840_10008_5_1_4_1_1_481_11_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTSegmentAnnotationStorage_1_2_840_10008_5_1_4_1_1_481_11);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOSCTImageStorage_1_2_840_10008_5_1_4_1_1_501_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOSCTImageStorage_1_2_840_10008_5_1_4_1_1_501_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOSCTImageStorage_1_2_840_10008_5_1_4_1_1_501_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOSCTImageStorage_1_2_840_10008_5_1_4_1_1_501_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOSDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_501_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOSDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_501_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOSDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_501_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOSDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_501_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOSDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_501_2_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOSDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_501_2_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOSDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_501_2_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOSDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_501_2_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOSThreatDetectionReportStorage_1_2_840_10008_5_1_4_1_1_501_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOSThreatDetectionReportStorage_1_2_840_10008_5_1_4_1_1_501_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOSThreatDetectionReportStorage_1_2_840_10008_5_1_4_1_1_501_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOSThreatDetectionReportStorage_1_2_840_10008_5_1_4_1_1_501_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOS2DAITStorage_1_2_840_10008_5_1_4_1_1_501_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOS2DAITStorage_1_2_840_10008_5_1_4_1_1_501_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOS2DAITStorage_1_2_840_10008_5_1_4_1_1_501_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOS2DAITStorage_1_2_840_10008_5_1_4_1_1_501_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOS3DAITStorage_1_2_840_10008_5_1_4_1_1_501_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOS3DAITStorage_1_2_840_10008_5_1_4_1_1_501_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOS3DAITStorage_1_2_840_10008_5_1_4_1_1_501_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOS3DAITStorage_1_2_840_10008_5_1_4_1_1_501_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOSQuadrupoleResonanceQRStorage_1_2_840_10008_5_1_4_1_1_501_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOSQuadrupoleResonanceQRStorage_1_2_840_10008_5_1_4_1_1_501_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOSQuadrupoleResonanceQRStorage_1_2_840_10008_5_1_4_1_1_501_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOSQuadrupoleResonanceQRStorage_1_2_840_10008_5_1_4_1_1_501_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEddyCurrentImageStorage_1_2_840_10008_5_1_4_1_1_601_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEddyCurrentImageStorage_1_2_840_10008_5_1_4_1_1_601_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEddyCurrentImageStorage_1_2_840_10008_5_1_4_1_1_601_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEddyCurrentImageStorage_1_2_840_10008_5_1_4_1_1_601_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidEddyCurrentMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_601_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidEddyCurrentMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_601_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidEddyCurrentMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_601_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidEddyCurrentMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_601_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPatientRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPatientRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPatientRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPatientRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPatientRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_1_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPatientRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_1_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPatientRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_1_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPatientRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_1_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPatientRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_1_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPatientRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_1_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPatientRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_1_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPatientRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_1_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStudyRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_2_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStudyRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_2_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStudyRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_2_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStudyRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_2_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStudyRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_2_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStudyRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_2_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStudyRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_2_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStudyRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_2_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidStudyRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_2_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidStudyRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_2_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidStudyRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_2_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidStudyRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_2_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_3_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPatientStudyOnlyQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_3_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_3_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPatientStudyOnlyQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_3_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_3_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPatientStudyOnlyQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_3_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_3_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPatientStudyOnlyQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_3_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_3_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidPatientStudyOnlyQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_3_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_3_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidPatientStudyOnlyQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_3_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidCompositeInstanceRootRetrieveMOVE_1_2_840_10008_5_1_4_1_2_4_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidCompositeInstanceRootRetrieveMOVE_1_2_840_10008_5_1_4_1_2_4_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidCompositeInstanceRootRetrieveMOVE_1_2_840_10008_5_1_4_1_2_4_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidCompositeInstanceRootRetrieveMOVE_1_2_840_10008_5_1_4_1_2_4_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidCompositeInstanceRootRetrieveGET_1_2_840_10008_5_1_4_1_2_4_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidCompositeInstanceRootRetrieveGET_1_2_840_10008_5_1_4_1_2_4_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidCompositeInstanceRootRetrieveGET_1_2_840_10008_5_1_4_1_2_4_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidCompositeInstanceRootRetrieveGET_1_2_840_10008_5_1_4_1_2_4_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidCompositeInstanceRetrieveWithoutBulkDataGET_1_2_840_10008_5_1_4_1_2_5_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidCompositeInstanceRetrieveWithoutBulkDataGET_1_2_840_10008_5_1_4_1_2_5_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidCompositeInstanceRetrieveWithoutBulkDataGET_1_2_840_10008_5_1_4_1_2_5_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidCompositeInstanceRetrieveWithoutBulkDataGET_1_2_840_10008_5_1_4_1_2_5_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDefinedProcedureProtocolInformationModelFIND_1_2_840_10008_5_1_4_20_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDefinedProcedureProtocolInformationModelFIND_1_2_840_10008_5_1_4_20_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDefinedProcedureProtocolInformationModelFIND_1_2_840_10008_5_1_4_20_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDefinedProcedureProtocolInformationModelFIND_1_2_840_10008_5_1_4_20_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDefinedProcedureProtocolInformationModelMOVE_1_2_840_10008_5_1_4_20_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDefinedProcedureProtocolInformationModelMOVE_1_2_840_10008_5_1_4_20_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDefinedProcedureProtocolInformationModelMOVE_1_2_840_10008_5_1_4_20_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDefinedProcedureProtocolInformationModelMOVE_1_2_840_10008_5_1_4_20_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDefinedProcedureProtocolInformationModelGET_1_2_840_10008_5_1_4_20_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDefinedProcedureProtocolInformationModelGET_1_2_840_10008_5_1_4_20_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDefinedProcedureProtocolInformationModelGET_1_2_840_10008_5_1_4_20_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDefinedProcedureProtocolInformationModelGET_1_2_840_10008_5_1_4_20_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidModalityWorklistInformationModelFIND_1_2_840_10008_5_1_4_31_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidModalityWorklistInformationModelFIND_1_2_840_10008_5_1_4_31 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidModalityWorklistInformationModelFIND_1_2_840_10008_5_1_4_31_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidModalityWorklistInformationModelFIND_1_2_840_10008_5_1_4_31);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGeneralPurposeWorklistManagementMetaSOPClass_1_2_840_10008_5_1_4_32_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGeneralPurposeWorklistManagementMetaSOPClass_1_2_840_10008_5_1_4_32 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGeneralPurposeWorklistManagementMetaSOPClass_1_2_840_10008_5_1_4_32_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGeneralPurposeWorklistManagementMetaSOPClass_1_2_840_10008_5_1_4_32);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGeneralPurposeWorklistInformationModelFIND_1_2_840_10008_5_1_4_32_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGeneralPurposeWorklistInformationModelFIND_1_2_840_10008_5_1_4_32_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGeneralPurposeWorklistInformationModelFIND_1_2_840_10008_5_1_4_32_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGeneralPurposeWorklistInformationModelFIND_1_2_840_10008_5_1_4_32_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGeneralPurposeScheduledProcedureStepSOPClass_1_2_840_10008_5_1_4_32_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGeneralPurposeScheduledProcedureStepSOPClass_1_2_840_10008_5_1_4_32_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGeneralPurposeScheduledProcedureStepSOPClass_1_2_840_10008_5_1_4_32_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGeneralPurposeScheduledProcedureStepSOPClass_1_2_840_10008_5_1_4_32_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGeneralPurposePerformedProcedureStepSOPClass_1_2_840_10008_5_1_4_32_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGeneralPurposePerformedProcedureStepSOPClass_1_2_840_10008_5_1_4_32_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGeneralPurposePerformedProcedureStepSOPClass_1_2_840_10008_5_1_4_32_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGeneralPurposePerformedProcedureStepSOPClass_1_2_840_10008_5_1_4_32_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidInstanceAvailabilityNotificationSOPClass_1_2_840_10008_5_1_4_33_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidInstanceAvailabilityNotificationSOPClass_1_2_840_10008_5_1_4_33 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidInstanceAvailabilityNotificationSOPClass_1_2_840_10008_5_1_4_33_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidInstanceAvailabilityNotificationSOPClass_1_2_840_10008_5_1_4_33);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTBeamsDeliveryInstructionStorageTrial_1_2_840_10008_5_1_4_34_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTBeamsDeliveryInstructionStorageTrial_1_2_840_10008_5_1_4_34_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTBeamsDeliveryInstructionStorageTrial_1_2_840_10008_5_1_4_34_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTBeamsDeliveryInstructionStorageTrial_1_2_840_10008_5_1_4_34_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTConventionalMachineVerificationTrial_1_2_840_10008_5_1_4_34_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTConventionalMachineVerificationTrial_1_2_840_10008_5_1_4_34_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTConventionalMachineVerificationTrial_1_2_840_10008_5_1_4_34_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTConventionalMachineVerificationTrial_1_2_840_10008_5_1_4_34_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTIonMachineVerificationTrial_1_2_840_10008_5_1_4_34_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTIonMachineVerificationTrial_1_2_840_10008_5_1_4_34_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTIonMachineVerificationTrial_1_2_840_10008_5_1_4_34_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTIonMachineVerificationTrial_1_2_840_10008_5_1_4_34_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUnifiedWorklistandProcedureStepServiceClassTrial_1_2_840_10008_5_1_4_34_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUnifiedWorklistandProcedureStepServiceClassTrial_1_2_840_10008_5_1_4_34_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUnifiedWorklistandProcedureStepServiceClassTrial_1_2_840_10008_5_1_4_34_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUnifiedWorklistandProcedureStepServiceClassTrial_1_2_840_10008_5_1_4_34_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUnifiedProcedureStepPushSOPClassTrial_1_2_840_10008_5_1_4_34_4_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUnifiedProcedureStepPushSOPClassTrial_1_2_840_10008_5_1_4_34_4_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUnifiedProcedureStepPushSOPClassTrial_1_2_840_10008_5_1_4_34_4_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUnifiedProcedureStepPushSOPClassTrial_1_2_840_10008_5_1_4_34_4_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUnifiedProcedureStepWatchSOPClassTrial_1_2_840_10008_5_1_4_34_4_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUnifiedProcedureStepWatchSOPClassTrial_1_2_840_10008_5_1_4_34_4_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUnifiedProcedureStepWatchSOPClassTrial_1_2_840_10008_5_1_4_34_4_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUnifiedProcedureStepWatchSOPClassTrial_1_2_840_10008_5_1_4_34_4_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUnifiedProcedureStepPullSOPClassTrial_1_2_840_10008_5_1_4_34_4_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUnifiedProcedureStepPullSOPClassTrial_1_2_840_10008_5_1_4_34_4_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUnifiedProcedureStepPullSOPClassTrial_1_2_840_10008_5_1_4_34_4_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUnifiedProcedureStepPullSOPClassTrial_1_2_840_10008_5_1_4_34_4_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUnifiedProcedureStepEventSOPClassTrial_1_2_840_10008_5_1_4_34_4_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUnifiedProcedureStepEventSOPClassTrial_1_2_840_10008_5_1_4_34_4_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUnifiedProcedureStepEventSOPClassTrial_1_2_840_10008_5_1_4_34_4_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUnifiedProcedureStepEventSOPClassTrial_1_2_840_10008_5_1_4_34_4_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUPSGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUPSGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUPSGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUPSGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUPSFilteredGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUPSFilteredGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUPSFilteredGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUPSFilteredGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUnifiedWorklistandProcedureStepServiceClass_1_2_840_10008_5_1_4_34_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUnifiedWorklistandProcedureStepServiceClass_1_2_840_10008_5_1_4_34_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUnifiedWorklistandProcedureStepServiceClass_1_2_840_10008_5_1_4_34_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUnifiedWorklistandProcedureStepServiceClass_1_2_840_10008_5_1_4_34_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUnifiedProcedureStepPushSOPClass_1_2_840_10008_5_1_4_34_6_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUnifiedProcedureStepPushSOPClass_1_2_840_10008_5_1_4_34_6_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUnifiedProcedureStepPushSOPClass_1_2_840_10008_5_1_4_34_6_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUnifiedProcedureStepPushSOPClass_1_2_840_10008_5_1_4_34_6_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUnifiedProcedureStepWatchSOPClass_1_2_840_10008_5_1_4_34_6_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUnifiedProcedureStepWatchSOPClass_1_2_840_10008_5_1_4_34_6_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUnifiedProcedureStepWatchSOPClass_1_2_840_10008_5_1_4_34_6_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUnifiedProcedureStepWatchSOPClass_1_2_840_10008_5_1_4_34_6_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUnifiedProcedureStepPullSOPClass_1_2_840_10008_5_1_4_34_6_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUnifiedProcedureStepPullSOPClass_1_2_840_10008_5_1_4_34_6_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUnifiedProcedureStepPullSOPClass_1_2_840_10008_5_1_4_34_6_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUnifiedProcedureStepPullSOPClass_1_2_840_10008_5_1_4_34_6_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUnifiedProcedureStepEventSOPClass_1_2_840_10008_5_1_4_34_6_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUnifiedProcedureStepEventSOPClass_1_2_840_10008_5_1_4_34_6_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUnifiedProcedureStepEventSOPClass_1_2_840_10008_5_1_4_34_6_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUnifiedProcedureStepEventSOPClass_1_2_840_10008_5_1_4_34_6_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTBeamsDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTBeamsDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTBeamsDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTBeamsDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTConventionalMachineVerification_1_2_840_10008_5_1_4_34_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTConventionalMachineVerification_1_2_840_10008_5_1_4_34_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTConventionalMachineVerification_1_2_840_10008_5_1_4_34_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTConventionalMachineVerification_1_2_840_10008_5_1_4_34_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTIonMachineVerification_1_2_840_10008_5_1_4_34_9_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTIonMachineVerification_1_2_840_10008_5_1_4_34_9 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTIonMachineVerification_1_2_840_10008_5_1_4_34_9_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTIonMachineVerification_1_2_840_10008_5_1_4_34_9);
  return pyobj;
}


SWIGINTERN int Swig_var_uidRTBrachyApplicationSetupDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_10_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidRTBrachyApplicationSetupDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_10 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidRTBrachyApplicationSetupDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_10_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidRTBrachyApplicationSetupDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_10);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGeneralRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGeneralRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGeneralRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGeneralRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidBreastImagingRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidBreastImagingRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidBreastImagingRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidBreastImagingRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidCardiacRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidCardiacRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidCardiacRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidCardiacRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHangingProtocolStorage_1_2_840_10008_5_1_4_38_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHangingProtocolStorage_1_2_840_10008_5_1_4_38_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHangingProtocolStorage_1_2_840_10008_5_1_4_38_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHangingProtocolStorage_1_2_840_10008_5_1_4_38_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHangingProtocolInformationModelFIND_1_2_840_10008_5_1_4_38_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHangingProtocolInformationModelFIND_1_2_840_10008_5_1_4_38_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHangingProtocolInformationModelFIND_1_2_840_10008_5_1_4_38_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHangingProtocolInformationModelFIND_1_2_840_10008_5_1_4_38_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHangingProtocolInformationModelMOVE_1_2_840_10008_5_1_4_38_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHangingProtocolInformationModelMOVE_1_2_840_10008_5_1_4_38_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHangingProtocolInformationModelMOVE_1_2_840_10008_5_1_4_38_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHangingProtocolInformationModelMOVE_1_2_840_10008_5_1_4_38_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidHangingProtocolInformationModelGET_1_2_840_10008_5_1_4_38_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidHangingProtocolInformationModelGET_1_2_840_10008_5_1_4_38_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidHangingProtocolInformationModelGET_1_2_840_10008_5_1_4_38_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidHangingProtocolInformationModelGET_1_2_840_10008_5_1_4_38_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidColorPaletteStorage_1_2_840_10008_5_1_4_39_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidColorPaletteStorage_1_2_840_10008_5_1_4_39_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidColorPaletteStorage_1_2_840_10008_5_1_4_39_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidColorPaletteStorage_1_2_840_10008_5_1_4_39_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidColorPaletteQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_39_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidColorPaletteQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_39_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidColorPaletteQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_39_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidColorPaletteQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_39_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidColorPaletteQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_39_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidColorPaletteQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_39_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidColorPaletteQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_39_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidColorPaletteQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_39_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidColorPaletteQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_39_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidColorPaletteQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_39_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidColorPaletteQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_39_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidColorPaletteQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_39_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidProductCharacteristicsQuerySOPClass_1_2_840_10008_5_1_4_41_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidProductCharacteristicsQuerySOPClass_1_2_840_10008_5_1_4_41 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidProductCharacteristicsQuerySOPClass_1_2_840_10008_5_1_4_41_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidProductCharacteristicsQuerySOPClass_1_2_840_10008_5_1_4_41);
  return pyobj;
}


SWIGINTERN int Swig_var_uidSubstanceApprovalQuerySOPClass_1_2_840_10008_5_1_4_42_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidSubstanceApprovalQuerySOPClass_1_2_840_10008_5_1_4_42 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidSubstanceApprovalQuerySOPClass_1_2_840_10008_5_1_4_42_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidSubstanceApprovalQuerySOPClass_1_2_840_10008_5_1_4_42);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGenericImplantTemplateStorage_1_2_840_10008_5_1_4_43_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGenericImplantTemplateStorage_1_2_840_10008_5_1_4_43_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGenericImplantTemplateStorage_1_2_840_10008_5_1_4_43_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGenericImplantTemplateStorage_1_2_840_10008_5_1_4_43_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGenericImplantTemplateInformationModelFIND_1_2_840_10008_5_1_4_43_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGenericImplantTemplateInformationModelFIND_1_2_840_10008_5_1_4_43_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGenericImplantTemplateInformationModelFIND_1_2_840_10008_5_1_4_43_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGenericImplantTemplateInformationModelFIND_1_2_840_10008_5_1_4_43_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGenericImplantTemplateInformationModelMOVE_1_2_840_10008_5_1_4_43_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGenericImplantTemplateInformationModelMOVE_1_2_840_10008_5_1_4_43_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGenericImplantTemplateInformationModelMOVE_1_2_840_10008_5_1_4_43_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGenericImplantTemplateInformationModelMOVE_1_2_840_10008_5_1_4_43_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidGenericImplantTemplateInformationModelGET_1_2_840_10008_5_1_4_43_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidGenericImplantTemplateInformationModelGET_1_2_840_10008_5_1_4_43_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidGenericImplantTemplateInformationModelGET_1_2_840_10008_5_1_4_43_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidGenericImplantTemplateInformationModelGET_1_2_840_10008_5_1_4_43_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImplantAssemblyTemplateStorage_1_2_840_10008_5_1_4_44_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImplantAssemblyTemplateStorage_1_2_840_10008_5_1_4_44_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImplantAssemblyTemplateStorage_1_2_840_10008_5_1_4_44_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImplantAssemblyTemplateStorage_1_2_840_10008_5_1_4_44_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImplantAssemblyTemplateInformationModelFIND_1_2_840_10008_5_1_4_44_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImplantAssemblyTemplateInformationModelFIND_1_2_840_10008_5_1_4_44_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImplantAssemblyTemplateInformationModelFIND_1_2_840_10008_5_1_4_44_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImplantAssemblyTemplateInformationModelFIND_1_2_840_10008_5_1_4_44_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImplantAssemblyTemplateInformationModelMOVE_1_2_840_10008_5_1_4_44_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImplantAssemblyTemplateInformationModelMOVE_1_2_840_10008_5_1_4_44_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImplantAssemblyTemplateInformationModelMOVE_1_2_840_10008_5_1_4_44_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImplantAssemblyTemplateInformationModelMOVE_1_2_840_10008_5_1_4_44_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImplantAssemblyTemplateInformationModelGET_1_2_840_10008_5_1_4_44_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImplantAssemblyTemplateInformationModelGET_1_2_840_10008_5_1_4_44_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImplantAssemblyTemplateInformationModelGET_1_2_840_10008_5_1_4_44_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImplantAssemblyTemplateInformationModelGET_1_2_840_10008_5_1_4_44_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImplantTemplateGroupStorage_1_2_840_10008_5_1_4_45_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImplantTemplateGroupStorage_1_2_840_10008_5_1_4_45_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImplantTemplateGroupStorage_1_2_840_10008_5_1_4_45_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImplantTemplateGroupStorage_1_2_840_10008_5_1_4_45_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImplantTemplateGroupInformationModelFIND_1_2_840_10008_5_1_4_45_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImplantTemplateGroupInformationModelFIND_1_2_840_10008_5_1_4_45_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImplantTemplateGroupInformationModelFIND_1_2_840_10008_5_1_4_45_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImplantTemplateGroupInformationModelFIND_1_2_840_10008_5_1_4_45_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImplantTemplateGroupInformationModelMOVE_1_2_840_10008_5_1_4_45_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImplantTemplateGroupInformationModelMOVE_1_2_840_10008_5_1_4_45_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImplantTemplateGroupInformationModelMOVE_1_2_840_10008_5_1_4_45_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImplantTemplateGroupInformationModelMOVE_1_2_840_10008_5_1_4_45_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uidImplantTemplateGroupInformationModelGET_1_2_840_10008_5_1_4_45_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidImplantTemplateGroupInformationModelGET_1_2_840_10008_5_1_4_45_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidImplantTemplateGroupInformationModelGET_1_2_840_10008_5_1_4_45_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidImplantTemplateGroupInformationModelGET_1_2_840_10008_5_1_4_45_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uidNativeDICOMModel_1_2_840_10008_7_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidNativeDICOMModel_1_2_840_10008_7_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidNativeDICOMModel_1_2_840_10008_7_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidNativeDICOMModel_1_2_840_10008_7_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uidAbstractMultiDimensionalImageModel_1_2_840_10008_7_1_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidAbstractMultiDimensionalImageModel_1_2_840_10008_7_1_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidAbstractMultiDimensionalImageModel_1_2_840_10008_7_1_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidAbstractMultiDimensionalImageModel_1_2_840_10008_7_1_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uidDICOMContentMappingResource_1_2_840_10008_8_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidDICOMContentMappingResource_1_2_840_10008_8_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidDICOMContentMappingResource_1_2_840_10008_8_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidDICOMContentMappingResource_1_2_840_10008_8_1_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomDeviceName_1_2_840_10008_15_0_3_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomDeviceName_1_2_840_10008_15_0_3_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomDeviceName_1_2_840_10008_15_0_3_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomDeviceName_1_2_840_10008_15_0_3_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomDescription_1_2_840_10008_15_0_3_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomDescription_1_2_840_10008_15_0_3_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomDescription_1_2_840_10008_15_0_3_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomDescription_1_2_840_10008_15_0_3_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomManufacturer_1_2_840_10008_15_0_3_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomManufacturer_1_2_840_10008_15_0_3_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomManufacturer_1_2_840_10008_15_0_3_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomManufacturer_1_2_840_10008_15_0_3_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomManufacturerModelName_1_2_840_10008_15_0_3_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomManufacturerModelName_1_2_840_10008_15_0_3_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomManufacturerModelName_1_2_840_10008_15_0_3_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomManufacturerModelName_1_2_840_10008_15_0_3_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomSoftwareVersion_1_2_840_10008_15_0_3_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomSoftwareVersion_1_2_840_10008_15_0_3_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomSoftwareVersion_1_2_840_10008_15_0_3_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomSoftwareVersion_1_2_840_10008_15_0_3_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomVendorData_1_2_840_10008_15_0_3_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomVendorData_1_2_840_10008_15_0_3_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomVendorData_1_2_840_10008_15_0_3_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomVendorData_1_2_840_10008_15_0_3_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomAETitle_1_2_840_10008_15_0_3_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomAETitle_1_2_840_10008_15_0_3_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomAETitle_1_2_840_10008_15_0_3_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomAETitle_1_2_840_10008_15_0_3_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomNetworkConnectionReference_1_2_840_10008_15_0_3_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomNetworkConnectionReference_1_2_840_10008_15_0_3_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomNetworkConnectionReference_1_2_840_10008_15_0_3_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomNetworkConnectionReference_1_2_840_10008_15_0_3_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomApplicationCluster_1_2_840_10008_15_0_3_9_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomApplicationCluster_1_2_840_10008_15_0_3_9 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomApplicationCluster_1_2_840_10008_15_0_3_9_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomApplicationCluster_1_2_840_10008_15_0_3_9);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomAssociationInitiator_1_2_840_10008_15_0_3_10_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomAssociationInitiator_1_2_840_10008_15_0_3_10 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomAssociationInitiator_1_2_840_10008_15_0_3_10_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomAssociationInitiator_1_2_840_10008_15_0_3_10);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomAssociationAcceptor_1_2_840_10008_15_0_3_11_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomAssociationAcceptor_1_2_840_10008_15_0_3_11 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomAssociationAcceptor_1_2_840_10008_15_0_3_11_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomAssociationAcceptor_1_2_840_10008_15_0_3_11);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomHostname_1_2_840_10008_15_0_3_12_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomHostname_1_2_840_10008_15_0_3_12 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomHostname_1_2_840_10008_15_0_3_12_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomHostname_1_2_840_10008_15_0_3_12);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomPort_1_2_840_10008_15_0_3_13_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomPort_1_2_840_10008_15_0_3_13 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomPort_1_2_840_10008_15_0_3_13_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomPort_1_2_840_10008_15_0_3_13);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomSOPClass_1_2_840_10008_15_0_3_14_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomSOPClass_1_2_840_10008_15_0_3_14 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomSOPClass_1_2_840_10008_15_0_3_14_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomSOPClass_1_2_840_10008_15_0_3_14);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomTransferRole_1_2_840_10008_15_0_3_15_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomTransferRole_1_2_840_10008_15_0_3_15 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomTransferRole_1_2_840_10008_15_0_3_15_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomTransferRole_1_2_840_10008_15_0_3_15);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomTransferSyntax_1_2_840_10008_15_0_3_16_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomTransferSyntax_1_2_840_10008_15_0_3_16 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomTransferSyntax_1_2_840_10008_15_0_3_16_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomTransferSyntax_1_2_840_10008_15_0_3_16);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomPrimaryDeviceType_1_2_840_10008_15_0_3_17_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomPrimaryDeviceType_1_2_840_10008_15_0_3_17 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomPrimaryDeviceType_1_2_840_10008_15_0_3_17_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomPrimaryDeviceType_1_2_840_10008_15_0_3_17);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomRelatedDeviceReference_1_2_840_10008_15_0_3_18_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomRelatedDeviceReference_1_2_840_10008_15_0_3_18 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomRelatedDeviceReference_1_2_840_10008_15_0_3_18_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomRelatedDeviceReference_1_2_840_10008_15_0_3_18);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomPreferredCalledAETitle_1_2_840_10008_15_0_3_19_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomPreferredCalledAETitle_1_2_840_10008_15_0_3_19 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomPreferredCalledAETitle_1_2_840_10008_15_0_3_19_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomPreferredCalledAETitle_1_2_840_10008_15_0_3_19);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomTLSCyphersuite_1_2_840_10008_15_0_3_20_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomTLSCyphersuite_1_2_840_10008_15_0_3_20 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomTLSCyphersuite_1_2_840_10008_15_0_3_20_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomTLSCyphersuite_1_2_840_10008_15_0_3_20);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomAuthorizedNodeCertificateReference_1_2_840_10008_15_0_3_21_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomAuthorizedNodeCertificateReference_1_2_840_10008_15_0_3_21 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomAuthorizedNodeCertificateReference_1_2_840_10008_15_0_3_21_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomAuthorizedNodeCertificateReference_1_2_840_10008_15_0_3_21);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomThisNodeCertificateReference_1_2_840_10008_15_0_3_22_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomThisNodeCertificateReference_1_2_840_10008_15_0_3_22 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomThisNodeCertificateReference_1_2_840_10008_15_0_3_22_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomThisNodeCertificateReference_1_2_840_10008_15_0_3_22);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomInstalled_1_2_840_10008_15_0_3_23_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomInstalled_1_2_840_10008_15_0_3_23 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomInstalled_1_2_840_10008_15_0_3_23_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomInstalled_1_2_840_10008_15_0_3_23);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomStationName_1_2_840_10008_15_0_3_24_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomStationName_1_2_840_10008_15_0_3_24 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomStationName_1_2_840_10008_15_0_3_24_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomStationName_1_2_840_10008_15_0_3_24);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomDeviceSerialNumber_1_2_840_10008_15_0_3_25_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomDeviceSerialNumber_1_2_840_10008_15_0_3_25 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomDeviceSerialNumber_1_2_840_10008_15_0_3_25_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomDeviceSerialNumber_1_2_840_10008_15_0_3_25);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomInstitutionName_1_2_840_10008_15_0_3_26_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomInstitutionName_1_2_840_10008_15_0_3_26 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomInstitutionName_1_2_840_10008_15_0_3_26_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomInstitutionName_1_2_840_10008_15_0_3_26);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomInstitutionAddress_1_2_840_10008_15_0_3_27_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomInstitutionAddress_1_2_840_10008_15_0_3_27 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomInstitutionAddress_1_2_840_10008_15_0_3_27_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomInstitutionAddress_1_2_840_10008_15_0_3_27);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomInstitutionDepartmentName_1_2_840_10008_15_0_3_28_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomInstitutionDepartmentName_1_2_840_10008_15_0_3_28 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomInstitutionDepartmentName_1_2_840_10008_15_0_3_28_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomInstitutionDepartmentName_1_2_840_10008_15_0_3_28);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomIssuerOfPatientID_1_2_840_10008_15_0_3_29_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomIssuerOfPatientID_1_2_840_10008_15_0_3_29 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomIssuerOfPatientID_1_2_840_10008_15_0_3_29_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomIssuerOfPatientID_1_2_840_10008_15_0_3_29);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomPreferredCallingAETitle_1_2_840_10008_15_0_3_30_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomPreferredCallingAETitle_1_2_840_10008_15_0_3_30 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomPreferredCallingAETitle_1_2_840_10008_15_0_3_30_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomPreferredCallingAETitle_1_2_840_10008_15_0_3_30);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomSupportedCharacterSet_1_2_840_10008_15_0_3_31_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomSupportedCharacterSet_1_2_840_10008_15_0_3_31 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomSupportedCharacterSet_1_2_840_10008_15_0_3_31_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomSupportedCharacterSet_1_2_840_10008_15_0_3_31);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomConfigurationRoot_1_2_840_10008_15_0_4_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomConfigurationRoot_1_2_840_10008_15_0_4_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomConfigurationRoot_1_2_840_10008_15_0_4_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomConfigurationRoot_1_2_840_10008_15_0_4_1);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomDevicesRoot_1_2_840_10008_15_0_4_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomDevicesRoot_1_2_840_10008_15_0_4_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomDevicesRoot_1_2_840_10008_15_0_4_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomDevicesRoot_1_2_840_10008_15_0_4_2);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomUniqueAETitlesRegistryRoot_1_2_840_10008_15_0_4_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomUniqueAETitlesRegistryRoot_1_2_840_10008_15_0_4_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomUniqueAETitlesRegistryRoot_1_2_840_10008_15_0_4_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomUniqueAETitlesRegistryRoot_1_2_840_10008_15_0_4_3);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomDevice_1_2_840_10008_15_0_4_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomDevice_1_2_840_10008_15_0_4_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomDevice_1_2_840_10008_15_0_4_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomDevice_1_2_840_10008_15_0_4_4);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomNetworkAE_1_2_840_10008_15_0_4_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomNetworkAE_1_2_840_10008_15_0_4_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomNetworkAE_1_2_840_10008_15_0_4_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomNetworkAE_1_2_840_10008_15_0_4_5);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomNetworkConnection_1_2_840_10008_15_0_4_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomNetworkConnection_1_2_840_10008_15_0_4_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomNetworkConnection_1_2_840_10008_15_0_4_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomNetworkConnection_1_2_840_10008_15_0_4_6);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomUniqueAETitle_1_2_840_10008_15_0_4_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomUniqueAETitle_1_2_840_10008_15_0_4_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomUniqueAETitle_1_2_840_10008_15_0_4_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomUniqueAETitle_1_2_840_10008_15_0_4_7);
  return pyobj;
}


SWIGINTERN int Swig_var_uiddicomTransferCapability_1_2_840_10008_15_0_4_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uiddicomTransferCapability_1_2_840_10008_15_0_4_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uiddicomTransferCapability_1_2_840_10008_15_0_4_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uiddicomTransferCapability_1_2_840_10008_15_0_4_8);
  return pyobj;
}


SWIGINTERN int Swig_var_uidUniversalCoordinatedTime_1_2_840_10008_15_1_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable uidUniversalCoordinatedTime_1_2_840_10008_15_1_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_uidUniversalCoordinatedTime_1_2_840_10008_15_1_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(imebra::uidUniversalCoordinatedTime_1_2_840_10008_15_1_1);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_TagId__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TagId")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TagId *)new imebra::TagId();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TagId, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagId__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::uint16_t arg1 ;
  std::uint16_t arg2 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::TagId *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TagId",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TagId" "', argument " "1"" of type '" "std::uint16_t""'");
  } 
  arg1 = static_cast< std::uint16_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TagId" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TagId *)new imebra::TagId(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TagId, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagId__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::uint16_t arg1 ;
  std::uint32_t arg2 ;
  std::uint16_t arg3 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  imebra::TagId *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_TagId",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TagId" "', argument " "1"" of type '" "std::uint16_t""'");
  } 
  arg1 = static_cast< std::uint16_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TagId" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TagId" "', argument " "3"" of type '" "std::uint16_t""'");
  } 
  arg3 = static_cast< std::uint16_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TagId *)new imebra::TagId(arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TagId, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagId__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TagId *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TagId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TagId" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TagId" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TagId * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TagId *)new imebra::TagId((imebra::TagId const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TagId, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagId__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::tagId_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TagId *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TagId",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TagId" "', argument " "1"" of type '" "imebra::tagId_t""'");
  } 
  arg1 = static_cast< imebra::tagId_t >(val1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TagId *)new imebra::TagId(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TagId, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagId__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::tagId_t arg1 ;
  std::uint32_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::TagId *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TagId",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TagId" "', argument " "1"" of type '" "imebra::tagId_t""'");
  } 
  arg1 = static_cast< imebra::tagId_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TagId" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TagId *)new imebra::TagId(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TagId, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagId(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TagId__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__TagId, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TagId__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TagId__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TagId__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TagId__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TagId__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TagId'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::TagId::TagId()\n"
    "    imebra::TagId::TagId(std::uint16_t,std::uint16_t)\n"
    "    imebra::TagId::TagId(std::uint16_t,std::uint32_t,std::uint16_t)\n"
    "    imebra::TagId::TagId(imebra::TagId const &)\n"
    "    imebra::TagId::TagId(imebra::tagId_t)\n"
    "    imebra::TagId::TagId(imebra::tagId_t,std::uint32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TagId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TagId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TagId, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TagId" "', argument " "1"" of type '" "imebra::TagId *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TagId * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagId_getGroupId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagId_getGroupId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TagId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagId_getGroupId" "', argument " "1"" of type '" "imebra::TagId const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TagId * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)((imebra::TagId const *)arg1)->getGroupId();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagId_getGroupOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagId_getGroupOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TagId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagId_getGroupOrder" "', argument " "1"" of type '" "imebra::TagId const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TagId * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::TagId const *)arg1)->getGroupOrder();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagId_getTagId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagId_getTagId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TagId, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagId_getTagId" "', argument " "1"" of type '" "imebra::TagId const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TagId * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)((imebra::TagId const *)arg1)->getTagId();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TagId_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__TagId, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Memory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Memory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Memory")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Memory *)new imebra::Memory();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Memory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Memory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  int res1 ;
  Py_ssize_t size1 = 0 ;
  void *buf1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::Memory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Memory",&obj0)) SWIG_fail;
  {
    res1 = PyObject_AsWriteBuffer(obj0, &buf1, &size1);
    if (res1<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Memory" "', argument " "1"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg1 = (char *) buf1;
    arg2 = (size_t) (size1/sizeof(char const));
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Memory *)new imebra::Memory((char const *)arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Memory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Memory__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Memory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::Memory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Memory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Memory,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Memory" "', argument " "1"" of type '" "imebra::Memory const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Memory" "', argument " "1"" of type '" "imebra::Memory const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Memory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Memory *)new imebra::Memory((imebra::Memory const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Memory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Memory(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Memory__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__Memory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Memory__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Memory__SWIG_1(self, args);
      }
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Memory__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Memory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::Memory::Memory()\n"
    "    imebra::Memory::Memory(char const *,size_t)\n"
    "    imebra::Memory::Memory(imebra::Memory const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Memory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Memory *arg1 = (imebra::Memory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Memory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Memory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Memory" "', argument " "1"" of type '" "imebra::Memory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Memory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Memory_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Memory *arg1 = (imebra::Memory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Memory_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Memory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Memory_size" "', argument " "1"" of type '" "imebra::Memory const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Memory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Memory const *)arg1)->size();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Memory_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Memory *arg1 = (imebra::Memory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  Py_ssize_t size2 = 0 ;
  void *buf2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Memory_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Memory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Memory_data" "', argument " "1"" of type '" "imebra::Memory const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Memory * >(argp1);
  {
    res2 = PyObject_AsWriteBuffer(obj1, &buf2, &size2);
    if (res2<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Memory_data" "', argument " "2"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg2 = (char *) buf2;
    arg3 = (size_t) (size2/sizeof(char));
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Memory const *)arg1)->data(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Memory_regionData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Memory *arg1 = (imebra::Memory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  Py_ssize_t size2 = 0 ;
  void *buf2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Memory_regionData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Memory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Memory_regionData" "', argument " "1"" of type '" "imebra::Memory const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Memory * >(argp1);
  {
    res2 = PyObject_AsWriteBuffer(obj1, &buf2, &size2);
    if (res2<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Memory_regionData" "', argument " "2"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg2 = (char *) buf2;
    arg3 = (size_t) (size2/sizeof(char));
  }
  ecode4 = SWIG_AsVal_size_t(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Memory_regionData" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((imebra::Memory const *)arg1)->regionData(arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Memory_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Memory *arg1 = (imebra::Memory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Memory_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Memory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Memory_empty" "', argument " "1"" of type '" "imebra::Memory const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Memory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::Memory const *)arg1)->empty();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Memory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__Memory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MutableMemory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableMemory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MutableMemory")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableMemory *)new imebra::MutableMemory();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableMemory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableMemory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableMemory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableMemory",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MutableMemory" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableMemory *)new imebra::MutableMemory(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableMemory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableMemory__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Memory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableMemory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableMemory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Memory,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableMemory" "', argument " "1"" of type '" "imebra::Memory const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableMemory" "', argument " "1"" of type '" "imebra::Memory const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Memory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableMemory *)new imebra::MutableMemory((imebra::Memory const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableMemory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableMemory__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableMemory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableMemory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableMemory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MutableMemory,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableMemory" "', argument " "1"" of type '" "imebra::MutableMemory const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableMemory" "', argument " "1"" of type '" "imebra::MutableMemory const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableMemory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableMemory *)new imebra::MutableMemory((imebra::MutableMemory const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableMemory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableMemory__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  int res1 ;
  Py_ssize_t size1 = 0 ;
  void *buf1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableMemory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableMemory",&obj0)) SWIG_fail;
  {
    res1 = PyObject_AsWriteBuffer(obj0, &buf1, &size1);
    if (res1<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableMemory" "', argument " "1"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg1 = (char *) buf1;
    arg2 = (size_t) (size1/sizeof(char const));
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableMemory *)new imebra::MutableMemory((char const *)arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableMemory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableMemory(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MutableMemory__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__MutableMemory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MutableMemory__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__Memory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MutableMemory__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MutableMemory__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_MutableMemory__SWIG_4(self, args);
      }
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MutableMemory__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MutableMemory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableMemory::MutableMemory()\n"
    "    imebra::MutableMemory::MutableMemory(size_t)\n"
    "    imebra::MutableMemory::MutableMemory(imebra::Memory const &)\n"
    "    imebra::MutableMemory::MutableMemory(imebra::MutableMemory const &)\n"
    "    imebra::MutableMemory::MutableMemory(char const *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MutableMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MutableMemory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableMemory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MutableMemory" "', argument " "1"" of type '" "imebra::MutableMemory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableMemory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableMemory_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  imebra::Memory *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableMemory_copyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableMemory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableMemory_copyFrom" "', argument " "1"" of type '" "imebra::MutableMemory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableMemory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__Memory,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableMemory_copyFrom" "', argument " "2"" of type '" "imebra::Memory const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableMemory_copyFrom" "', argument " "2"" of type '" "imebra::Memory const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::Memory * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->copyFrom((imebra::Memory const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableMemory_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MutableMemory_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableMemory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableMemory_clear" "', argument " "1"" of type '" "imebra::MutableMemory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableMemory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->clear();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableMemory_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableMemory_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableMemory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableMemory_resize" "', argument " "1"" of type '" "imebra::MutableMemory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableMemory * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableMemory_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->resize(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableMemory_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableMemory_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableMemory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableMemory_reserve" "', argument " "1"" of type '" "imebra::MutableMemory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableMemory * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableMemory_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->reserve(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableMemory_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  Py_ssize_t size2 = 0 ;
  void *buf2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableMemory_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableMemory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableMemory_assign" "', argument " "1"" of type '" "imebra::MutableMemory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableMemory * >(argp1);
  {
    res2 = PyObject_AsWriteBuffer(obj1, &buf2, &size2);
    if (res2<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableMemory_assign" "', argument " "2"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg2 = (char *) buf2;
    arg3 = (size_t) (size2/sizeof(char const));
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->assign((char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableMemory_assignRegion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  Py_ssize_t size2 = 0 ;
  void *buf2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableMemory_assignRegion",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableMemory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableMemory_assignRegion" "', argument " "1"" of type '" "imebra::MutableMemory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableMemory * >(argp1);
  {
    res2 = PyObject_AsWriteBuffer(obj1, &buf2, &size2);
    if (res2<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableMemory_assignRegion" "', argument " "2"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg2 = (char *) buf2;
    arg3 = (size_t) (size2/sizeof(char const));
  }
  ecode4 = SWIG_AsVal_size_t(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableMemory_assignRegion" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->assignRegion((char const *)arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MutableMemory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MutableMemory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MemoryPool_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MemoryPool_flush")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        imebra::MemoryPool::flush();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryPool_getUnusedMemorySize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":MemoryPool_getUnusedMemorySize")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::MemoryPool::getUnusedMemorySize();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryPool_setMemoryPoolSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MemoryPool_setMemoryPoolSize",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MemoryPool_setMemoryPoolSize" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MemoryPool_setMemoryPoolSize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        imebra::MemoryPool::setMemoryPoolSize(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MemoryPool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MemoryPool *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MemoryPool")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MemoryPool *)new imebra::MemoryPool();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MemoryPool, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MemoryPool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MemoryPool *arg1 = (imebra::MemoryPool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MemoryPool",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MemoryPool, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MemoryPool" "', argument " "1"" of type '" "imebra::MemoryPool *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MemoryPool * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MemoryPool_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MemoryPool, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BaseStreamInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseStreamInput *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::BaseStreamInput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BaseStreamInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__BaseStreamInput,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BaseStreamInput" "', argument " "1"" of type '" "imebra::BaseStreamInput const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BaseStreamInput" "', argument " "1"" of type '" "imebra::BaseStreamInput const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseStreamInput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::BaseStreamInput *)new imebra::BaseStreamInput((imebra::BaseStreamInput const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__BaseStreamInput, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseStreamInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseStreamInput *arg1 = (imebra::BaseStreamInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseStreamInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__BaseStreamInput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseStreamInput" "', argument " "1"" of type '" "imebra::BaseStreamInput *""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseStreamInput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseStreamInput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__BaseStreamInput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StreamTimeout__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseStreamInput *arg1 = 0 ;
  std::uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::StreamTimeout *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StreamTimeout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__BaseStreamInput,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamTimeout" "', argument " "1"" of type '" "imebra::BaseStreamInput &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamTimeout" "', argument " "1"" of type '" "imebra::BaseStreamInput &""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseStreamInput * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StreamTimeout" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::StreamTimeout *)new imebra::StreamTimeout(*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__StreamTimeout, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StreamTimeout__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamTimeout *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::StreamTimeout *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StreamTimeout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__StreamTimeout,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamTimeout" "', argument " "1"" of type '" "imebra::StreamTimeout const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamTimeout" "', argument " "1"" of type '" "imebra::StreamTimeout const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamTimeout * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::StreamTimeout *)new imebra::StreamTimeout((imebra::StreamTimeout const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__StreamTimeout, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StreamTimeout(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__StreamTimeout, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StreamTimeout__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__BaseStreamInput, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_StreamTimeout__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StreamTimeout'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::StreamTimeout::StreamTimeout(imebra::BaseStreamInput &,std::uint32_t)\n"
    "    imebra::StreamTimeout::StreamTimeout(imebra::StreamTimeout const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_StreamTimeout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamTimeout *arg1 = (imebra::StreamTimeout *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StreamTimeout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamTimeout, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StreamTimeout" "', argument " "1"" of type '" "imebra::StreamTimeout *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamTimeout * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StreamTimeout_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__StreamTimeout, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BaseStreamOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseStreamOutput *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::BaseStreamOutput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BaseStreamOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__BaseStreamOutput,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BaseStreamOutput" "', argument " "1"" of type '" "imebra::BaseStreamOutput const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BaseStreamOutput" "', argument " "1"" of type '" "imebra::BaseStreamOutput const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseStreamOutput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::BaseStreamOutput *)new imebra::BaseStreamOutput((imebra::BaseStreamOutput const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__BaseStreamOutput, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseStreamOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseStreamOutput *arg1 = (imebra::BaseStreamOutput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseStreamOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__BaseStreamOutput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseStreamOutput" "', argument " "1"" of type '" "imebra::BaseStreamOutput *""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseStreamOutput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseStreamOutput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__BaseStreamOutput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StreamReader__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseStreamInput *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::StreamReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StreamReader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__BaseStreamInput,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamReader" "', argument " "1"" of type '" "imebra::BaseStreamInput const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamReader" "', argument " "1"" of type '" "imebra::BaseStreamInput const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseStreamInput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::StreamReader *)new imebra::StreamReader((imebra::BaseStreamInput const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__StreamReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StreamReader__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseStreamInput *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  imebra::StreamReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_StreamReader",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__BaseStreamInput,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamReader" "', argument " "1"" of type '" "imebra::BaseStreamInput const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamReader" "', argument " "1"" of type '" "imebra::BaseStreamInput const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseStreamInput * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StreamReader" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StreamReader" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::StreamReader *)new imebra::StreamReader((imebra::BaseStreamInput const &)*arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__StreamReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StreamReader__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamReader *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::StreamReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StreamReader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__StreamReader,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamReader" "', argument " "1"" of type '" "imebra::StreamReader const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamReader" "', argument " "1"" of type '" "imebra::StreamReader const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamReader * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::StreamReader *)new imebra::StreamReader((imebra::StreamReader const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__StreamReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StreamReader(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__BaseStreamInput, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StreamReader__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__StreamReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StreamReader__SWIG_2(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__BaseStreamInput, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_StreamReader__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StreamReader'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::StreamReader::StreamReader(imebra::BaseStreamInput const &)\n"
    "    imebra::StreamReader::StreamReader(imebra::BaseStreamInput const &,size_t,size_t)\n"
    "    imebra::StreamReader::StreamReader(imebra::StreamReader const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StreamReader_getVirtualStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::StreamReader > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StreamReader_getVirtualStream",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamReader_getVirtualStream" "', argument " "1"" of type '" "imebra::StreamReader *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamReader * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StreamReader_getVirtualStream" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getVirtualStream(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::StreamReader(static_cast< const imebra::StreamReader& >(result))), SWIGTYPE_p_imebra__StreamReader, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StreamReader_read__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  Py_ssize_t size2 = 0 ;
  void *buf2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StreamReader_read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamReader_read" "', argument " "1"" of type '" "imebra::StreamReader *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamReader * >(argp1);
  {
    res2 = PyObject_AsWriteBuffer(obj1, &buf2, &size2);
    if (res2<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StreamReader_read" "', argument " "2"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg2 = (char *) buf2;
    arg3 = (size_t) (size2/sizeof(char));
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->read(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StreamReader_readSome__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  Py_ssize_t size2 = 0 ;
  void *buf2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StreamReader_readSome",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamReader_readSome" "', argument " "1"" of type '" "imebra::StreamReader *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamReader * >(argp1);
  {
    res2 = PyObject_AsWriteBuffer(obj1, &buf2, &size2);
    if (res2<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StreamReader_readSome" "', argument " "2"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg2 = (char *) buf2;
    arg3 = (size_t) (size2/sizeof(char));
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->readSome(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StreamReader_read__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::Memory > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StreamReader_read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamReader_read" "', argument " "1"" of type '" "imebra::StreamReader *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamReader * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StreamReader_read" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->read(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Memory(static_cast< const imebra::Memory& >(result))), SWIGTYPE_p_imebra__Memory, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StreamReader_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__StreamReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StreamReader_read__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__StreamReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_StreamReader_read__SWIG_0(self, args);
        }
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StreamReader_read__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StreamReader_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::StreamReader::read(char *,size_t)\n"
    "    imebra::StreamReader::read(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StreamReader_readSome__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::Memory > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StreamReader_readSome",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamReader_readSome" "', argument " "1"" of type '" "imebra::StreamReader *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamReader * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StreamReader_readSome" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->readSome(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Memory(static_cast< const imebra::Memory& >(result))), SWIGTYPE_p_imebra__Memory, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StreamReader_readSome(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__StreamReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StreamReader_readSome__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__StreamReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_StreamReader_readSome__SWIG_0(self, args);
        }
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StreamReader_readSome__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StreamReader_readSome'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::StreamReader::readSome(char *,size_t)\n"
    "    imebra::StreamReader::readSome(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StreamReader_terminate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StreamReader_terminate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamReader_terminate" "', argument " "1"" of type '" "imebra::StreamReader *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamReader * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->terminate();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StreamReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StreamReader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamReader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StreamReader" "', argument " "1"" of type '" "imebra::StreamReader *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamReader * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StreamReader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__StreamReader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StreamWriter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseStreamOutput *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::StreamWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StreamWriter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__BaseStreamOutput,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamWriter" "', argument " "1"" of type '" "imebra::BaseStreamOutput const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamWriter" "', argument " "1"" of type '" "imebra::BaseStreamOutput const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseStreamOutput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::StreamWriter *)new imebra::StreamWriter((imebra::BaseStreamOutput const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__StreamWriter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StreamWriter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseStreamOutput *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  imebra::StreamWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_StreamWriter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__BaseStreamOutput,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamWriter" "', argument " "1"" of type '" "imebra::BaseStreamOutput const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamWriter" "', argument " "1"" of type '" "imebra::BaseStreamOutput const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseStreamOutput * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StreamWriter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StreamWriter" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::StreamWriter *)new imebra::StreamWriter((imebra::BaseStreamOutput const &)*arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__StreamWriter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StreamWriter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamWriter *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::StreamWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StreamWriter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__StreamWriter,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamWriter" "', argument " "1"" of type '" "imebra::StreamWriter const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamWriter" "', argument " "1"" of type '" "imebra::StreamWriter const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamWriter * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::StreamWriter *)new imebra::StreamWriter((imebra::StreamWriter const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__StreamWriter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StreamWriter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__BaseStreamOutput, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StreamWriter__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__StreamWriter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StreamWriter__SWIG_2(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__BaseStreamOutput, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_StreamWriter__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StreamWriter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::StreamWriter::StreamWriter(imebra::BaseStreamOutput const &)\n"
    "    imebra::StreamWriter::StreamWriter(imebra::BaseStreamOutput const &,size_t,size_t)\n"
    "    imebra::StreamWriter::StreamWriter(imebra::StreamWriter const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StreamWriter_write__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamWriter *arg1 = (imebra::StreamWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StreamWriter_write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamWriter_write" "', argument " "1"" of type '" "imebra::StreamWriter *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamWriter * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StreamWriter_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StreamWriter_write" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->write((char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StreamWriter_write__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamWriter *arg1 = (imebra::StreamWriter *) 0 ;
  imebra::Memory *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StreamWriter_write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamWriter_write" "', argument " "1"" of type '" "imebra::StreamWriter *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamWriter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__Memory,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StreamWriter_write" "', argument " "2"" of type '" "imebra::Memory const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StreamWriter_write" "', argument " "2"" of type '" "imebra::Memory const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::Memory * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->write((imebra::Memory const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StreamWriter_write(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__StreamWriter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__Memory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_StreamWriter_write__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__StreamWriter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StreamWriter_write__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StreamWriter_write'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::StreamWriter::write(char const *,size_t)\n"
    "    imebra::StreamWriter::write(imebra::Memory const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StreamWriter_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamWriter *arg1 = (imebra::StreamWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StreamWriter_flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamWriter_flush" "', argument " "1"" of type '" "imebra::StreamWriter *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamWriter * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->flush();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StreamWriter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamWriter *arg1 = (imebra::StreamWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StreamWriter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__StreamWriter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StreamWriter" "', argument " "1"" of type '" "imebra::StreamWriter *""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamWriter * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StreamWriter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__StreamWriter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ReadingDataHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::ReadingDataHandler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ReadingDataHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__ReadingDataHandler,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ReadingDataHandler" "', argument " "1"" of type '" "imebra::ReadingDataHandler const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ReadingDataHandler" "', argument " "1"" of type '" "imebra::ReadingDataHandler const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::ReadingDataHandler *)new imebra::ReadingDataHandler((imebra::ReadingDataHandler const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__ReadingDataHandler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ReadingDataHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ReadingDataHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ReadingDataHandler" "', argument " "1"" of type '" "imebra::ReadingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandler_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReadingDataHandler_getSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandler_getSize" "', argument " "1"" of type '" "imebra::ReadingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::ReadingDataHandler const *)arg1)->getSize();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandler_getDataType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::tagVR_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReadingDataHandler_getDataType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandler_getDataType" "', argument " "1"" of type '" "imebra::ReadingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::tagVR_t)((imebra::ReadingDataHandler const *)arg1)->getDataType();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandler_getSignedLong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadingDataHandler_getSignedLong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandler_getSignedLong" "', argument " "1"" of type '" "imebra::ReadingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReadingDataHandler_getSignedLong" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::int32_t)((imebra::ReadingDataHandler const *)arg1)->getSignedLong(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandler_getUnsignedLong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadingDataHandler_getUnsignedLong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandler_getUnsignedLong" "', argument " "1"" of type '" "imebra::ReadingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReadingDataHandler_getUnsignedLong" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::ReadingDataHandler const *)arg1)->getUnsignedLong(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandler_getDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadingDataHandler_getDouble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandler_getDouble" "', argument " "1"" of type '" "imebra::ReadingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReadingDataHandler_getDouble" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((imebra::ReadingDataHandler const *)arg1)->getDouble(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandler_getString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadingDataHandler_getString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandler_getString" "', argument " "1"" of type '" "imebra::ReadingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReadingDataHandler_getString" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::ReadingDataHandler const *)arg1)->getString(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandler_getDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::Date > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadingDataHandler_getDate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandler_getDate" "', argument " "1"" of type '" "imebra::ReadingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReadingDataHandler_getDate" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::ReadingDataHandler const *)arg1)->getDate(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Date(static_cast< const imebra::Date& >(result))), SWIGTYPE_p_imebra__Date, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandler_getAge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::Age > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadingDataHandler_getAge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandler_getAge" "', argument " "1"" of type '" "imebra::ReadingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReadingDataHandler_getAge" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::ReadingDataHandler const *)arg1)->getAge(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Age(static_cast< const imebra::Age& >(result))), SWIGTYPE_p_imebra__Age, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandler_getPatientName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::PatientName > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadingDataHandler_getPatientName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandler_getPatientName" "', argument " "1"" of type '" "imebra::ReadingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReadingDataHandler_getPatientName" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::ReadingDataHandler const *)arg1)->getPatientName(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::PatientName(static_cast< const imebra::PatientName& >(result))), SWIGTYPE_p_imebra__PatientName, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ReadingDataHandler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__ReadingDataHandler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ReadingDataHandlerNumeric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandlerNumeric *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::ReadingDataHandlerNumeric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ReadingDataHandlerNumeric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__ReadingDataHandlerNumeric,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ReadingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::ReadingDataHandlerNumeric const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ReadingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::ReadingDataHandlerNumeric const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::ReadingDataHandlerNumeric *)new imebra::ReadingDataHandlerNumeric((imebra::ReadingDataHandlerNumeric const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ReadingDataHandlerNumeric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ReadingDataHandlerNumeric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ReadingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::ReadingDataHandlerNumeric *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandlerNumeric_getMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::Memory > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReadingDataHandlerNumeric_getMemory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandlerNumeric_getMemory" "', argument " "1"" of type '" "imebra::ReadingDataHandlerNumeric const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::ReadingDataHandlerNumeric const *)arg1)->getMemory();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Memory(static_cast< const imebra::Memory& >(result))), SWIGTYPE_p_imebra__Memory, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandlerNumeric_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  Py_ssize_t size2 = 0 ;
  void *buf2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadingDataHandlerNumeric_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandlerNumeric_data" "', argument " "1"" of type '" "imebra::ReadingDataHandlerNumeric const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandlerNumeric * >(argp1);
  {
    res2 = PyObject_AsWriteBuffer(obj1, &buf2, &size2);
    if (res2<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReadingDataHandlerNumeric_data" "', argument " "2"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg2 = (char *) buf2;
    arg3 = (size_t) (size2/sizeof(char));
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::ReadingDataHandlerNumeric const *)arg1)->data(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandlerNumeric_getUnitSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReadingDataHandlerNumeric_getUnitSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandlerNumeric_getUnitSize" "', argument " "1"" of type '" "imebra::ReadingDataHandlerNumeric const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::ReadingDataHandlerNumeric const *)arg1)->getUnitSize();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandlerNumeric_isSigned(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReadingDataHandlerNumeric_isSigned",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandlerNumeric_isSigned" "', argument " "1"" of type '" "imebra::ReadingDataHandlerNumeric const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::ReadingDataHandlerNumeric const *)arg1)->isSigned();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandlerNumeric_isFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReadingDataHandlerNumeric_isFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandlerNumeric_isFloat" "', argument " "1"" of type '" "imebra::ReadingDataHandlerNumeric const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::ReadingDataHandlerNumeric const *)arg1)->isFloat();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadingDataHandlerNumeric_copyTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  imebra::WritingDataHandlerNumeric *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReadingDataHandlerNumeric_copyTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadingDataHandlerNumeric_copyTo" "', argument " "1"" of type '" "imebra::ReadingDataHandlerNumeric *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ReadingDataHandlerNumeric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__WritingDataHandlerNumeric,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReadingDataHandlerNumeric_copyTo" "', argument " "2"" of type '" "imebra::WritingDataHandlerNumeric const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadingDataHandlerNumeric_copyTo" "', argument " "2"" of type '" "imebra::WritingDataHandlerNumeric const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::WritingDataHandlerNumeric * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->copyTo((imebra::WritingDataHandlerNumeric const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ReadingDataHandlerNumeric_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WritingDataHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::WritingDataHandler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WritingDataHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__WritingDataHandler,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WritingDataHandler" "', argument " "1"" of type '" "imebra::WritingDataHandler const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WritingDataHandler" "', argument " "1"" of type '" "imebra::WritingDataHandler const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::WritingDataHandler *)new imebra::WritingDataHandler((imebra::WritingDataHandler const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__WritingDataHandler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WritingDataHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WritingDataHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WritingDataHandler" "', argument " "1"" of type '" "imebra::WritingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_setSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WritingDataHandler_setSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_setSize" "', argument " "1"" of type '" "imebra::WritingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WritingDataHandler_setSize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setSize(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WritingDataHandler_getSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_getSize" "', argument " "1"" of type '" "imebra::WritingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::WritingDataHandler const *)arg1)->getSize();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_getDataType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::tagVR_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WritingDataHandler_getDataType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_getDataType" "', argument " "1"" of type '" "imebra::WritingDataHandler const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::tagVR_t)((imebra::WritingDataHandler const *)arg1)->getDataType();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_setSignedLong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::int32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WritingDataHandler_setSignedLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_setSignedLong" "', argument " "1"" of type '" "imebra::WritingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WritingDataHandler_setSignedLong" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WritingDataHandler_setSignedLong" "', argument " "3"" of type '" "std::int32_t""'");
  } 
  arg3 = static_cast< std::int32_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setSignedLong(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_setUnsignedLong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WritingDataHandler_setUnsignedLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_setUnsignedLong" "', argument " "1"" of type '" "imebra::WritingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WritingDataHandler_setUnsignedLong" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WritingDataHandler_setUnsignedLong" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setUnsignedLong(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_setDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WritingDataHandler_setDouble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_setDouble" "', argument " "1"" of type '" "imebra::WritingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WritingDataHandler_setDouble" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WritingDataHandler_setDouble" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setDouble(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_setString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WritingDataHandler_setString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_setString" "', argument " "1"" of type '" "imebra::WritingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WritingDataHandler_setString" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WritingDataHandler_setString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WritingDataHandler_setString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setString(arg2,(std::string const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_setUnicodeString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::wstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WritingDataHandler_setUnicodeString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_setUnicodeString" "', argument " "1"" of type '" "imebra::WritingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WritingDataHandler_setUnicodeString" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__wstring,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WritingDataHandler_setUnicodeString" "', argument " "3"" of type '" "std::wstring const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WritingDataHandler_setUnicodeString" "', argument " "3"" of type '" "std::wstring const &""'"); 
  }
  arg3 = reinterpret_cast< std::wstring * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setUnicodeString(arg2,(std::wstring const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_setDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  imebra::Date *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WritingDataHandler_setDate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_setDate" "', argument " "1"" of type '" "imebra::WritingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WritingDataHandler_setDate" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WritingDataHandler_setDate" "', argument " "3"" of type '" "imebra::Date const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WritingDataHandler_setDate" "', argument " "3"" of type '" "imebra::Date const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::Date * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setDate(arg2,(imebra::Date const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_setAge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  imebra::Age *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WritingDataHandler_setAge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_setAge" "', argument " "1"" of type '" "imebra::WritingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WritingDataHandler_setAge" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__Age,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WritingDataHandler_setAge" "', argument " "3"" of type '" "imebra::Age const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WritingDataHandler_setAge" "', argument " "3"" of type '" "imebra::Age const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::Age * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setAge(arg2,(imebra::Age const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandler_setPatientName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  imebra::PatientName *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WritingDataHandler_setPatientName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandler_setPatientName" "', argument " "1"" of type '" "imebra::WritingDataHandler *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandler * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WritingDataHandler_setPatientName" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__PatientName,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WritingDataHandler_setPatientName" "', argument " "3"" of type '" "imebra::PatientName const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WritingDataHandler_setPatientName" "', argument " "3"" of type '" "imebra::PatientName const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::PatientName * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setPatientName(arg2,(imebra::PatientName const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WritingDataHandler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__WritingDataHandler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WritingDataHandlerNumeric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandlerNumeric *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::WritingDataHandlerNumeric *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WritingDataHandlerNumeric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__WritingDataHandlerNumeric,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WritingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::WritingDataHandlerNumeric const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WritingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::WritingDataHandlerNumeric const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::WritingDataHandlerNumeric *)new imebra::WritingDataHandlerNumeric((imebra::WritingDataHandlerNumeric const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__WritingDataHandlerNumeric, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WritingDataHandlerNumeric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WritingDataHandlerNumeric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandlerNumeric, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WritingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::WritingDataHandlerNumeric *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandlerNumeric_getMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::MutableMemory > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WritingDataHandlerNumeric_getMemory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandlerNumeric_getMemory" "', argument " "1"" of type '" "imebra::WritingDataHandlerNumeric const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::WritingDataHandlerNumeric const *)arg1)->getMemory();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::MutableMemory(static_cast< const imebra::MutableMemory& >(result))), SWIGTYPE_p_imebra__MutableMemory, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandlerNumeric_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  Py_ssize_t size2 = 0 ;
  void *buf2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WritingDataHandlerNumeric_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandlerNumeric_assign" "', argument " "1"" of type '" "imebra::WritingDataHandlerNumeric *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandlerNumeric * >(argp1);
  {
    res2 = PyObject_AsWriteBuffer(obj1, &buf2, &size2);
    if (res2<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WritingDataHandlerNumeric_assign" "', argument " "2"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg2 = (char *) buf2;
    arg3 = (size_t) (size2/sizeof(char const));
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->assign((char const *)arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandlerNumeric_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  Py_ssize_t size2 = 0 ;
  void *buf2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WritingDataHandlerNumeric_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandlerNumeric_data" "', argument " "1"" of type '" "imebra::WritingDataHandlerNumeric const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandlerNumeric * >(argp1);
  {
    res2 = PyObject_AsWriteBuffer(obj1, &buf2, &size2);
    if (res2<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WritingDataHandlerNumeric_data" "', argument " "2"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg2 = (char *) buf2;
    arg3 = (size_t) (size2/sizeof(char));
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::WritingDataHandlerNumeric const *)arg1)->data(arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandlerNumeric_getUnitSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WritingDataHandlerNumeric_getUnitSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandlerNumeric_getUnitSize" "', argument " "1"" of type '" "imebra::WritingDataHandlerNumeric const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::WritingDataHandlerNumeric const *)arg1)->getUnitSize();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandlerNumeric_isSigned(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WritingDataHandlerNumeric_isSigned",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandlerNumeric_isSigned" "', argument " "1"" of type '" "imebra::WritingDataHandlerNumeric const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::WritingDataHandlerNumeric const *)arg1)->isSigned();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandlerNumeric_isFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WritingDataHandlerNumeric_isFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandlerNumeric_isFloat" "', argument " "1"" of type '" "imebra::WritingDataHandlerNumeric const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandlerNumeric * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::WritingDataHandlerNumeric const *)arg1)->isFloat();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WritingDataHandlerNumeric_copyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  imebra::ReadingDataHandlerNumeric *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WritingDataHandlerNumeric_copyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__WritingDataHandlerNumeric, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WritingDataHandlerNumeric_copyFrom" "', argument " "1"" of type '" "imebra::WritingDataHandlerNumeric *""'"); 
  }
  arg1 = reinterpret_cast< imebra::WritingDataHandlerNumeric * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__ReadingDataHandlerNumeric,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WritingDataHandlerNumeric_copyFrom" "', argument " "2"" of type '" "imebra::ReadingDataHandlerNumeric const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WritingDataHandlerNumeric_copyFrom" "', argument " "2"" of type '" "imebra::ReadingDataHandlerNumeric const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::ReadingDataHandlerNumeric * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->copyFrom((imebra::ReadingDataHandlerNumeric const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WritingDataHandlerNumeric_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__WritingDataHandlerNumeric, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LUT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::LUT *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::LUT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__LUT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LUT" "', argument " "1"" of type '" "imebra::LUT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LUT" "', argument " "1"" of type '" "imebra::LUT const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::LUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::LUT *)new imebra::LUT((imebra::LUT const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__LUT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LUT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__LUT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LUT" "', argument " "1"" of type '" "imebra::LUT *""'"); 
  }
  arg1 = reinterpret_cast< imebra::LUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUT_getDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LUT_getDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__LUT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUT_getDescription" "', argument " "1"" of type '" "imebra::LUT const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::LUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::LUT const *)arg1)->getDescription();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::wstring(static_cast< const std::wstring& >(result))), SWIGTYPE_p_std__wstring, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUT_getReadingDataHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LUT_getReadingDataHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__LUT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUT_getReadingDataHandler" "', argument " "1"" of type '" "imebra::LUT const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::LUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::LUT const *)arg1)->getReadingDataHandler();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::ReadingDataHandlerNumeric(static_cast< const imebra::ReadingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUT_getBits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LUT_getBits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__LUT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUT_getBits" "', argument " "1"" of type '" "imebra::LUT const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::LUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::LUT const *)arg1)->getBits();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUT_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LUT_getSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__LUT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUT_getSize" "', argument " "1"" of type '" "imebra::LUT const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::LUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::LUT const *)arg1)->getSize();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUT_getFirstMapped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LUT_getFirstMapped",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__LUT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUT_getFirstMapped" "', argument " "1"" of type '" "imebra::LUT const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::LUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::int32_t)((imebra::LUT const *)arg1)->getFirstMapped();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUT_getMappedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  std::int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LUT_getMappedValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__LUT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUT_getMappedValue" "', argument " "1"" of type '" "imebra::LUT const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::LUT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LUT_getMappedValue" "', argument " "2"" of type '" "std::int32_t""'");
  } 
  arg2 = static_cast< std::int32_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::LUT const *)arg1)->getMappedValue(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LUT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__LUT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Image(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Image *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::Image *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Image",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Image" "', argument " "1"" of type '" "imebra::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Image" "', argument " "1"" of type '" "imebra::Image const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Image * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Image *)new imebra::Image((imebra::Image const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Image, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Image(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Image",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Image, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Image" "', argument " "1"" of type '" "imebra::Image *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Image * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_getWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_getWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_getWidth" "', argument " "1"" of type '" "imebra::Image const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Image * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Image const *)arg1)->getWidth();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_getHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_getHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_getHeight" "', argument " "1"" of type '" "imebra::Image const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Image * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Image const *)arg1)->getHeight();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_getReadingDataHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_getReadingDataHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_getReadingDataHandler" "', argument " "1"" of type '" "imebra::Image const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Image * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Image const *)arg1)->getReadingDataHandler();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::ReadingDataHandlerNumeric(static_cast< const imebra::ReadingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_getColorSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_getColorSpace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_getColorSpace" "', argument " "1"" of type '" "imebra::Image const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Image * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Image const *)arg1)->getColorSpace();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_getChannelsNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_getChannelsNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_getChannelsNumber" "', argument " "1"" of type '" "imebra::Image const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Image * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Image const *)arg1)->getChannelsNumber();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_getDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::bitDepth_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_getDepth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_getDepth" "', argument " "1"" of type '" "imebra::Image const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Image * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::bitDepth_t)((imebra::Image const *)arg1)->getDepth();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Image_getHighBit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Image_getHighBit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Image_getHighBit" "', argument " "1"" of type '" "imebra::Image const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Image * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Image const *)arg1)->getHighBit();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Image_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__Image, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MutableImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::uint32_t arg1 ;
  std::uint32_t arg2 ;
  imebra::bitDepth_t arg3 ;
  std::string *arg4 = 0 ;
  std::uint32_t arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  imebra::MutableImage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_MutableImage",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MutableImage" "', argument " "1"" of type '" "std::uint32_t""'");
  } 
  arg1 = static_cast< std::uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MutableImage" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MutableImage" "', argument " "3"" of type '" "imebra::bitDepth_t""'");
  } 
  arg3 = static_cast< imebra::bitDepth_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_MutableImage" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableImage" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MutableImage" "', argument " "5"" of type '" "std::uint32_t""'");
  } 
  arg5 = static_cast< std::uint32_t >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableImage *)new imebra::MutableImage(arg1,arg2,arg3,(std::string const &)*arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableImage, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableImage *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableImage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MutableImage,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableImage" "', argument " "1"" of type '" "imebra::MutableImage const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableImage" "', argument " "1"" of type '" "imebra::MutableImage const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableImage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableImage *)new imebra::MutableImage((imebra::MutableImage const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableImage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableImage(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__MutableImage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MutableImage__SWIG_1(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_MutableImage__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MutableImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableImage::MutableImage(std::uint32_t,std::uint32_t,imebra::bitDepth_t,std::string const &,std::uint32_t)\n"
    "    imebra::MutableImage::MutableImage(imebra::MutableImage const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MutableImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableImage *arg1 = (imebra::MutableImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MutableImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableImage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MutableImage" "', argument " "1"" of type '" "imebra::MutableImage *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableImage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableImage_getWritingDataHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableImage *arg1 = (imebra::MutableImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MutableImage_getWritingDataHandler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableImage_getWritingDataHandler" "', argument " "1"" of type '" "imebra::MutableImage *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableImage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getWritingDataHandler();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::WritingDataHandlerNumeric(static_cast< const imebra::WritingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__WritingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MutableImage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MutableImage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Overlay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::Overlay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Overlay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Overlay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Overlay" "', argument " "1"" of type '" "imebra::Overlay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Overlay" "', argument " "1"" of type '" "imebra::Overlay const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Overlay *)new imebra::Overlay((imebra::Overlay const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Overlay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Overlay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Overlay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Overlay" "', argument " "1"" of type '" "imebra::Overlay *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getFirstFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getFirstFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getFirstFrame" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Overlay const *)arg1)->getFirstFrame();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getFramesCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getFramesCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getFramesCount" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Overlay const *)arg1)->getFramesCount();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getZeroBasedOriginX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getZeroBasedOriginX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getZeroBasedOriginX" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::int32_t)((imebra::Overlay const *)arg1)->getZeroBasedOriginX();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getZeroBasedOriginY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getZeroBasedOriginY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getZeroBasedOriginY" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::int32_t)((imebra::Overlay const *)arg1)->getZeroBasedOriginY();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getOneBasedOriginX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getOneBasedOriginX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getOneBasedOriginX" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::int32_t)((imebra::Overlay const *)arg1)->getOneBasedOriginX();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getOneBasedOriginY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getOneBasedOriginY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getOneBasedOriginY" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::int32_t)((imebra::Overlay const *)arg1)->getOneBasedOriginY();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::overlayType_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getType" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::overlayType_t)((imebra::Overlay const *)arg1)->getType();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getSubType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getSubType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getSubType" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Overlay const *)arg1)->getSubType();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getLabel" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Overlay const *)arg1)->getLabel();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getDescription" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Overlay const *)arg1)->getDescription();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getROIArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getROIArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getROIArea" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Overlay const *)arg1)->getROIArea();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getROIMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getROIMean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getROIMean" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((imebra::Overlay const *)arg1)->getROIMean();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getROIStandardDeviation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Overlay_getROIStandardDeviation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getROIStandardDeviation" "', argument " "1"" of type '" "imebra::Overlay *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)(arg1)->getROIStandardDeviation();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Overlay_getImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::Image > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Overlay_getImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Overlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Overlay_getImage" "', argument " "1"" of type '" "imebra::Overlay const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Overlay * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Overlay_getImage" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Overlay const *)arg1)->getImage(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Image(static_cast< const imebra::Image& >(result))), SWIGTYPE_p_imebra__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Overlay_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__Overlay, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MutableOverlay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::overlayType_t arg1 ;
  std::string *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::int32_t arg4 ;
  std::int32_t arg5 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  imebra::MutableOverlay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_MutableOverlay",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MutableOverlay" "', argument " "1"" of type '" "imebra::overlayType_t""'");
  } 
  arg1 = static_cast< imebra::overlayType_t >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MutableOverlay" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableOverlay" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MutableOverlay" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MutableOverlay" "', argument " "4"" of type '" "std::int32_t""'");
  } 
  arg4 = static_cast< std::int32_t >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MutableOverlay" "', argument " "5"" of type '" "std::int32_t""'");
  } 
  arg5 = static_cast< std::int32_t >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_MutableOverlay" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableOverlay" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_MutableOverlay" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableOverlay" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableOverlay *)new imebra::MutableOverlay(arg1,(std::string const &)*arg2,arg3,arg4,arg5,(std::string const &)*arg6,(std::string const &)*arg7);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableOverlay, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableOverlay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableOverlay *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableOverlay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableOverlay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MutableOverlay,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableOverlay" "', argument " "1"" of type '" "imebra::MutableOverlay const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableOverlay" "', argument " "1"" of type '" "imebra::MutableOverlay const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableOverlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableOverlay *)new imebra::MutableOverlay((imebra::MutableOverlay const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableOverlay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableOverlay(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__MutableOverlay, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MutableOverlay__SWIG_1(self, args);
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_MutableOverlay__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MutableOverlay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableOverlay::MutableOverlay(imebra::overlayType_t,std::string const &,std::uint32_t,std::int32_t,std::int32_t,std::string const &,std::string const &)\n"
    "    imebra::MutableOverlay::MutableOverlay(imebra::MutableOverlay const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MutableOverlay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableOverlay *arg1 = (imebra::MutableOverlay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MutableOverlay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableOverlay, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MutableOverlay" "', argument " "1"" of type '" "imebra::MutableOverlay *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableOverlay * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableOverlay_setROIArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableOverlay *arg1 = (imebra::MutableOverlay *) 0 ;
  std::uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableOverlay_setROIArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableOverlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableOverlay_setROIArea" "', argument " "1"" of type '" "imebra::MutableOverlay *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableOverlay * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableOverlay_setROIArea" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setROIArea(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableOverlay_setROIMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableOverlay *arg1 = (imebra::MutableOverlay *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableOverlay_setROIMean",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableOverlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableOverlay_setROIMean" "', argument " "1"" of type '" "imebra::MutableOverlay *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableOverlay * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableOverlay_setROIMean" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setROIMean(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableOverlay_setROIStandardDeviation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableOverlay *arg1 = (imebra::MutableOverlay *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableOverlay_setROIStandardDeviation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableOverlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableOverlay_setROIStandardDeviation" "', argument " "1"" of type '" "imebra::MutableOverlay *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableOverlay * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableOverlay_setROIStandardDeviation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setROIStandardDeviation(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableOverlay_setImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableOverlay *arg1 = (imebra::MutableOverlay *) 0 ;
  std::uint32_t arg2 ;
  imebra::Image *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableOverlay_setImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableOverlay, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableOverlay_setImage" "', argument " "1"" of type '" "imebra::MutableOverlay *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableOverlay * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableOverlay_setImage" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MutableOverlay_setImage" "', argument " "3"" of type '" "imebra::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableOverlay_setImage" "', argument " "3"" of type '" "imebra::Image const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::Image * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setImage(arg2,(imebra::Image const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MutableOverlay_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MutableOverlay, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Tag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::Tag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Tag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Tag,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Tag" "', argument " "1"" of type '" "imebra::Tag const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tag" "', argument " "1"" of type '" "imebra::Tag const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Tag *)new imebra::Tag((imebra::Tag const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Tag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Tag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Tag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Tag" "', argument " "1"" of type '" "imebra::Tag *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tag_getBuffersCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tag_getBuffersCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tag_getBuffersCount" "', argument " "1"" of type '" "imebra::Tag const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Tag const *)arg1)->getBuffersCount();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tag_bufferExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tag_bufferExists",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tag_bufferExists" "', argument " "1"" of type '" "imebra::Tag const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tag_bufferExists" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::Tag const *)arg1)->bufferExists(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tag_getBufferSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tag_getBufferSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tag_getBufferSize" "', argument " "1"" of type '" "imebra::Tag const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tag_getBufferSize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Tag const *)arg1)->getBufferSize(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tag_getReadingDataHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::ReadingDataHandler > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tag_getReadingDataHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tag_getReadingDataHandler" "', argument " "1"" of type '" "imebra::Tag const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tag_getReadingDataHandler" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Tag const *)arg1)->getReadingDataHandler(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::ReadingDataHandler(static_cast< const imebra::ReadingDataHandler& >(result))), SWIGTYPE_p_imebra__ReadingDataHandler, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tag_getReadingDataHandlerNumeric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tag_getReadingDataHandlerNumeric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tag_getReadingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::Tag const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tag_getReadingDataHandlerNumeric" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Tag const *)arg1)->getReadingDataHandlerNumeric(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::ReadingDataHandlerNumeric(static_cast< const imebra::ReadingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tag_getReadingDataHandlerRaw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tag_getReadingDataHandlerRaw",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tag_getReadingDataHandlerRaw" "', argument " "1"" of type '" "imebra::Tag const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tag_getReadingDataHandlerRaw" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Tag const *)arg1)->getReadingDataHandlerRaw(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::ReadingDataHandlerNumeric(static_cast< const imebra::ReadingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tag_getStreamReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::StreamReader > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tag_getStreamReader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tag_getStreamReader" "', argument " "1"" of type '" "imebra::Tag const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tag_getStreamReader" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Tag const *)arg1)->getStreamReader(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::StreamReader(static_cast< const imebra::StreamReader& >(result))), SWIGTYPE_p_imebra__StreamReader, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tag_getSequenceItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tag_getSequenceItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tag_getSequenceItem" "', argument " "1"" of type '" "imebra::Tag const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tag_getSequenceItem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Tag const *)arg1)->getSequenceItem(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tag_sequenceItemExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tag_sequenceItemExists",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tag_sequenceItemExists" "', argument " "1"" of type '" "imebra::Tag const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tag_sequenceItemExists" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::Tag const *)arg1)->sequenceItemExists(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tag_getDataType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::tagVR_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tag_getDataType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tag_getDataType" "', argument " "1"" of type '" "imebra::Tag const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Tag * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::tagVR_t)((imebra::Tag const *)arg1)->getDataType();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Tag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__Tag, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MutableTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableTag *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableTag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MutableTag,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableTag" "', argument " "1"" of type '" "imebra::MutableTag const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableTag" "', argument " "1"" of type '" "imebra::MutableTag const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableTag * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableTag *)new imebra::MutableTag((imebra::MutableTag const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableTag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MutableTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MutableTag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableTag, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MutableTag" "', argument " "1"" of type '" "imebra::MutableTag *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableTag * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableTag_getWritingDataHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::WritingDataHandler > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableTag_getWritingDataHandler",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableTag_getWritingDataHandler" "', argument " "1"" of type '" "imebra::MutableTag *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableTag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableTag_getWritingDataHandler" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getWritingDataHandler(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::WritingDataHandler(static_cast< const imebra::WritingDataHandler& >(result))), SWIGTYPE_p_imebra__WritingDataHandler, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableTag_getWritingDataHandlerNumeric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableTag_getWritingDataHandlerNumeric",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableTag_getWritingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::MutableTag *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableTag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableTag_getWritingDataHandlerNumeric" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getWritingDataHandlerNumeric(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::WritingDataHandlerNumeric(static_cast< const imebra::WritingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__WritingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableTag_getWritingDataHandlerRaw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableTag_getWritingDataHandlerRaw",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableTag_getWritingDataHandlerRaw" "', argument " "1"" of type '" "imebra::MutableTag *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableTag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableTag_getWritingDataHandlerRaw" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getWritingDataHandlerRaw(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::WritingDataHandlerNumeric(static_cast< const imebra::WritingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__WritingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableTag_getStreamWriter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::StreamWriter > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableTag_getStreamWriter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableTag_getStreamWriter" "', argument " "1"" of type '" "imebra::MutableTag *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableTag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableTag_getStreamWriter" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getStreamWriter(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::StreamWriter(static_cast< const imebra::StreamWriter& >(result))), SWIGTYPE_p_imebra__StreamWriter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableTag_appendSequenceItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::MutableDataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MutableTag_appendSequenceItem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableTag_appendSequenceItem" "', argument " "1"" of type '" "imebra::MutableTag *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableTag * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->appendSequenceItem();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::MutableDataSet(static_cast< const imebra::MutableDataSet& >(result))), SWIGTYPE_p_imebra__MutableDataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableTag_setStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  size_t arg2 ;
  imebra::FileStreamInput *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableTag_setStream",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableTag_setStream" "', argument " "1"" of type '" "imebra::MutableTag *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableTag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableTag_setStream" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__FileStreamInput,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MutableTag_setStream" "', argument " "3"" of type '" "imebra::FileStreamInput &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableTag_setStream" "', argument " "3"" of type '" "imebra::FileStreamInput &""'"); 
  }
  arg3 = reinterpret_cast< imebra::FileStreamInput * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setStream(arg2,*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MutableTag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MutableTag, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DataSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DataSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataSet" "', argument " "1"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataSet" "', argument " "1"" of type '" "imebra::DataSet const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DataSet *)new imebra::DataSet((imebra::DataSet const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DataSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DataSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataSet" "', argument " "1"" of type '" "imebra::DataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getTags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::tagsIds_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataSet_getTags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getTags" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getTags();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = swig::from(static_cast< std::vector< imebra::TagId,std::allocator< imebra::TagId > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::Tag > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataSet_getTag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getTag" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getTag" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getTag" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getTag((imebra::TagId const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Tag(static_cast< const imebra::Tag& >(result))), SWIGTYPE_p_imebra__Tag, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::Image > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataSet_getImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getImage" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataSet_getImage" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getImage(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Image(static_cast< const imebra::Image& >(result))), SWIGTYPE_p_imebra__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getOverlay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::Overlay > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataSet_getOverlay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getOverlay" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataSet_getOverlay" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getOverlay(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Overlay(static_cast< const imebra::Overlay& >(result))), SWIGTYPE_p_imebra__Overlay, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getImageApplyModalityTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::Image > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataSet_getImageApplyModalityTransform",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getImageApplyModalityTransform" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataSet_getImageApplyModalityTransform" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getImageApplyModalityTransform(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Image(static_cast< const imebra::Image& >(result))), SWIGTYPE_p_imebra__Image, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getVOIs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::vois_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataSet_getVOIs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getVOIs" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getVOIs();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = swig::from(static_cast< std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getFunctionalGroupDataSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataSet_getFunctionalGroupDataSet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getFunctionalGroupDataSet" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataSet_getFunctionalGroupDataSet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getFunctionalGroupDataSet(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getStreamReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::StreamReader > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getStreamReader",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getStreamReader" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getStreamReader" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getStreamReader" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getStreamReader" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getStreamReader((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::StreamReader(static_cast< const imebra::StreamReader& >(result))), SWIGTYPE_p_imebra__StreamReader, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getSequenceItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getSequenceItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getSequenceItem" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getSequenceItem" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getSequenceItem" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getSequenceItem" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getSequenceItem((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getLUT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::LUT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getLUT",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getLUT" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getLUT" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getLUT" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getLUT" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getLUT((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::LUT(static_cast< const imebra::LUT& >(result))), SWIGTYPE_p_imebra__LUT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getReadingDataHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::ReadingDataHandler > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getReadingDataHandler",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getReadingDataHandler" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getReadingDataHandler" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getReadingDataHandler" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getReadingDataHandler" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getReadingDataHandler((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::ReadingDataHandler(static_cast< const imebra::ReadingDataHandler& >(result))), SWIGTYPE_p_imebra__ReadingDataHandler, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getReadingDataHandlerNumeric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getReadingDataHandlerNumeric",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getReadingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getReadingDataHandlerNumeric" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getReadingDataHandlerNumeric" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getReadingDataHandlerNumeric" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getReadingDataHandlerNumeric((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::ReadingDataHandlerNumeric(static_cast< const imebra::ReadingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getReadingDataHandlerRaw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getReadingDataHandlerRaw",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getReadingDataHandlerRaw" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getReadingDataHandlerRaw" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getReadingDataHandlerRaw" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getReadingDataHandlerRaw" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getReadingDataHandlerRaw((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::ReadingDataHandlerNumeric(static_cast< const imebra::ReadingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__ReadingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_bufferExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_bufferExists",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_bufferExists" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_bufferExists" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_bufferExists" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_bufferExists" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::DataSet const *)arg1)->bufferExists((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getSignedLong__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getSignedLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getSignedLong" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getSignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getSignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getSignedLong" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::int32_t)((imebra::DataSet const *)arg1)->getSignedLong((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getSignedLong__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DataSet_getSignedLong",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getSignedLong" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getSignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getSignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getSignedLong" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DataSet_getSignedLong" "', argument " "4"" of type '" "std::int32_t""'");
  } 
  arg4 = static_cast< std::int32_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::int32_t)((imebra::DataSet const *)arg1)->getSignedLong((imebra::TagId const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getSignedLong(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DataSet_getSignedLong__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DataSet_getSignedLong__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataSet_getSignedLong'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DataSet::getSignedLong(imebra::TagId const &,size_t) const\n"
    "    imebra::DataSet::getSignedLong(imebra::TagId const &,size_t,std::int32_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataSet_getUnsignedLong__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getUnsignedLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getUnsignedLong" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getUnsignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getUnsignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getUnsignedLong" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::DataSet const *)arg1)->getUnsignedLong((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getUnsignedLong__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DataSet_getUnsignedLong",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getUnsignedLong" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getUnsignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getUnsignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getUnsignedLong" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DataSet_getUnsignedLong" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::DataSet const *)arg1)->getUnsignedLong((imebra::TagId const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getUnsignedLong(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DataSet_getUnsignedLong__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DataSet_getUnsignedLong__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataSet_getUnsignedLong'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DataSet::getUnsignedLong(imebra::TagId const &,size_t) const\n"
    "    imebra::DataSet::getUnsignedLong(imebra::TagId const &,size_t,std::uint32_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataSet_getDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getDouble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getDouble" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getDouble" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getDouble" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getDouble" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((imebra::DataSet const *)arg1)->getDouble((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DataSet_getDouble",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getDouble" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getDouble" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getDouble" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getDouble" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DataSet_getDouble" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((imebra::DataSet const *)arg1)->getDouble((imebra::TagId const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getDouble(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DataSet_getDouble__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DataSet_getDouble__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataSet_getDouble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DataSet::getDouble(imebra::TagId const &,size_t) const\n"
    "    imebra::DataSet::getDouble(imebra::TagId const &,size_t,double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataSet_getString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getString" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getString" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getString" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getString" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getString((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DataSet_getString",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getString" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getString" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getString" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getString" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataSet_getString" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getString" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getString((imebra::TagId const &)*arg2,arg3,(std::string const &)*arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DataSet_getString__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DataSet_getString__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataSet_getString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DataSet::getString(imebra::TagId const &,size_t) const\n"
    "    imebra::DataSet::getString(imebra::TagId const &,size_t,std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataSet_getAge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::Age > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getAge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getAge" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getAge" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getAge" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getAge" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getAge((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Age(static_cast< const imebra::Age& >(result))), SWIGTYPE_p_imebra__Age, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getAge__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::Age *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< imebra::Age > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DataSet_getAge",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getAge" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getAge" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getAge" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getAge" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_imebra__Age,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataSet_getAge" "', argument " "4"" of type '" "imebra::Age const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getAge" "', argument " "4"" of type '" "imebra::Age const &""'"); 
  }
  arg4 = reinterpret_cast< imebra::Age * >(argp4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getAge((imebra::TagId const &)*arg2,arg3,(imebra::Age const &)*arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Age(static_cast< const imebra::Age& >(result))), SWIGTYPE_p_imebra__Age, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getAge(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DataSet_getAge__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_imebra__Age, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DataSet_getAge__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataSet_getAge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DataSet::getAge(imebra::TagId const &,size_t) const\n"
    "    imebra::DataSet::getAge(imebra::TagId const &,size_t,imebra::Age const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataSet_getDate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::Date > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getDate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getDate" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getDate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getDate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getDate" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getDate((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Date(static_cast< const imebra::Date& >(result))), SWIGTYPE_p_imebra__Date, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getDate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::Date *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< imebra::Date > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DataSet_getDate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getDate" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getDate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getDate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getDate" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_imebra__Date,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataSet_getDate" "', argument " "4"" of type '" "imebra::Date const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getDate" "', argument " "4"" of type '" "imebra::Date const &""'"); 
  }
  arg4 = reinterpret_cast< imebra::Date * >(argp4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getDate((imebra::TagId const &)*arg2,arg3,(imebra::Date const &)*arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Date(static_cast< const imebra::Date& >(result))), SWIGTYPE_p_imebra__Date, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getDate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DataSet_getDate__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_imebra__Date, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DataSet_getDate__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataSet_getDate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DataSet::getDate(imebra::TagId const &,size_t) const\n"
    "    imebra::DataSet::getDate(imebra::TagId const &,size_t,imebra::Date const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataSet_getPatientName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::PatientName > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataSet_getPatientName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getPatientName" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getPatientName" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getPatientName" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getPatientName" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getPatientName((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::PatientName(static_cast< const imebra::PatientName& >(result))), SWIGTYPE_p_imebra__PatientName, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getPatientName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::PatientName *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< imebra::PatientName > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DataSet_getPatientName",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getPatientName" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getPatientName" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getPatientName" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataSet_getPatientName" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_imebra__PatientName,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataSet_getPatientName" "', argument " "4"" of type '" "imebra::PatientName const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getPatientName" "', argument " "4"" of type '" "imebra::PatientName const &""'"); 
  }
  arg4 = reinterpret_cast< imebra::PatientName * >(argp4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DataSet const *)arg1)->getPatientName((imebra::TagId const &)*arg2,arg3,(imebra::PatientName const &)*arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::PatientName(static_cast< const imebra::PatientName& >(result))), SWIGTYPE_p_imebra__PatientName, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataSet_getPatientName(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DataSet_getPatientName__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_imebra__PatientName, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DataSet_getPatientName__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataSet_getPatientName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DataSet::getPatientName(imebra::TagId const &,size_t) const\n"
    "    imebra::DataSet::getPatientName(imebra::TagId const &,size_t,imebra::PatientName const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataSet_getDataType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::tagVR_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataSet_getDataType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataSet_getDataType" "', argument " "1"" of type '" "imebra::DataSet const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataSet_getDataType" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataSet_getDataType" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::tagVR_t)((imebra::DataSet const *)arg1)->getDataType((imebra::TagId const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DataSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__DataSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MutableDataSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableDataSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableDataSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MutableDataSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableDataSet" "', argument " "1"" of type '" "imebra::MutableDataSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableDataSet" "', argument " "1"" of type '" "imebra::MutableDataSet const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableDataSet *)new imebra::MutableDataSet((imebra::MutableDataSet const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableDataSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableDataSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MutableDataSet")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableDataSet *)new imebra::MutableDataSet();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableDataSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableDataSet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  imebra::MutableDataSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableDataSet",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableDataSet" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableDataSet" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableDataSet *)new imebra::MutableDataSet((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableDataSet, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableDataSet__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  imebra::charsetsList_t *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::MutableDataSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MutableDataSet",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableDataSet" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableDataSet" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MutableDataSet" "', argument " "2"" of type '" "imebra::charsetsList_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableDataSet" "', argument " "2"" of type '" "imebra::charsetsList_t const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableDataSet *)new imebra::MutableDataSet((std::string const &)*arg1,(imebra::charsetsList_t const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableDataSet, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableDataSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MutableDataSet__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MutableDataSet__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MutableDataSet__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MutableDataSet__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MutableDataSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::MutableDataSet(imebra::MutableDataSet const &)\n"
    "    imebra::MutableDataSet::MutableDataSet()\n"
    "    imebra::MutableDataSet::MutableDataSet(std::string const &)\n"
    "    imebra::MutableDataSet::MutableDataSet(std::string const &,imebra::charsetsList_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MutableDataSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MutableDataSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MutableDataSet" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getTagCreate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::tagVR_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::MutableTag > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_getTagCreate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_getTagCreate" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_getTagCreate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_getTagCreate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_getTagCreate" "', argument " "3"" of type '" "imebra::tagVR_t""'");
  } 
  arg3 = static_cast< imebra::tagVR_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getTagCreate((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::MutableTag(static_cast< const imebra::MutableTag& >(result))), SWIGTYPE_p_imebra__MutableTag, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getTagCreate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::MutableTag > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableDataSet_getTagCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_getTagCreate" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_getTagCreate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_getTagCreate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getTagCreate((imebra::TagId const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::MutableTag(static_cast< const imebra::MutableTag& >(result))), SWIGTYPE_p_imebra__MutableTag, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getTagCreate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MutableDataSet_getTagCreate__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MutableDataSet_getTagCreate__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MutableDataSet_getTagCreate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::getTagCreate(imebra::TagId const &,imebra::tagVR_t)\n"
    "    imebra::MutableDataSet::getTagCreate(imebra::TagId const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  size_t arg2 ;
  imebra::Image *arg3 = 0 ;
  imebra::imageQuality_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MutableDataSet_setImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setImage" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableDataSet_setImage" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__Image,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MutableDataSet_setImage" "', argument " "3"" of type '" "imebra::Image const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setImage" "', argument " "3"" of type '" "imebra::Image const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::Image * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableDataSet_setImage" "', argument " "4"" of type '" "imebra::imageQuality_t""'");
  } 
  arg4 = static_cast< imebra::imageQuality_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setImage(arg2,(imebra::Image const &)*arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setOverlay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  size_t arg2 ;
  imebra::Overlay *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_setOverlay",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setOverlay" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MutableDataSet_setOverlay" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__Overlay,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MutableDataSet_setOverlay" "', argument " "3"" of type '" "imebra::Overlay const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setOverlay" "', argument " "3"" of type '" "imebra::Overlay const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::Overlay * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setOverlay(arg2,(imebra::Overlay const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getStreamWriter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< imebra::StreamWriter > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MutableDataSet_getStreamWriter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_getStreamWriter" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_getStreamWriter" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_getStreamWriter" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_getStreamWriter" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableDataSet_getStreamWriter" "', argument " "4"" of type '" "imebra::tagVR_t""'");
  } 
  arg4 = static_cast< imebra::tagVR_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getStreamWriter((imebra::TagId const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::StreamWriter(static_cast< const imebra::StreamWriter& >(result))), SWIGTYPE_p_imebra__StreamWriter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getStreamWriter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::StreamWriter > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_getStreamWriter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_getStreamWriter" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_getStreamWriter" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_getStreamWriter" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_getStreamWriter" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getStreamWriter((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::StreamWriter(static_cast< const imebra::StreamWriter& >(result))), SWIGTYPE_p_imebra__StreamWriter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getStreamWriter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MutableDataSet_getStreamWriter__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MutableDataSet_getStreamWriter__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MutableDataSet_getStreamWriter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::getStreamWriter(imebra::TagId const &,size_t,imebra::tagVR_t)\n"
    "    imebra::MutableDataSet::getStreamWriter(imebra::TagId const &,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_appendSequenceItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::MutableDataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableDataSet_appendSequenceItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_appendSequenceItem" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_appendSequenceItem" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_appendSequenceItem" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->appendSequenceItem((imebra::TagId const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::MutableDataSet(static_cast< const imebra::MutableDataSet& >(result))), SWIGTYPE_p_imebra__MutableDataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getWritingDataHandler__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< imebra::WritingDataHandler > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MutableDataSet_getWritingDataHandler",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_getWritingDataHandler" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_getWritingDataHandler" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_getWritingDataHandler" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_getWritingDataHandler" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableDataSet_getWritingDataHandler" "', argument " "4"" of type '" "imebra::tagVR_t""'");
  } 
  arg4 = static_cast< imebra::tagVR_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getWritingDataHandler((imebra::TagId const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::WritingDataHandler(static_cast< const imebra::WritingDataHandler& >(result))), SWIGTYPE_p_imebra__WritingDataHandler, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getWritingDataHandler__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::WritingDataHandler > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_getWritingDataHandler",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_getWritingDataHandler" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_getWritingDataHandler" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_getWritingDataHandler" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_getWritingDataHandler" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getWritingDataHandler((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::WritingDataHandler(static_cast< const imebra::WritingDataHandler& >(result))), SWIGTYPE_p_imebra__WritingDataHandler, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getWritingDataHandler(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MutableDataSet_getWritingDataHandler__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MutableDataSet_getWritingDataHandler__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MutableDataSet_getWritingDataHandler'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::getWritingDataHandler(imebra::TagId const &,size_t,imebra::tagVR_t)\n"
    "    imebra::MutableDataSet::getWritingDataHandler(imebra::TagId const &,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getWritingDataHandlerNumeric__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MutableDataSet_getWritingDataHandlerNumeric",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_getWritingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_getWritingDataHandlerNumeric" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_getWritingDataHandlerNumeric" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_getWritingDataHandlerNumeric" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableDataSet_getWritingDataHandlerNumeric" "', argument " "4"" of type '" "imebra::tagVR_t""'");
  } 
  arg4 = static_cast< imebra::tagVR_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getWritingDataHandlerNumeric((imebra::TagId const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::WritingDataHandlerNumeric(static_cast< const imebra::WritingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__WritingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getWritingDataHandlerNumeric__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_getWritingDataHandlerNumeric",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_getWritingDataHandlerNumeric" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_getWritingDataHandlerNumeric" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_getWritingDataHandlerNumeric" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_getWritingDataHandlerNumeric" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getWritingDataHandlerNumeric((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::WritingDataHandlerNumeric(static_cast< const imebra::WritingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__WritingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getWritingDataHandlerNumeric(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MutableDataSet_getWritingDataHandlerNumeric__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MutableDataSet_getWritingDataHandlerNumeric__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MutableDataSet_getWritingDataHandlerNumeric'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::getWritingDataHandlerNumeric(imebra::TagId const &,size_t,imebra::tagVR_t)\n"
    "    imebra::MutableDataSet::getWritingDataHandlerNumeric(imebra::TagId const &,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getWritingDataHandlerRaw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MutableDataSet_getWritingDataHandlerRaw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_getWritingDataHandlerRaw" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_getWritingDataHandlerRaw" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_getWritingDataHandlerRaw" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_getWritingDataHandlerRaw" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableDataSet_getWritingDataHandlerRaw" "', argument " "4"" of type '" "imebra::tagVR_t""'");
  } 
  arg4 = static_cast< imebra::tagVR_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getWritingDataHandlerRaw((imebra::TagId const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::WritingDataHandlerNumeric(static_cast< const imebra::WritingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__WritingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getWritingDataHandlerRaw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_getWritingDataHandlerRaw",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_getWritingDataHandlerRaw" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_getWritingDataHandlerRaw" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_getWritingDataHandlerRaw" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_getWritingDataHandlerRaw" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getWritingDataHandlerRaw((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::WritingDataHandlerNumeric(static_cast< const imebra::WritingDataHandlerNumeric& >(result))), SWIGTYPE_p_imebra__WritingDataHandlerNumeric, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_getWritingDataHandlerRaw(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MutableDataSet_getWritingDataHandlerRaw__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MutableDataSet_getWritingDataHandlerRaw__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MutableDataSet_getWritingDataHandlerRaw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::getWritingDataHandlerRaw(imebra::TagId const &,size_t,imebra::tagVR_t)\n"
    "    imebra::MutableDataSet::getWritingDataHandlerRaw(imebra::TagId const &,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setSignedLong__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int32_t arg3 ;
  imebra::tagVR_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MutableDataSet_setSignedLong",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setSignedLong" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setSignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setSignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_setSignedLong" "', argument " "3"" of type '" "std::int32_t""'");
  } 
  arg3 = static_cast< std::int32_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableDataSet_setSignedLong" "', argument " "4"" of type '" "imebra::tagVR_t""'");
  } 
  arg4 = static_cast< imebra::tagVR_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setSignedLong((imebra::TagId const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setSignedLong__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_setSignedLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setSignedLong" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setSignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setSignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_setSignedLong" "', argument " "3"" of type '" "std::int32_t""'");
  } 
  arg3 = static_cast< std::int32_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setSignedLong((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setSignedLong(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MutableDataSet_setSignedLong__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MutableDataSet_setSignedLong__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MutableDataSet_setSignedLong'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::setSignedLong(imebra::TagId const &,std::int32_t,imebra::tagVR_t)\n"
    "    imebra::MutableDataSet::setSignedLong(imebra::TagId const &,std::int32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setUnsignedLong__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint32_t arg3 ;
  imebra::tagVR_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MutableDataSet_setUnsignedLong",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setUnsignedLong" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setUnsignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setUnsignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_setUnsignedLong" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableDataSet_setUnsignedLong" "', argument " "4"" of type '" "imebra::tagVR_t""'");
  } 
  arg4 = static_cast< imebra::tagVR_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setUnsignedLong((imebra::TagId const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setUnsignedLong__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_setUnsignedLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setUnsignedLong" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setUnsignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setUnsignedLong" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_setUnsignedLong" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setUnsignedLong((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setUnsignedLong(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MutableDataSet_setUnsignedLong__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MutableDataSet_setUnsignedLong__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MutableDataSet_setUnsignedLong'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::setUnsignedLong(imebra::TagId const &,std::uint32_t,imebra::tagVR_t)\n"
    "    imebra::MutableDataSet::setUnsignedLong(imebra::TagId const &,std::uint32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  double arg3 ;
  imebra::tagVR_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MutableDataSet_setDouble",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setDouble" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setDouble" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setDouble" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_setDouble" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableDataSet_setDouble" "', argument " "4"" of type '" "imebra::tagVR_t""'");
  } 
  arg4 = static_cast< imebra::tagVR_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setDouble((imebra::TagId const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_setDouble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setDouble" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setDouble" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setDouble" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MutableDataSet_setDouble" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setDouble((imebra::TagId const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setDouble(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MutableDataSet_setDouble__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MutableDataSet_setDouble__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MutableDataSet_setDouble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::setDouble(imebra::TagId const &,double,imebra::tagVR_t)\n"
    "    imebra::MutableDataSet::setDouble(imebra::TagId const &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::string *arg3 = 0 ;
  imebra::tagVR_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MutableDataSet_setString",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setString" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setString" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setString" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MutableDataSet_setString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableDataSet_setString" "', argument " "4"" of type '" "imebra::tagVR_t""'");
  } 
  arg4 = static_cast< imebra::tagVR_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setString((imebra::TagId const &)*arg2,(std::string const &)*arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_setString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setString" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setString" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setString" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MutableDataSet_setString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setString((imebra::TagId const &)*arg2,(std::string const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MutableDataSet_setString__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MutableDataSet_setString__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MutableDataSet_setString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::setString(imebra::TagId const &,std::string const &,imebra::tagVR_t)\n"
    "    imebra::MutableDataSet::setString(imebra::TagId const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setAge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Age *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_setAge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setAge" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setAge" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setAge" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__Age,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MutableDataSet_setAge" "', argument " "3"" of type '" "imebra::Age const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setAge" "', argument " "3"" of type '" "imebra::Age const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::Age * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setAge((imebra::TagId const &)*arg2,(imebra::Age const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setDate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Date *arg3 = 0 ;
  imebra::tagVR_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MutableDataSet_setDate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setDate" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setDate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setDate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MutableDataSet_setDate" "', argument " "3"" of type '" "imebra::Date const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setDate" "', argument " "3"" of type '" "imebra::Date const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::Date * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MutableDataSet_setDate" "', argument " "4"" of type '" "imebra::tagVR_t""'");
  } 
  arg4 = static_cast< imebra::tagVR_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setDate((imebra::TagId const &)*arg2,(imebra::Date const &)*arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setDate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Date *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_setDate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setDate" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setDate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setDate" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__Date,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MutableDataSet_setDate" "', argument " "3"" of type '" "imebra::Date const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setDate" "', argument " "3"" of type '" "imebra::Date const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::Date * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setDate((imebra::TagId const &)*arg2,(imebra::Date const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setDate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_imebra__Date, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MutableDataSet_setDate__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__TagId, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_imebra__Date, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MutableDataSet_setDate__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MutableDataSet_setDate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDataSet::setDate(imebra::TagId const &,imebra::Date const &,imebra::tagVR_t)\n"
    "    imebra::MutableDataSet::setDate(imebra::TagId const &,imebra::Date const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MutableDataSet_setPatientName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::PatientName *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MutableDataSet_setPatientName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDataSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDataSet_setPatientName" "', argument " "1"" of type '" "imebra::MutableDataSet *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDataSet_setPatientName" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setPatientName" "', argument " "2"" of type '" "imebra::TagId const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::TagId * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__PatientName,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MutableDataSet_setPatientName" "', argument " "3"" of type '" "imebra::PatientName const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDataSet_setPatientName" "', argument " "3"" of type '" "imebra::PatientName const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::PatientName * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setPatientName((imebra::TagId const &)*arg2,(imebra::PatientName const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MutableDataSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MutableDataSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CodecFactory_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamReader *arg1 = 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodecFactory_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__StreamReader,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodecFactory_load" "', argument " "1"" of type '" "imebra::StreamReader &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_load" "', argument " "1"" of type '" "imebra::StreamReader &""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamReader * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodecFactory_load" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::CodecFactory::load(*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodecFactory_load__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamReader *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodecFactory_load",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__StreamReader,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodecFactory_load" "', argument " "1"" of type '" "imebra::StreamReader &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_load" "', argument " "1"" of type '" "imebra::StreamReader &""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamReader * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::CodecFactory::load(*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodecFactory_load__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  size_t arg2 ;
  int res1 = SWIG_OLDOBJ ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodecFactory_load",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodecFactory_load" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_load" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodecFactory_load" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::CodecFactory::load((std::string const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodecFactory_load__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CodecFactory_load",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodecFactory_load" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_load" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::CodecFactory::load((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodecFactory_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__StreamReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CodecFactory_load__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CodecFactory_load__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__StreamReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CodecFactory_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CodecFactory_load__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CodecFactory_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CodecFactory::load(imebra::StreamReader &,size_t)\n"
    "    imebra::CodecFactory::load(imebra::StreamReader &)\n"
    "    imebra::CodecFactory::load(std::string const &,size_t)\n"
    "    imebra::CodecFactory::load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CodecFactory_saveImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::StreamWriter *arg1 = 0 ;
  imebra::Image *arg2 = 0 ;
  std::string *arg3 = 0 ;
  imebra::imageQuality_t arg4 ;
  std::uint32_t arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:CodecFactory_saveImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__StreamWriter,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodecFactory_saveImage" "', argument " "1"" of type '" "imebra::StreamWriter &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_saveImage" "', argument " "1"" of type '" "imebra::StreamWriter &""'"); 
  }
  arg1 = reinterpret_cast< imebra::StreamWriter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodecFactory_saveImage" "', argument " "2"" of type '" "imebra::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_saveImage" "', argument " "2"" of type '" "imebra::Image const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::Image * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CodecFactory_saveImage" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_saveImage" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CodecFactory_saveImage" "', argument " "4"" of type '" "imebra::imageQuality_t""'");
  } 
  arg4 = static_cast< imebra::imageQuality_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CodecFactory_saveImage" "', argument " "5"" of type '" "std::uint32_t""'");
  } 
  arg5 = static_cast< std::uint32_t >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CodecFactory_saveImage" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CodecFactory_saveImage" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CodecFactory_saveImage" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CodecFactory_saveImage" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        imebra::CodecFactory::saveImage(*arg1,(imebra::Image const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodecFactory_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = 0 ;
  imebra::StreamWriter *arg2 = 0 ;
  imebra::codecType_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CodecFactory_save",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodecFactory_save" "', argument " "1"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_save" "', argument " "1"" of type '" "imebra::DataSet const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__StreamWriter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodecFactory_save" "', argument " "2"" of type '" "imebra::StreamWriter &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_save" "', argument " "2"" of type '" "imebra::StreamWriter &""'"); 
  }
  arg2 = reinterpret_cast< imebra::StreamWriter * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CodecFactory_save" "', argument " "3"" of type '" "imebra::codecType_t""'");
  } 
  arg3 = static_cast< imebra::codecType_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        imebra::CodecFactory::save((imebra::DataSet const &)*arg1,*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodecFactory_save__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::codecType_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CodecFactory_save",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodecFactory_save" "', argument " "1"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_save" "', argument " "1"" of type '" "imebra::DataSet const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodecFactory_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodecFactory_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CodecFactory_save" "', argument " "3"" of type '" "imebra::codecType_t""'");
  } 
  arg3 = static_cast< imebra::codecType_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        imebra::CodecFactory::save((imebra::DataSet const &)*arg1,(std::string const &)*arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CodecFactory_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_imebra__StreamWriter, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CodecFactory_save__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CodecFactory_save__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CodecFactory_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CodecFactory::save(imebra::DataSet const &,imebra::StreamWriter &,imebra::codecType_t)\n"
    "    imebra::CodecFactory::save(imebra::DataSet const &,std::string const &,imebra::codecType_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CodecFactory_setMaximumImageSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::uint32_t arg1 ;
  std::uint32_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CodecFactory_setMaximumImageSize",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CodecFactory_setMaximumImageSize" "', argument " "1"" of type '" "std::uint32_t""'");
  } 
  arg1 = static_cast< std::uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CodecFactory_setMaximumImageSize" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        imebra::CodecFactory::setMaximumImageSize(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CodecFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CodecFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CodecFactory")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CodecFactory *)new imebra::CodecFactory();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CodecFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CodecFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CodecFactory *arg1 = (imebra::CodecFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CodecFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CodecFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CodecFactory" "', argument " "1"" of type '" "imebra::CodecFactory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CodecFactory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CodecFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CodecFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TCPAddress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPAddress *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TCPAddress *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TCPAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TCPAddress,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TCPAddress" "', argument " "1"" of type '" "imebra::TCPAddress const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPAddress" "', argument " "1"" of type '" "imebra::TCPAddress const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPAddress * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TCPAddress *)new imebra::TCPAddress((imebra::TCPAddress const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TCPAddress, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TCPAddress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPAddress *arg1 = (imebra::TCPAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TCPAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPAddress, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TCPAddress" "', argument " "1"" of type '" "imebra::TCPAddress *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPAddress * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCPAddress_getNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPAddress *arg1 = (imebra::TCPAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TCPAddress_getNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPAddress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCPAddress_getNode" "', argument " "1"" of type '" "imebra::TCPAddress const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPAddress * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::TCPAddress const *)arg1)->getNode();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCPAddress_getService(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPAddress *arg1 = (imebra::TCPAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TCPAddress_getService",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPAddress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCPAddress_getService" "', argument " "1"" of type '" "imebra::TCPAddress const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPAddress * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::TCPAddress const *)arg1)->getService();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TCPAddress_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__TCPAddress, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TCPActiveAddress__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::TCPActiveAddress *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TCPActiveAddress",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TCPActiveAddress" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPActiveAddress" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TCPActiveAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPActiveAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TCPActiveAddress *)new imebra::TCPActiveAddress((std::string const &)*arg1,(std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TCPActiveAddress, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TCPActiveAddress__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPActiveAddress *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TCPActiveAddress *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TCPActiveAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TCPActiveAddress,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TCPActiveAddress" "', argument " "1"" of type '" "imebra::TCPActiveAddress const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPActiveAddress" "', argument " "1"" of type '" "imebra::TCPActiveAddress const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPActiveAddress * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TCPActiveAddress *)new imebra::TCPActiveAddress((imebra::TCPActiveAddress const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TCPActiveAddress, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TCPActiveAddress(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__TCPActiveAddress, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TCPActiveAddress__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TCPActiveAddress__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TCPActiveAddress'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::TCPActiveAddress::TCPActiveAddress(std::string const &,std::string const &)\n"
    "    imebra::TCPActiveAddress::TCPActiveAddress(imebra::TCPActiveAddress const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TCPActiveAddress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPActiveAddress *arg1 = (imebra::TCPActiveAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TCPActiveAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPActiveAddress, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TCPActiveAddress" "', argument " "1"" of type '" "imebra::TCPActiveAddress *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPActiveAddress * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TCPActiveAddress_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__TCPActiveAddress, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TCPPassiveAddress__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::TCPPassiveAddress *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TCPPassiveAddress",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TCPPassiveAddress" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPPassiveAddress" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TCPPassiveAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPPassiveAddress" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TCPPassiveAddress *)new imebra::TCPPassiveAddress((std::string const &)*arg1,(std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TCPPassiveAddress, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TCPPassiveAddress__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPPassiveAddress *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TCPPassiveAddress *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TCPPassiveAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TCPPassiveAddress,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TCPPassiveAddress" "', argument " "1"" of type '" "imebra::TCPPassiveAddress const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPPassiveAddress" "', argument " "1"" of type '" "imebra::TCPPassiveAddress const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPPassiveAddress * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TCPPassiveAddress *)new imebra::TCPPassiveAddress((imebra::TCPPassiveAddress const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TCPPassiveAddress, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TCPPassiveAddress(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__TCPPassiveAddress, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TCPPassiveAddress__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TCPPassiveAddress__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TCPPassiveAddress'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::TCPPassiveAddress::TCPPassiveAddress(std::string const &,std::string const &)\n"
    "    imebra::TCPPassiveAddress::TCPPassiveAddress(imebra::TCPPassiveAddress const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TCPPassiveAddress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPPassiveAddress *arg1 = (imebra::TCPPassiveAddress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TCPPassiveAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPPassiveAddress, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TCPPassiveAddress" "', argument " "1"" of type '" "imebra::TCPPassiveAddress *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPPassiveAddress * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TCPPassiveAddress_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__TCPPassiveAddress, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TCPListener__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPPassiveAddress *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TCPListener *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TCPListener",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TCPPassiveAddress,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TCPListener" "', argument " "1"" of type '" "imebra::TCPPassiveAddress const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPListener" "', argument " "1"" of type '" "imebra::TCPPassiveAddress const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPPassiveAddress * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TCPListener *)new imebra::TCPListener((imebra::TCPPassiveAddress const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TCPListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TCPListener__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPListener *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TCPListener *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TCPListener",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TCPListener,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TCPListener" "', argument " "1"" of type '" "imebra::TCPListener const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPListener" "', argument " "1"" of type '" "imebra::TCPListener const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPListener * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TCPListener *)new imebra::TCPListener((imebra::TCPListener const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TCPListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TCPListener(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__TCPPassiveAddress, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TCPListener__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__TCPListener, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TCPListener__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TCPListener'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::TCPListener::TCPListener(imebra::TCPPassiveAddress const &)\n"
    "    imebra::TCPListener::TCPListener(imebra::TCPListener const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TCPListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPListener *arg1 = (imebra::TCPListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TCPListener",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TCPListener" "', argument " "1"" of type '" "imebra::TCPListener *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPListener * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCPListener_waitForConnection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPListener *arg1 = (imebra::TCPListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::TCPStream > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TCPListener_waitForConnection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCPListener_waitForConnection" "', argument " "1"" of type '" "imebra::TCPListener *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPListener * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->waitForConnection();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::TCPStream(static_cast< const imebra::TCPStream& >(result))), SWIGTYPE_p_imebra__TCPStream, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCPListener_terminate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPListener *arg1 = (imebra::TCPListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TCPListener_terminate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCPListener_terminate" "', argument " "1"" of type '" "imebra::TCPListener *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPListener * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->terminate();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TCPListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__TCPListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TCPStream__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPActiveAddress *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TCPStream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TCPStream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TCPActiveAddress,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TCPStream" "', argument " "1"" of type '" "imebra::TCPActiveAddress const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPStream" "', argument " "1"" of type '" "imebra::TCPActiveAddress const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPActiveAddress * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TCPStream *)new imebra::TCPStream((imebra::TCPActiveAddress const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TCPStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TCPStream__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPStream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TCPStream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TCPStream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TCPStream,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TCPStream" "', argument " "1"" of type '" "imebra::TCPStream const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TCPStream" "', argument " "1"" of type '" "imebra::TCPStream const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPStream * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TCPStream *)new imebra::TCPStream((imebra::TCPStream const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TCPStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TCPStream(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__TCPActiveAddress, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TCPStream__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__TCPStream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TCPStream__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TCPStream'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::TCPStream::TCPStream(imebra::TCPActiveAddress const &)\n"
    "    imebra::TCPStream::TCPStream(imebra::TCPStream const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TCPStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TCPStream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPStream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TCPStream" "', argument " "1"" of type '" "imebra::TCPStream *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPStream * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCPStream_getPeerAddress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::TCPAddress > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TCPStream_getPeerAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCPStream_getPeerAddress" "', argument " "1"" of type '" "imebra::TCPStream const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPStream * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::TCPStream const *)arg1)->getPeerAddress();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::TCPAddress(static_cast< const imebra::TCPAddress& >(result))), SWIGTYPE_p_imebra__TCPAddress, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCPStream_getStreamInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::BaseStreamInput > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TCPStream_getStreamInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCPStream_getStreamInput" "', argument " "1"" of type '" "imebra::TCPStream *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPStream * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getStreamInput();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::BaseStreamInput(static_cast< const imebra::BaseStreamInput& >(result))), SWIGTYPE_p_imebra__BaseStreamInput, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCPStream_getStreamOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::BaseStreamOutput > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TCPStream_getStreamOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TCPStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCPStream_getStreamOutput" "', argument " "1"" of type '" "imebra::TCPStream *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TCPStream * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getStreamOutput();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::BaseStreamOutput(static_cast< const imebra::BaseStreamOutput& >(result))), SWIGTYPE_p_imebra__BaseStreamOutput, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TCPStream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__TCPStream, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PipeStream__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::PipeStream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PipeStream",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PipeStream" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::PipeStream *)new imebra::PipeStream(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__PipeStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PipeStream__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PipeStream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::PipeStream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PipeStream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__PipeStream,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PipeStream" "', argument " "1"" of type '" "imebra::PipeStream const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PipeStream" "', argument " "1"" of type '" "imebra::PipeStream const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::PipeStream * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::PipeStream *)new imebra::PipeStream((imebra::PipeStream const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__PipeStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PipeStream(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__PipeStream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PipeStream__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PipeStream__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PipeStream'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::PipeStream::PipeStream(size_t)\n"
    "    imebra::PipeStream::PipeStream(imebra::PipeStream const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PipeStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PipeStream *arg1 = (imebra::PipeStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PipeStream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PipeStream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PipeStream" "', argument " "1"" of type '" "imebra::PipeStream *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PipeStream * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PipeStream_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PipeStream *arg1 = (imebra::PipeStream *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PipeStream_close",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PipeStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PipeStream_close" "', argument " "1"" of type '" "imebra::PipeStream *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PipeStream * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PipeStream_close" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->close(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PipeStream_getStreamInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PipeStream *arg1 = (imebra::PipeStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::BaseStreamInput > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PipeStream_getStreamInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PipeStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PipeStream_getStreamInput" "', argument " "1"" of type '" "imebra::PipeStream *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PipeStream * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getStreamInput();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::BaseStreamInput(static_cast< const imebra::BaseStreamInput& >(result))), SWIGTYPE_p_imebra__BaseStreamInput, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PipeStream_getStreamOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PipeStream *arg1 = (imebra::PipeStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::BaseStreamOutput > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PipeStream_getStreamOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PipeStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PipeStream_getStreamOutput" "', argument " "1"" of type '" "imebra::PipeStream *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PipeStream * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getStreamOutput();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::BaseStreamOutput(static_cast< const imebra::BaseStreamOutput& >(result))), SWIGTYPE_p_imebra__BaseStreamOutput, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PipeStream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__PipeStream, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Transform *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::Transform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Transform",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Transform,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Transform" "', argument " "1"" of type '" "imebra::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "1"" of type '" "imebra::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Transform * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Transform *)new imebra::Transform((imebra::Transform const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Transform, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Transform",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Transform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Transform" "', argument " "1"" of type '" "imebra::Transform *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Transform * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_isEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Transform_isEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_isEmpty" "', argument " "1"" of type '" "imebra::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Transform * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::Transform const *)arg1)->isEmpty();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_allocateOutputImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  imebra::Image *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< imebra::MutableImage > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Transform_allocateOutputImage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_allocateOutputImage" "', argument " "1"" of type '" "imebra::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_allocateOutputImage" "', argument " "2"" of type '" "imebra::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_allocateOutputImage" "', argument " "2"" of type '" "imebra::Image const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::Image * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transform_allocateOutputImage" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Transform_allocateOutputImage" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::Transform const *)arg1)->allocateOutputImage((imebra::Image const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::MutableImage(static_cast< const imebra::MutableImage& >(result))), SWIGTYPE_p_imebra__MutableImage, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transform_runTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  imebra::Image *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::MutableImage *arg7 = 0 ;
  std::uint32_t arg8 ;
  std::uint32_t arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  unsigned int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Transform_runTransform",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_runTransform" "', argument " "1"" of type '" "imebra::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_runTransform" "', argument " "2"" of type '" "imebra::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_runTransform" "', argument " "2"" of type '" "imebra::Image const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::Image * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transform_runTransform" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Transform_runTransform" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Transform_runTransform" "', argument " "5"" of type '" "std::uint32_t""'");
  } 
  arg5 = static_cast< std::uint32_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Transform_runTransform" "', argument " "6"" of type '" "std::uint32_t""'");
  } 
  arg6 = static_cast< std::uint32_t >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_imebra__MutableImage,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Transform_runTransform" "', argument " "7"" of type '" "imebra::MutableImage &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_runTransform" "', argument " "7"" of type '" "imebra::MutableImage &""'"); 
  }
  arg7 = reinterpret_cast< imebra::MutableImage * >(argp7);
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Transform_runTransform" "', argument " "8"" of type '" "std::uint32_t""'");
  } 
  arg8 = static_cast< std::uint32_t >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Transform_runTransform" "', argument " "9"" of type '" "std::uint32_t""'");
  } 
  arg9 = static_cast< std::uint32_t >(val9);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((imebra::Transform const *)arg1)->runTransform((imebra::Image const &)*arg2,arg3,arg4,arg5,arg6,*arg7,arg8,arg9);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Transform_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__Transform, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TransformHighBit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TransformHighBit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TransformHighBit")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TransformHighBit *)new imebra::TransformHighBit();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TransformHighBit, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransformHighBit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TransformHighBit *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TransformHighBit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TransformHighBit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TransformHighBit,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformHighBit" "', argument " "1"" of type '" "imebra::TransformHighBit const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformHighBit" "', argument " "1"" of type '" "imebra::TransformHighBit const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TransformHighBit * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TransformHighBit *)new imebra::TransformHighBit((imebra::TransformHighBit const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TransformHighBit, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransformHighBit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TransformHighBit__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__TransformHighBit, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TransformHighBit__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TransformHighBit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::TransformHighBit::TransformHighBit()\n"
    "    imebra::TransformHighBit::TransformHighBit(imebra::TransformHighBit const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TransformHighBit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TransformHighBit *arg1 = (imebra::TransformHighBit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TransformHighBit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TransformHighBit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransformHighBit" "', argument " "1"" of type '" "imebra::TransformHighBit *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TransformHighBit * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransformHighBit_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__TransformHighBit, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TransformsChain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TransformsChain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TransformsChain")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TransformsChain *)new imebra::TransformsChain();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TransformsChain, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransformsChain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TransformsChain *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::TransformsChain *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TransformsChain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TransformsChain,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformsChain" "', argument " "1"" of type '" "imebra::TransformsChain const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformsChain" "', argument " "1"" of type '" "imebra::TransformsChain const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TransformsChain * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::TransformsChain *)new imebra::TransformsChain((imebra::TransformsChain const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__TransformsChain, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransformsChain(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TransformsChain__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__TransformsChain, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TransformsChain__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TransformsChain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::TransformsChain::TransformsChain()\n"
    "    imebra::TransformsChain::TransformsChain(imebra::TransformsChain const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TransformsChain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TransformsChain *arg1 = (imebra::TransformsChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TransformsChain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TransformsChain, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransformsChain" "', argument " "1"" of type '" "imebra::TransformsChain *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TransformsChain * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransformsChain_addTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TransformsChain *arg1 = (imebra::TransformsChain *) 0 ;
  imebra::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TransformsChain_addTransform",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__TransformsChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformsChain_addTransform" "', argument " "1"" of type '" "imebra::TransformsChain *""'"); 
  }
  arg1 = reinterpret_cast< imebra::TransformsChain * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__Transform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformsChain_addTransform" "', argument " "2"" of type '" "imebra::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformsChain_addTransform" "', argument " "2"" of type '" "imebra::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::Transform * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->addTransform((imebra::Transform const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransformsChain_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__TransformsChain, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ModalityVOILUT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::ModalityVOILUT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ModalityVOILUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ModalityVOILUT" "', argument " "1"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModalityVOILUT" "', argument " "1"" of type '" "imebra::DataSet const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::ModalityVOILUT *)new imebra::ModalityVOILUT((imebra::DataSet const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__ModalityVOILUT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModalityVOILUT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ModalityVOILUT *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::ModalityVOILUT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ModalityVOILUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__ModalityVOILUT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ModalityVOILUT" "', argument " "1"" of type '" "imebra::ModalityVOILUT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModalityVOILUT" "', argument " "1"" of type '" "imebra::ModalityVOILUT const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::ModalityVOILUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::ModalityVOILUT *)new imebra::ModalityVOILUT((imebra::ModalityVOILUT const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__ModalityVOILUT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ModalityVOILUT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ModalityVOILUT__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__ModalityVOILUT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ModalityVOILUT__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ModalityVOILUT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::ModalityVOILUT::ModalityVOILUT(imebra::DataSet const &)\n"
    "    imebra::ModalityVOILUT::ModalityVOILUT(imebra::ModalityVOILUT const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ModalityVOILUT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ModalityVOILUT *arg1 = (imebra::ModalityVOILUT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ModalityVOILUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ModalityVOILUT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ModalityVOILUT" "', argument " "1"" of type '" "imebra::ModalityVOILUT *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ModalityVOILUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ModalityVOILUT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__ModalityVOILUT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VOILUT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::VOILUT *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::VOILUT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VOILUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__VOILUT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VOILUT" "', argument " "1"" of type '" "imebra::VOILUT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VOILUT" "', argument " "1"" of type '" "imebra::VOILUT const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::VOILUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::VOILUT *)new imebra::VOILUT((imebra::VOILUT const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__VOILUT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VOILUT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::LUT *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::VOILUT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VOILUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__LUT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VOILUT" "', argument " "1"" of type '" "imebra::LUT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VOILUT" "', argument " "1"" of type '" "imebra::LUT const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::LUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::VOILUT *)new imebra::VOILUT((imebra::LUT const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__VOILUT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VOILUT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::VOIDescription *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::VOILUT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VOILUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__VOIDescription,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VOILUT" "', argument " "1"" of type '" "imebra::VOIDescription const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VOILUT" "', argument " "1"" of type '" "imebra::VOIDescription const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::VOIDescription * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::VOILUT *)new imebra::VOILUT((imebra::VOIDescription const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__VOILUT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VOILUT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__VOILUT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VOILUT__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__LUT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VOILUT__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__VOIDescription, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VOILUT__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VOILUT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::VOILUT::VOILUT(imebra::VOILUT const &)\n"
    "    imebra::VOILUT::VOILUT(imebra::LUT const &)\n"
    "    imebra::VOILUT::VOILUT(imebra::VOIDescription const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VOILUT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::VOILUT *arg1 = (imebra::VOILUT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VOILUT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__VOILUT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VOILUT" "', argument " "1"" of type '" "imebra::VOILUT *""'"); 
  }
  arg1 = reinterpret_cast< imebra::VOILUT * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VOILUT_getOptimalVOI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Image *arg1 = 0 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  imebra::VOIDescription result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VOILUT_getOptimalVOI",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Image,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VOILUT_getOptimalVOI" "', argument " "1"" of type '" "imebra::Image const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VOILUT_getOptimalVOI" "', argument " "1"" of type '" "imebra::Image const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Image * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VOILUT_getOptimalVOI" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VOILUT_getOptimalVOI" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VOILUT_getOptimalVOI" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VOILUT_getOptimalVOI" "', argument " "5"" of type '" "std::uint32_t""'");
  } 
  arg5 = static_cast< std::uint32_t >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::VOILUT::getOptimalVOI((imebra::Image const &)*arg1,arg2,arg3,arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::VOIDescription(static_cast< const imebra::VOIDescription& >(result))), SWIGTYPE_p_imebra__VOIDescription, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VOILUT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__VOILUT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ColorTransformsFactory_normalizeColorSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorTransformsFactory_normalizeColorSpace",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTransformsFactory_normalizeColorSpace" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorTransformsFactory_normalizeColorSpace" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::ColorTransformsFactory::normalizeColorSpace((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorTransformsFactory_isMonochrome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorTransformsFactory_isMonochrome",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTransformsFactory_isMonochrome" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorTransformsFactory_isMonochrome" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)imebra::ColorTransformsFactory::isMonochrome((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorTransformsFactory_isSubsampledX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorTransformsFactory_isSubsampledX",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTransformsFactory_isSubsampledX" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorTransformsFactory_isSubsampledX" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)imebra::ColorTransformsFactory::isSubsampledX((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorTransformsFactory_isSubsampledY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorTransformsFactory_isSubsampledY",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTransformsFactory_isSubsampledY" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorTransformsFactory_isSubsampledY" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)imebra::ColorTransformsFactory::isSubsampledY((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorTransformsFactory_canSubsample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorTransformsFactory_canSubsample",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTransformsFactory_canSubsample" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorTransformsFactory_canSubsample" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)imebra::ColorTransformsFactory::canSubsample((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorTransformsFactory_makeSubsampled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ColorTransformsFactory_makeSubsampled",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTransformsFactory_makeSubsampled" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorTransformsFactory_makeSubsampled" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorTransformsFactory_makeSubsampled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ColorTransformsFactory_makeSubsampled" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::ColorTransformsFactory::makeSubsampled((std::string const &)*arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorTransformsFactory_getNumberOfChannels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ColorTransformsFactory_getNumberOfChannels",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTransformsFactory_getNumberOfChannels" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorTransformsFactory_getNumberOfChannels" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)imebra::ColorTransformsFactory::getNumberOfChannels((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorTransformsFactory_getTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::Transform > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ColorTransformsFactory_getTransform",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTransformsFactory_getTransform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorTransformsFactory_getTransform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ColorTransformsFactory_getTransform" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ColorTransformsFactory_getTransform" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::ColorTransformsFactory::getTransform((std::string const &)*arg1,(std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Transform(static_cast< const imebra::Transform& >(result))), SWIGTYPE_p_imebra__Transform, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ColorTransformsFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ColorTransformsFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ColorTransformsFactory")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::ColorTransformsFactory *)new imebra::ColorTransformsFactory();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__ColorTransformsFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ColorTransformsFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::ColorTransformsFactory *arg1 = (imebra::ColorTransformsFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ColorTransformsFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__ColorTransformsFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColorTransformsFactory" "', argument " "1"" of type '" "imebra::ColorTransformsFactory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::ColorTransformsFactory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ColorTransformsFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__ColorTransformsFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DicomDirEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDirEntry *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DicomDirEntry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DicomDirEntry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DicomDirEntry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DicomDirEntry" "', argument " "1"" of type '" "imebra::DicomDirEntry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DicomDirEntry" "', argument " "1"" of type '" "imebra::DicomDirEntry const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DicomDirEntry *)new imebra::DicomDirEntry((imebra::DicomDirEntry const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DicomDirEntry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DicomDirEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DicomDirEntry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDirEntry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DicomDirEntry" "', argument " "1"" of type '" "imebra::DicomDirEntry *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDirEntry_getEntryDataSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDirEntry_getEntryDataSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDirEntry_getEntryDataSet" "', argument " "1"" of type '" "imebra::DicomDirEntry const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DicomDirEntry const *)arg1)->getEntryDataSet();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDirEntry_hasNextEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDirEntry_hasNextEntry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDirEntry_hasNextEntry" "', argument " "1"" of type '" "imebra::DicomDirEntry const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::DicomDirEntry const *)arg1)->hasNextEntry();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDirEntry_getNextEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DicomDirEntry > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDirEntry_getNextEntry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDirEntry_getNextEntry" "', argument " "1"" of type '" "imebra::DicomDirEntry const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DicomDirEntry const *)arg1)->getNextEntry();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DicomDirEntry(static_cast< const imebra::DicomDirEntry& >(result))), SWIGTYPE_p_imebra__DicomDirEntry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDirEntry_hasChildren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDirEntry_hasChildren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDirEntry_hasChildren" "', argument " "1"" of type '" "imebra::DicomDirEntry const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::DicomDirEntry const *)arg1)->hasChildren();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDirEntry_getFirstChildEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DicomDirEntry > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDirEntry_getFirstChildEntry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDirEntry_getFirstChildEntry" "', argument " "1"" of type '" "imebra::DicomDirEntry const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DicomDirEntry const *)arg1)->getFirstChildEntry();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DicomDirEntry(static_cast< const imebra::DicomDirEntry& >(result))), SWIGTYPE_p_imebra__DicomDirEntry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDirEntry_getFileParts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::fileParts_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDirEntry_getFileParts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDirEntry_getFileParts" "', argument " "1"" of type '" "imebra::DicomDirEntry const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DicomDirEntry const *)arg1)->getFileParts();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDirEntry_getTypeString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDirEntry_getTypeString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDirEntry_getTypeString" "', argument " "1"" of type '" "imebra::DicomDirEntry const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DicomDirEntry const *)arg1)->getTypeString();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DicomDirEntry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__DicomDirEntry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MutableDicomDirEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDirEntry *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableDicomDirEntry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableDicomDirEntry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MutableDicomDirEntry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableDicomDirEntry" "', argument " "1"" of type '" "imebra::MutableDicomDirEntry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableDicomDirEntry" "', argument " "1"" of type '" "imebra::MutableDicomDirEntry const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableDicomDirEntry *)new imebra::MutableDicomDirEntry((imebra::MutableDicomDirEntry const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableDicomDirEntry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MutableDicomDirEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDirEntry *arg1 = (imebra::MutableDicomDirEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MutableDicomDirEntry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDicomDirEntry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MutableDicomDirEntry" "', argument " "1"" of type '" "imebra::MutableDicomDirEntry *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDicomDirEntry_getEntryDataSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDirEntry *arg1 = (imebra::MutableDicomDirEntry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::MutableDataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MutableDicomDirEntry_getEntryDataSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDicomDirEntry_getEntryDataSet" "', argument " "1"" of type '" "imebra::MutableDicomDirEntry *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDirEntry * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getEntryDataSet();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::MutableDataSet(static_cast< const imebra::MutableDataSet& >(result))), SWIGTYPE_p_imebra__MutableDataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDicomDirEntry_setNextEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDirEntry *arg1 = (imebra::MutableDicomDirEntry *) 0 ;
  imebra::DicomDirEntry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableDicomDirEntry_setNextEntry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDicomDirEntry_setNextEntry" "', argument " "1"" of type '" "imebra::MutableDicomDirEntry *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDirEntry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__DicomDirEntry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDicomDirEntry_setNextEntry" "', argument " "2"" of type '" "imebra::DicomDirEntry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDicomDirEntry_setNextEntry" "', argument " "2"" of type '" "imebra::DicomDirEntry const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::DicomDirEntry * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setNextEntry((imebra::DicomDirEntry const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDicomDirEntry_setFirstChildEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDirEntry *arg1 = (imebra::MutableDicomDirEntry *) 0 ;
  imebra::DicomDirEntry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableDicomDirEntry_setFirstChildEntry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDicomDirEntry_setFirstChildEntry" "', argument " "1"" of type '" "imebra::MutableDicomDirEntry *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDirEntry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__DicomDirEntry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDicomDirEntry_setFirstChildEntry" "', argument " "2"" of type '" "imebra::DicomDirEntry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDicomDirEntry_setFirstChildEntry" "', argument " "2"" of type '" "imebra::DicomDirEntry const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::DicomDirEntry * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setFirstChildEntry((imebra::DicomDirEntry const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDicomDirEntry_setFileParts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDirEntry *arg1 = (imebra::MutableDicomDirEntry *) 0 ;
  imebra::fileParts_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableDicomDirEntry_setFileParts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDicomDirEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDicomDirEntry_setFileParts" "', argument " "1"" of type '" "imebra::MutableDicomDirEntry *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDirEntry * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDicomDirEntry_setFileParts" "', argument " "2"" of type '" "imebra::fileParts_t const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDicomDirEntry_setFileParts" "', argument " "2"" of type '" "imebra::fileParts_t const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setFileParts((imebra::fileParts_t const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *MutableDicomDirEntry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MutableDicomDirEntry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DicomDir__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DataSet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DicomDir *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DicomDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DicomDir" "', argument " "1"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DicomDir" "', argument " "1"" of type '" "imebra::DataSet const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DataSet * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DicomDir *)new imebra::DicomDir((imebra::DataSet const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DicomDir, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DicomDir__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDir *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DicomDir *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DicomDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DicomDir,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DicomDir" "', argument " "1"" of type '" "imebra::DicomDir const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DicomDir" "', argument " "1"" of type '" "imebra::DicomDir const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDir * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DicomDir *)new imebra::DicomDir((imebra::DicomDir const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DicomDir, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DicomDir(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__DataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DicomDir__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__DicomDir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DicomDir__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DicomDir'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DicomDir::DicomDir(imebra::DataSet const &)\n"
    "    imebra::DicomDir::DicomDir(imebra::DicomDir const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DicomDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DicomDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDir, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DicomDir" "', argument " "1"" of type '" "imebra::DicomDir *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDir * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDir_hasRootEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDir_hasRootEntry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDir, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDir_hasRootEntry" "', argument " "1"" of type '" "imebra::DicomDir const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDir * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::DicomDir const *)arg1)->hasRootEntry();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDir_getFirstRootEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DicomDirEntry > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDir_getFirstRootEntry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDir, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDir_getFirstRootEntry" "', argument " "1"" of type '" "imebra::DicomDir const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDir * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DicomDir const *)arg1)->getFirstRootEntry();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DicomDirEntry(static_cast< const imebra::DicomDirEntry& >(result))), SWIGTYPE_p_imebra__DicomDirEntry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DicomDir_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__DicomDir, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MutableDicomDir__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDir *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MutableDicomDir")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableDicomDir *)new imebra::MutableDicomDir();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableDicomDir, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableDicomDir__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDataSet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableDicomDir *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableDicomDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MutableDataSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableDicomDir" "', argument " "1"" of type '" "imebra::MutableDataSet &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableDicomDir" "', argument " "1"" of type '" "imebra::MutableDataSet &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDataSet * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableDicomDir *)new imebra::MutableDicomDir(*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableDicomDir, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableDicomDir__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDir *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableDicomDir *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableDicomDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MutableDicomDir,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableDicomDir" "', argument " "1"" of type '" "imebra::MutableDicomDir const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableDicomDir" "', argument " "1"" of type '" "imebra::MutableDicomDir const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDir * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableDicomDir *)new imebra::MutableDicomDir((imebra::MutableDicomDir const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableDicomDir, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableDicomDir(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MutableDicomDir__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__MutableDataSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MutableDicomDir__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__MutableDicomDir, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MutableDicomDir__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MutableDicomDir'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableDicomDir::MutableDicomDir()\n"
    "    imebra::MutableDicomDir::MutableDicomDir(imebra::MutableDataSet &)\n"
    "    imebra::MutableDicomDir::MutableDicomDir(imebra::MutableDicomDir const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MutableDicomDir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDir *arg1 = (imebra::MutableDicomDir *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MutableDicomDir",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDicomDir, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MutableDicomDir" "', argument " "1"" of type '" "imebra::MutableDicomDir *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDir * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDicomDir_getNewEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDir *arg1 = (imebra::MutableDicomDir *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::MutableDicomDirEntry > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableDicomDir_getNewEntry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDicomDir, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDicomDir_getNewEntry" "', argument " "1"" of type '" "imebra::MutableDicomDir *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDir * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDicomDir_getNewEntry" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDicomDir_getNewEntry" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getNewEntry((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::MutableDicomDirEntry(static_cast< const imebra::MutableDicomDirEntry& >(result))), SWIGTYPE_p_imebra__MutableDicomDirEntry, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDicomDir_setFirstRootEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDir *arg1 = (imebra::MutableDicomDir *) 0 ;
  imebra::DicomDirEntry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableDicomDir_setFirstRootEntry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDicomDir, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDicomDir_setFirstRootEntry" "', argument " "1"" of type '" "imebra::MutableDicomDir *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDir * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__DicomDirEntry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableDicomDir_setFirstRootEntry" "', argument " "2"" of type '" "imebra::DicomDirEntry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableDicomDir_setFirstRootEntry" "', argument " "2"" of type '" "imebra::DicomDirEntry const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::DicomDirEntry * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setFirstRootEntry((imebra::DicomDirEntry const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableDicomDir_updateDataSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableDicomDir *arg1 = (imebra::MutableDicomDir *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MutableDicomDir_updateDataSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableDicomDir, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableDicomDir_updateDataSet" "', argument " "1"" of type '" "imebra::MutableDicomDir *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableDicomDir * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->updateDataSet();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MutableDicomDir_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MutableDicomDir, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DicomDictionary_getTagDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDictionary_getTagDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDictionary_getTagDescription" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DicomDictionary_getTagDescription" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TagId * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::DicomDictionary::getTagDescription((imebra::TagId const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDictionary_getTagType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::tagVR_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDictionary_getTagType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDictionary_getTagType" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DicomDictionary_getTagType" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TagId * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::tagVR_t)imebra::DicomDictionary::getTagType((imebra::TagId const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDictionary_getMultiplicityMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDictionary_getMultiplicityMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDictionary_getMultiplicityMin" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DicomDictionary_getMultiplicityMin" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TagId * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)imebra::DicomDictionary::getMultiplicityMin((imebra::TagId const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDictionary_getMultiplicityMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDictionary_getMultiplicityMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDictionary_getMultiplicityMax" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DicomDictionary_getMultiplicityMax" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TagId * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)imebra::DicomDictionary::getMultiplicityMax((imebra::TagId const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDictionary_getMultiplicityStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::TagId *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDictionary_getMultiplicityStep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__TagId,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DicomDictionary_getMultiplicityStep" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DicomDictionary_getMultiplicityStep" "', argument " "1"" of type '" "imebra::TagId const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::TagId * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)imebra::DicomDictionary::getMultiplicityStep((imebra::TagId const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDictionary_getWordSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::tagVR_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDictionary_getWordSize",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DicomDictionary_getWordSize" "', argument " "1"" of type '" "imebra::tagVR_t""'");
  } 
  arg1 = static_cast< imebra::tagVR_t >(val1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)imebra::DicomDictionary::getWordSize(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DicomDictionary_getMaxSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::tagVR_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DicomDictionary_getMaxSize",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DicomDictionary_getMaxSize" "', argument " "1"" of type '" "imebra::tagVR_t""'");
  } 
  arg1 = static_cast< imebra::tagVR_t >(val1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)imebra::DicomDictionary::getMaxSize(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DicomDictionary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDictionary *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DicomDictionary")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DicomDictionary *)new imebra::DicomDictionary();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DicomDictionary, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DicomDictionary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DicomDictionary *arg1 = (imebra::DicomDictionary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DicomDictionary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DicomDictionary, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DicomDictionary" "', argument " "1"" of type '" "imebra::DicomDictionary *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DicomDictionary * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DicomDictionary_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__DicomDictionary, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DrawBitmap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DrawBitmap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DrawBitmap")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DrawBitmap *)new imebra::DrawBitmap();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DrawBitmap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DrawBitmap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Transform *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DrawBitmap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DrawBitmap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Transform,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DrawBitmap" "', argument " "1"" of type '" "imebra::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DrawBitmap" "', argument " "1"" of type '" "imebra::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Transform * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DrawBitmap *)new imebra::DrawBitmap((imebra::Transform const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DrawBitmap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DrawBitmap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DrawBitmap *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DrawBitmap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DrawBitmap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DrawBitmap,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DrawBitmap" "', argument " "1"" of type '" "imebra::DrawBitmap const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DrawBitmap" "', argument " "1"" of type '" "imebra::DrawBitmap const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DrawBitmap * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DrawBitmap *)new imebra::DrawBitmap((imebra::DrawBitmap const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DrawBitmap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DrawBitmap(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DrawBitmap__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DrawBitmap__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__DrawBitmap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DrawBitmap__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DrawBitmap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DrawBitmap::DrawBitmap()\n"
    "    imebra::DrawBitmap::DrawBitmap(imebra::Transform const &)\n"
    "    imebra::DrawBitmap::DrawBitmap(imebra::DrawBitmap const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DrawBitmap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DrawBitmap *arg1 = (imebra::DrawBitmap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DrawBitmap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DrawBitmap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DrawBitmap" "', argument " "1"" of type '" "imebra::DrawBitmap *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DrawBitmap * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DrawBitmap_getBitmap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DrawBitmap *arg1 = (imebra::DrawBitmap *) 0 ;
  imebra::Image *arg2 = 0 ;
  imebra::drawBitmapType_t arg3 ;
  std::uint32_t arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  Py_ssize_t size5 = 0 ;
  void *buf5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DrawBitmap_getBitmap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DrawBitmap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DrawBitmap_getBitmap" "', argument " "1"" of type '" "imebra::DrawBitmap *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DrawBitmap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DrawBitmap_getBitmap" "', argument " "2"" of type '" "imebra::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DrawBitmap_getBitmap" "', argument " "2"" of type '" "imebra::Image const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DrawBitmap_getBitmap" "', argument " "3"" of type '" "imebra::drawBitmapType_t""'");
  } 
  arg3 = static_cast< imebra::drawBitmapType_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DrawBitmap_getBitmap" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  {
    res5 = PyObject_AsWriteBuffer(obj4, &buf5, &size5);
    if (res5<0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DrawBitmap_getBitmap" "', argument " "5"" of type '" "(void *STRING, size_t LENGTH)""'");
    }
    arg5 = (char *) buf5;
    arg6 = (size_t) (size5/sizeof(char));
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getBitmap((imebra::Image const &)*arg2,arg3,arg4,arg5,arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DrawBitmap_getBitmap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DrawBitmap *arg1 = (imebra::DrawBitmap *) 0 ;
  imebra::Image *arg2 = 0 ;
  imebra::drawBitmapType_t arg3 ;
  std::uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< imebra::Memory > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DrawBitmap_getBitmap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DrawBitmap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DrawBitmap_getBitmap" "', argument " "1"" of type '" "imebra::DrawBitmap *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DrawBitmap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__Image,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DrawBitmap_getBitmap" "', argument " "2"" of type '" "imebra::Image const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DrawBitmap_getBitmap" "', argument " "2"" of type '" "imebra::Image const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DrawBitmap_getBitmap" "', argument " "3"" of type '" "imebra::drawBitmapType_t""'");
  } 
  arg3 = static_cast< imebra::drawBitmapType_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DrawBitmap_getBitmap" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getBitmap((imebra::Image const &)*arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::Memory(static_cast< const imebra::Memory& >(result))), SWIGTYPE_p_imebra__Memory, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DrawBitmap_getBitmap(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DrawBitmap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DrawBitmap_getBitmap__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__DrawBitmap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              if (argc <= 5) {
                return _wrap_DrawBitmap_getBitmap__SWIG_0(self, args);
              }
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_DrawBitmap_getBitmap__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DrawBitmap_getBitmap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DrawBitmap::getBitmap(imebra::Image const &,imebra::drawBitmapType_t,std::uint32_t,char *,size_t)\n"
    "    imebra::DrawBitmap::getBitmap(imebra::Image const &,imebra::drawBitmapType_t,std::uint32_t)\n");
  return 0;
}


SWIGINTERN PyObject *DrawBitmap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__DrawBitmap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FileStreamInput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  imebra::FileStreamInput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileStreamInput",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileStreamInput" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileStreamInput" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::FileStreamInput *)new imebra::FileStreamInput((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__FileStreamInput, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileStreamInput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::FileStreamInput *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::FileStreamInput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileStreamInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__FileStreamInput,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileStreamInput" "', argument " "1"" of type '" "imebra::FileStreamInput const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileStreamInput" "', argument " "1"" of type '" "imebra::FileStreamInput const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::FileStreamInput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::FileStreamInput *)new imebra::FileStreamInput((imebra::FileStreamInput const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__FileStreamInput, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileStreamInput(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__FileStreamInput, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileStreamInput__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileStreamInput__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FileStreamInput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::FileStreamInput::FileStreamInput(std::string const &)\n"
    "    imebra::FileStreamInput::FileStreamInput(imebra::FileStreamInput const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FileStreamInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::FileStreamInput *arg1 = (imebra::FileStreamInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileStreamInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__FileStreamInput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileStreamInput" "', argument " "1"" of type '" "imebra::FileStreamInput *""'"); 
  }
  arg1 = reinterpret_cast< imebra::FileStreamInput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileStreamInput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__FileStreamInput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FileStreamOutput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  imebra::FileStreamOutput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileStreamOutput",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileStreamOutput" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileStreamOutput" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::FileStreamOutput *)new imebra::FileStreamOutput((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__FileStreamOutput, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileStreamOutput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::FileStreamOutput *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::FileStreamOutput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileStreamOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__FileStreamOutput,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileStreamOutput" "', argument " "1"" of type '" "imebra::FileStreamOutput const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileStreamOutput" "', argument " "1"" of type '" "imebra::FileStreamOutput const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::FileStreamOutput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::FileStreamOutput *)new imebra::FileStreamOutput((imebra::FileStreamOutput const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__FileStreamOutput, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileStreamOutput(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__FileStreamOutput, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileStreamOutput__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileStreamOutput__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FileStreamOutput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::FileStreamOutput::FileStreamOutput(std::string const &)\n"
    "    imebra::FileStreamOutput::FileStreamOutput(imebra::FileStreamOutput const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FileStreamOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::FileStreamOutput *arg1 = (imebra::FileStreamOutput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileStreamOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__FileStreamOutput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileStreamOutput" "', argument " "1"" of type '" "imebra::FileStreamOutput *""'"); 
  }
  arg1 = reinterpret_cast< imebra::FileStreamOutput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileStreamOutput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__FileStreamOutput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MemoryStreamInput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Memory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MemoryStreamInput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MemoryStreamInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Memory,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MemoryStreamInput" "', argument " "1"" of type '" "imebra::Memory const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MemoryStreamInput" "', argument " "1"" of type '" "imebra::Memory const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Memory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MemoryStreamInput *)new imebra::MemoryStreamInput((imebra::Memory const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MemoryStreamInput, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MemoryStreamInput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MemoryStreamInput *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MemoryStreamInput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MemoryStreamInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MemoryStreamInput,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MemoryStreamInput" "', argument " "1"" of type '" "imebra::MemoryStreamInput const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MemoryStreamInput" "', argument " "1"" of type '" "imebra::MemoryStreamInput const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MemoryStreamInput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MemoryStreamInput *)new imebra::MemoryStreamInput((imebra::MemoryStreamInput const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MemoryStreamInput, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MemoryStreamInput(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__Memory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MemoryStreamInput__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__MemoryStreamInput, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MemoryStreamInput__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MemoryStreamInput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MemoryStreamInput::MemoryStreamInput(imebra::Memory const &)\n"
    "    imebra::MemoryStreamInput::MemoryStreamInput(imebra::MemoryStreamInput const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MemoryStreamInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MemoryStreamInput *arg1 = (imebra::MemoryStreamInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MemoryStreamInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MemoryStreamInput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MemoryStreamInput" "', argument " "1"" of type '" "imebra::MemoryStreamInput *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MemoryStreamInput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MemoryStreamInput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MemoryStreamInput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MemoryStreamOutput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableMemory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MemoryStreamOutput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MemoryStreamOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MutableMemory,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MemoryStreamOutput" "', argument " "1"" of type '" "imebra::MutableMemory const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MemoryStreamOutput" "', argument " "1"" of type '" "imebra::MutableMemory const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableMemory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MemoryStreamOutput *)new imebra::MemoryStreamOutput((imebra::MutableMemory const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MemoryStreamOutput, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MemoryStreamOutput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MemoryStreamOutput *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MemoryStreamOutput *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MemoryStreamOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MemoryStreamOutput,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MemoryStreamOutput" "', argument " "1"" of type '" "imebra::MemoryStreamOutput const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MemoryStreamOutput" "', argument " "1"" of type '" "imebra::MemoryStreamOutput const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MemoryStreamOutput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MemoryStreamOutput *)new imebra::MemoryStreamOutput((imebra::MemoryStreamOutput const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MemoryStreamOutput, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MemoryStreamOutput(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__MutableMemory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MemoryStreamOutput__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__MemoryStreamOutput, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MemoryStreamOutput__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MemoryStreamOutput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MemoryStreamOutput::MemoryStreamOutput(imebra::MutableMemory const &)\n"
    "    imebra::MemoryStreamOutput::MemoryStreamOutput(imebra::MemoryStreamOutput const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MemoryStreamOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MemoryStreamOutput *arg1 = (imebra::MemoryStreamOutput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MemoryStreamOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MemoryStreamOutput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MemoryStreamOutput" "', argument " "1"" of type '" "imebra::MemoryStreamOutput *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MemoryStreamOutput * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MemoryStreamOutput_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MemoryStreamOutput, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PresentationContext__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  imebra::PresentationContext *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PresentationContext",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PresentationContext" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PresentationContext" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::PresentationContext *)new imebra::PresentationContext((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__PresentationContext, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PresentationContext__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  imebra::PresentationContext *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_PresentationContext",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PresentationContext" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PresentationContext" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PresentationContext" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PresentationContext" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::PresentationContext *)new imebra::PresentationContext((std::string const &)*arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__PresentationContext, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PresentationContext__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PresentationContext *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::PresentationContext *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PresentationContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__PresentationContext,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PresentationContext" "', argument " "1"" of type '" "imebra::PresentationContext const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PresentationContext" "', argument " "1"" of type '" "imebra::PresentationContext const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::PresentationContext * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::PresentationContext *)new imebra::PresentationContext((imebra::PresentationContext const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__PresentationContext, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PresentationContext(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__PresentationContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PresentationContext__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PresentationContext__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PresentationContext__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PresentationContext'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::PresentationContext::PresentationContext(std::string const &)\n"
    "    imebra::PresentationContext::PresentationContext(std::string const &,bool,bool)\n"
    "    imebra::PresentationContext::PresentationContext(imebra::PresentationContext const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PresentationContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PresentationContext *arg1 = (imebra::PresentationContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PresentationContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PresentationContext, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PresentationContext" "', argument " "1"" of type '" "imebra::PresentationContext *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PresentationContext * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PresentationContext_addTransferSyntax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PresentationContext *arg1 = (imebra::PresentationContext *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PresentationContext_addTransferSyntax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PresentationContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PresentationContext_addTransferSyntax" "', argument " "1"" of type '" "imebra::PresentationContext *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PresentationContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PresentationContext_addTransferSyntax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PresentationContext_addTransferSyntax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->addTransferSyntax((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *PresentationContext_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__PresentationContext, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PresentationContexts__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PresentationContexts *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PresentationContexts")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::PresentationContexts *)new imebra::PresentationContexts();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__PresentationContexts, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PresentationContexts__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PresentationContexts *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::PresentationContexts *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PresentationContexts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__PresentationContexts,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PresentationContexts" "', argument " "1"" of type '" "imebra::PresentationContexts const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PresentationContexts" "', argument " "1"" of type '" "imebra::PresentationContexts const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::PresentationContexts * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::PresentationContexts *)new imebra::PresentationContexts((imebra::PresentationContexts const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__PresentationContexts, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PresentationContexts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PresentationContexts__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__PresentationContexts, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PresentationContexts__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PresentationContexts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::PresentationContexts::PresentationContexts()\n"
    "    imebra::PresentationContexts::PresentationContexts(imebra::PresentationContexts const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PresentationContexts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PresentationContexts *arg1 = (imebra::PresentationContexts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PresentationContexts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PresentationContexts, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PresentationContexts" "', argument " "1"" of type '" "imebra::PresentationContexts *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PresentationContexts * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PresentationContexts_addPresentationContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PresentationContexts *arg1 = (imebra::PresentationContexts *) 0 ;
  imebra::PresentationContext *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PresentationContexts_addPresentationContext",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PresentationContexts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PresentationContexts_addPresentationContext" "', argument " "1"" of type '" "imebra::PresentationContexts *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PresentationContexts * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__PresentationContext,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PresentationContexts_addPresentationContext" "', argument " "2"" of type '" "imebra::PresentationContext const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PresentationContexts_addPresentationContext" "', argument " "2"" of type '" "imebra::PresentationContext const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::PresentationContext * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->addPresentationContext((imebra::PresentationContext const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PresentationContexts_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__PresentationContexts, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AssociationMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationMessage *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::AssociationMessage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AssociationMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__AssociationMessage,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AssociationMessage" "', argument " "1"" of type '" "imebra::AssociationMessage const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationMessage" "', argument " "1"" of type '" "imebra::AssociationMessage const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationMessage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::AssociationMessage *)new imebra::AssociationMessage((imebra::AssociationMessage const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__AssociationMessage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AssociationMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AssociationMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationMessage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AssociationMessage" "', argument " "1"" of type '" "imebra::AssociationMessage *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationMessage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationMessage_getAbstractSyntax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssociationMessage_getAbstractSyntax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationMessage_getAbstractSyntax" "', argument " "1"" of type '" "imebra::AssociationMessage const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationMessage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::AssociationMessage const *)arg1)->getAbstractSyntax();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationMessage_getCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssociationMessage_getCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationMessage_getCommand" "', argument " "1"" of type '" "imebra::AssociationMessage const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationMessage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::AssociationMessage const *)arg1)->getCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationMessage_getPayload(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssociationMessage_getPayload",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationMessage_getPayload" "', argument " "1"" of type '" "imebra::AssociationMessage const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationMessage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::AssociationMessage const *)arg1)->getPayload();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationMessage_hasPayload(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssociationMessage_hasPayload",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationMessage_hasPayload" "', argument " "1"" of type '" "imebra::AssociationMessage const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationMessage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (bool)((imebra::AssociationMessage const *)arg1)->hasPayload();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AssociationMessage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__AssociationMessage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MutableAssociationMessage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  imebra::MutableAssociationMessage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableAssociationMessage",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableAssociationMessage" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableAssociationMessage" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableAssociationMessage *)new imebra::MutableAssociationMessage((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableAssociationMessage, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableAssociationMessage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableAssociationMessage *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::MutableAssociationMessage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MutableAssociationMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__MutableAssociationMessage,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MutableAssociationMessage" "', argument " "1"" of type '" "imebra::MutableAssociationMessage const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MutableAssociationMessage" "', argument " "1"" of type '" "imebra::MutableAssociationMessage const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableAssociationMessage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::MutableAssociationMessage *)new imebra::MutableAssociationMessage((imebra::MutableAssociationMessage const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__MutableAssociationMessage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MutableAssociationMessage(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__MutableAssociationMessage, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MutableAssociationMessage__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MutableAssociationMessage__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MutableAssociationMessage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::MutableAssociationMessage::MutableAssociationMessage(std::string const &)\n"
    "    imebra::MutableAssociationMessage::MutableAssociationMessage(imebra::MutableAssociationMessage const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MutableAssociationMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableAssociationMessage *arg1 = (imebra::MutableAssociationMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MutableAssociationMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableAssociationMessage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MutableAssociationMessage" "', argument " "1"" of type '" "imebra::MutableAssociationMessage *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableAssociationMessage * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MutableAssociationMessage_addDataSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::MutableAssociationMessage *arg1 = (imebra::MutableAssociationMessage *) 0 ;
  imebra::DataSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MutableAssociationMessage_addDataSet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__MutableAssociationMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MutableAssociationMessage_addDataSet" "', argument " "1"" of type '" "imebra::MutableAssociationMessage *""'"); 
  }
  arg1 = reinterpret_cast< imebra::MutableAssociationMessage * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MutableAssociationMessage_addDataSet" "', argument " "2"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MutableAssociationMessage_addDataSet" "', argument " "2"" of type '" "imebra::DataSet const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::DataSet * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->addDataSet((imebra::DataSet const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MutableAssociationMessage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__MutableAssociationMessage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_AssociationBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AssociationBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AssociationBase" "', argument " "1"" of type '" "imebra::AssociationBase *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationBase_getCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::AssociationMessage > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssociationBase_getCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationBase_getCommand" "', argument " "1"" of type '" "imebra::AssociationBase *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::AssociationMessage(static_cast< const imebra::AssociationMessage& >(result))), SWIGTYPE_p_imebra__AssociationMessage, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationBase_getResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::AssociationMessage > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssociationBase_getResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationBase_getResponse" "', argument " "1"" of type '" "imebra::AssociationBase *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AssociationBase_getResponse" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getResponse(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::AssociationMessage(static_cast< const imebra::AssociationMessage& >(result))), SWIGTYPE_p_imebra__AssociationMessage, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationBase_sendMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  imebra::AssociationMessage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssociationBase_sendMessage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationBase_sendMessage" "', argument " "1"" of type '" "imebra::AssociationBase *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__AssociationMessage,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssociationBase_sendMessage" "', argument " "2"" of type '" "imebra::AssociationMessage const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AssociationBase_sendMessage" "', argument " "2"" of type '" "imebra::AssociationMessage const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::AssociationMessage * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->sendMessage((imebra::AssociationMessage const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationBase_release(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssociationBase_release",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationBase_release" "', argument " "1"" of type '" "imebra::AssociationBase *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->release();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationBase_abort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssociationBase_abort",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationBase_abort" "', argument " "1"" of type '" "imebra::AssociationBase *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->abort();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationBase_getThisAET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssociationBase_getThisAET",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationBase_getThisAET" "', argument " "1"" of type '" "imebra::AssociationBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::AssociationBase const *)arg1)->getThisAET();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationBase_getOtherAET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssociationBase_getOtherAET",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationBase_getOtherAET" "', argument " "1"" of type '" "imebra::AssociationBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::AssociationBase const *)arg1)->getOtherAET();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationBase_getTransferSyntax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssociationBase_getTransferSyntax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationBase_getTransferSyntax" "', argument " "1"" of type '" "imebra::AssociationBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssociationBase_getTransferSyntax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AssociationBase_getTransferSyntax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::AssociationBase const *)arg1)->getTransferSyntax((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssociationBase_getTransferSyntaxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssociationBase_getTransferSyntaxes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssociationBase_getTransferSyntaxes" "', argument " "1"" of type '" "imebra::AssociationBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssociationBase_getTransferSyntaxes" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AssociationBase_getTransferSyntaxes" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::AssociationBase const *)arg1)->getTransferSyntaxes((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *AssociationBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__AssociationBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AssociationSCU__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  imebra::PresentationContexts *arg5 = 0 ;
  imebra::StreamReader *arg6 = 0 ;
  imebra::StreamWriter *arg7 = 0 ;
  std::uint32_t arg8 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  imebra::AssociationSCU *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_AssociationSCU",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AssociationSCU" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCU" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AssociationSCU" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCU" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AssociationSCU" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AssociationSCU" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_imebra__PresentationContexts,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_AssociationSCU" "', argument " "5"" of type '" "imebra::PresentationContexts const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCU" "', argument " "5"" of type '" "imebra::PresentationContexts const &""'"); 
  }
  arg5 = reinterpret_cast< imebra::PresentationContexts * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_imebra__StreamReader,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_AssociationSCU" "', argument " "6"" of type '" "imebra::StreamReader &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCU" "', argument " "6"" of type '" "imebra::StreamReader &""'"); 
  }
  arg6 = reinterpret_cast< imebra::StreamReader * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_imebra__StreamWriter,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_AssociationSCU" "', argument " "7"" of type '" "imebra::StreamWriter &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCU" "', argument " "7"" of type '" "imebra::StreamWriter &""'"); 
  }
  arg7 = reinterpret_cast< imebra::StreamWriter * >(argp7);
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_AssociationSCU" "', argument " "8"" of type '" "std::uint32_t""'");
  } 
  arg8 = static_cast< std::uint32_t >(val8);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::AssociationSCU *)new imebra::AssociationSCU((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,(imebra::PresentationContexts const &)*arg5,*arg6,*arg7,arg8);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__AssociationSCU, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AssociationSCU__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationSCU *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::AssociationSCU *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AssociationSCU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__AssociationSCU,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AssociationSCU" "', argument " "1"" of type '" "imebra::AssociationSCU const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCU" "', argument " "1"" of type '" "imebra::AssociationSCU const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationSCU * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::AssociationSCU *)new imebra::AssociationSCU((imebra::AssociationSCU const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__AssociationSCU, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AssociationSCU(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__AssociationSCU, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AssociationSCU__SWIG_1(self, args);
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_imebra__PresentationContexts, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_imebra__StreamReader, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_imebra__StreamWriter, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_AssociationSCU__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AssociationSCU'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::AssociationSCU::AssociationSCU(std::string const &,std::string const &,std::uint32_t,std::uint32_t,imebra::PresentationContexts const &,imebra::StreamReader &,imebra::StreamWriter &,std::uint32_t)\n"
    "    imebra::AssociationSCU::AssociationSCU(imebra::AssociationSCU const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AssociationSCU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationSCU *arg1 = (imebra::AssociationSCU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AssociationSCU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationSCU, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AssociationSCU" "', argument " "1"" of type '" "imebra::AssociationSCU *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationSCU * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AssociationSCU_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__AssociationSCU, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AssociationSCP__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  imebra::PresentationContexts *arg4 = 0 ;
  imebra::StreamReader *arg5 = 0 ;
  imebra::StreamWriter *arg6 = 0 ;
  std::uint32_t arg7 ;
  std::uint32_t arg8 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  imebra::AssociationSCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_AssociationSCP",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AssociationSCP" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCP" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AssociationSCP" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AssociationSCP" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_imebra__PresentationContexts,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_AssociationSCP" "', argument " "4"" of type '" "imebra::PresentationContexts const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCP" "', argument " "4"" of type '" "imebra::PresentationContexts const &""'"); 
  }
  arg4 = reinterpret_cast< imebra::PresentationContexts * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_imebra__StreamReader,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_AssociationSCP" "', argument " "5"" of type '" "imebra::StreamReader &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCP" "', argument " "5"" of type '" "imebra::StreamReader &""'"); 
  }
  arg5 = reinterpret_cast< imebra::StreamReader * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_imebra__StreamWriter,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_AssociationSCP" "', argument " "6"" of type '" "imebra::StreamWriter &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCP" "', argument " "6"" of type '" "imebra::StreamWriter &""'"); 
  }
  arg6 = reinterpret_cast< imebra::StreamWriter * >(argp6);
  ecode7 = SWIG_AsVal_unsigned_SS_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_AssociationSCP" "', argument " "7"" of type '" "std::uint32_t""'");
  } 
  arg7 = static_cast< std::uint32_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_AssociationSCP" "', argument " "8"" of type '" "std::uint32_t""'");
  } 
  arg8 = static_cast< std::uint32_t >(val8);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::AssociationSCP *)new imebra::AssociationSCP((std::string const &)*arg1,arg2,arg3,(imebra::PresentationContexts const &)*arg4,*arg5,*arg6,arg7,arg8);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__AssociationSCP, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AssociationSCP__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationSCP *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::AssociationSCP *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AssociationSCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__AssociationSCP,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AssociationSCP" "', argument " "1"" of type '" "imebra::AssociationSCP const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AssociationSCP" "', argument " "1"" of type '" "imebra::AssociationSCP const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationSCP * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::AssociationSCP *)new imebra::AssociationSCP((imebra::AssociationSCP const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__AssociationSCP, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AssociationSCP(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__AssociationSCP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AssociationSCP__SWIG_1(self, args);
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_imebra__PresentationContexts, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_imebra__StreamReader, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_imebra__StreamWriter, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_AssociationSCP__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AssociationSCP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::AssociationSCP::AssociationSCP(std::string const &,std::uint32_t,std::uint32_t,imebra::PresentationContexts const &,imebra::StreamReader &,imebra::StreamWriter &,std::uint32_t,std::uint32_t)\n"
    "    imebra::AssociationSCP::AssociationSCP(imebra::AssociationSCP const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AssociationSCP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationSCP *arg1 = (imebra::AssociationSCP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AssociationSCP",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__AssociationSCP, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AssociationSCP" "', argument " "1"" of type '" "imebra::AssociationSCP *""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationSCP * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AssociationSCP_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__AssociationSCP, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_DimseCommandBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DimseCommandBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommandBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DimseCommandBase" "', argument " "1"" of type '" "imebra::DimseCommandBase *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommandBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DimseCommandBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommandBase *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DimseCommandBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DimseCommandBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DimseCommandBase,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DimseCommandBase" "', argument " "1"" of type '" "imebra::DimseCommandBase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DimseCommandBase" "', argument " "1"" of type '" "imebra::DimseCommandBase const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommandBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DimseCommandBase *)new imebra::DimseCommandBase((imebra::DimseCommandBase const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DimseCommandBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommandBase_getCommandDataSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommandBase_getCommandDataSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommandBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommandBase_getCommandDataSet" "', argument " "1"" of type '" "imebra::DimseCommandBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommandBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommandBase const *)arg1)->getCommandDataSet();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommandBase_getPayloadDataSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommandBase_getPayloadDataSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommandBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommandBase_getPayloadDataSet" "', argument " "1"" of type '" "imebra::DimseCommandBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommandBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommandBase const *)arg1)->getPayloadDataSet();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DataSet(static_cast< const imebra::DataSet& >(result))), SWIGTYPE_p_imebra__DataSet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommandBase_getAbstractSyntax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommandBase_getAbstractSyntax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommandBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommandBase_getAbstractSyntax" "', argument " "1"" of type '" "imebra::DimseCommandBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommandBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommandBase const *)arg1)->getAbstractSyntax();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommandBase_getAffectedSopInstanceUid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommandBase_getAffectedSopInstanceUid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommandBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommandBase_getAffectedSopInstanceUid" "', argument " "1"" of type '" "imebra::DimseCommandBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommandBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommandBase const *)arg1)->getAffectedSopInstanceUid();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommandBase_getAffectedSopClassUid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommandBase_getAffectedSopClassUid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommandBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommandBase_getAffectedSopClassUid" "', argument " "1"" of type '" "imebra::DimseCommandBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommandBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommandBase const *)arg1)->getAffectedSopClassUid();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommandBase_getRequestedSopInstanceUid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommandBase_getRequestedSopInstanceUid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommandBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommandBase_getRequestedSopInstanceUid" "', argument " "1"" of type '" "imebra::DimseCommandBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommandBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommandBase const *)arg1)->getRequestedSopInstanceUid();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommandBase_getRequestedSopClassUid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommandBase_getRequestedSopClassUid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommandBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommandBase_getRequestedSopClassUid" "', argument " "1"" of type '" "imebra::DimseCommandBase const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommandBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommandBase const *)arg1)->getRequestedSopClassUid();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DimseCommandBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__DimseCommandBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DimseCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DimseCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DimseCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DimseCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DimseCommand" "', argument " "1"" of type '" "imebra::DimseCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DimseCommand" "', argument " "1"" of type '" "imebra::DimseCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DimseCommand *)new imebra::DimseCommand((imebra::DimseCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DimseCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DimseCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DimseCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DimseCommand" "', argument " "1"" of type '" "imebra::DimseCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getID" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)((imebra::DimseCommand const *)arg1)->getID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getCommandType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::dimseCommandType_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getCommandType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getCommandType" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::dimseCommandType_t)((imebra::DimseCommand const *)arg1)->getCommandType();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsCStoreCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::CStoreCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsCStoreCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsCStoreCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsCStoreCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CStoreCommand(static_cast< const imebra::CStoreCommand& >(result))), SWIGTYPE_p_imebra__CStoreCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsCMoveCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::CMoveCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsCMoveCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsCMoveCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsCMoveCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CMoveCommand(static_cast< const imebra::CMoveCommand& >(result))), SWIGTYPE_p_imebra__CMoveCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsCGetCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::CGetCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsCGetCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsCGetCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsCGetCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CGetCommand(static_cast< const imebra::CGetCommand& >(result))), SWIGTYPE_p_imebra__CGetCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsCFindCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::CFindCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsCFindCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsCFindCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsCFindCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CFindCommand(static_cast< const imebra::CFindCommand& >(result))), SWIGTYPE_p_imebra__CFindCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsCEchoCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::CEchoCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsCEchoCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsCEchoCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsCEchoCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CEchoCommand(static_cast< const imebra::CEchoCommand& >(result))), SWIGTYPE_p_imebra__CEchoCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsCCancelCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::CCancelCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsCCancelCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsCCancelCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsCCancelCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CCancelCommand(static_cast< const imebra::CCancelCommand& >(result))), SWIGTYPE_p_imebra__CCancelCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsNActionCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::NActionCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsNActionCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsNActionCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsNActionCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NActionCommand(static_cast< const imebra::NActionCommand& >(result))), SWIGTYPE_p_imebra__NActionCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsNEventReportCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::NEventReportCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsNEventReportCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsNEventReportCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsNEventReportCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NEventReportCommand(static_cast< const imebra::NEventReportCommand& >(result))), SWIGTYPE_p_imebra__NEventReportCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsNCreateCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::NCreateCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsNCreateCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsNCreateCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsNCreateCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NCreateCommand(static_cast< const imebra::NCreateCommand& >(result))), SWIGTYPE_p_imebra__NCreateCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsNDeleteCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::NDeleteCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsNDeleteCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsNDeleteCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsNDeleteCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NDeleteCommand(static_cast< const imebra::NDeleteCommand& >(result))), SWIGTYPE_p_imebra__NDeleteCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsNSetCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::NSetCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsNSetCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsNSetCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsNSetCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NSetCommand(static_cast< const imebra::NSetCommand& >(result))), SWIGTYPE_p_imebra__NSetCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseCommand_getAsNGetCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::NGetCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseCommand_getAsNGetCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseCommand_getAsNGetCommand" "', argument " "1"" of type '" "imebra::DimseCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseCommand const *)arg1)->getAsNGetCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NGetCommand(static_cast< const imebra::NGetCommand& >(result))), SWIGTYPE_p_imebra__NGetCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DimseCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__DimseCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DimseResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DimseResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DimseResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DimseResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DimseResponse" "', argument " "1"" of type '" "imebra::DimseResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DimseResponse" "', argument " "1"" of type '" "imebra::DimseResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DimseResponse *)new imebra::DimseResponse((imebra::DimseResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DimseResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DimseResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseResponse *arg1 = (imebra::DimseResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DimseResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DimseResponse" "', argument " "1"" of type '" "imebra::DimseResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseResponse_getStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseResponse *arg1 = (imebra::DimseResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::dimseStatus_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseResponse_getStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseResponse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseResponse_getStatus" "', argument " "1"" of type '" "imebra::DimseResponse const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::dimseStatus_t)((imebra::DimseResponse const *)arg1)->getStatus();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseResponse_getStatusCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseResponse *arg1 = (imebra::DimseResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseResponse_getStatusCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseResponse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseResponse_getStatusCode" "', argument " "1"" of type '" "imebra::DimseResponse const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)((imebra::DimseResponse const *)arg1)->getStatusCode();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DimseResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__DimseResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CPartialResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CPartialResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CPartialResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CPartialResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CPartialResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CPartialResponse" "', argument " "1"" of type '" "imebra::CPartialResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CPartialResponse" "', argument " "1"" of type '" "imebra::CPartialResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CPartialResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CPartialResponse *)new imebra::CPartialResponse((imebra::CPartialResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CPartialResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CPartialResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CPartialResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CPartialResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CPartialResponse" "', argument " "1"" of type '" "imebra::CPartialResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CPartialResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPartialResponse_getRemainingSubOperations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPartialResponse_getRemainingSubOperations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CPartialResponse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPartialResponse_getRemainingSubOperations" "', argument " "1"" of type '" "imebra::CPartialResponse const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CPartialResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getRemainingSubOperations();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPartialResponse_getCompletedSubOperations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPartialResponse_getCompletedSubOperations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CPartialResponse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPartialResponse_getCompletedSubOperations" "', argument " "1"" of type '" "imebra::CPartialResponse const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CPartialResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getCompletedSubOperations();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPartialResponse_getFailedSubOperations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPartialResponse_getFailedSubOperations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CPartialResponse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPartialResponse_getFailedSubOperations" "', argument " "1"" of type '" "imebra::CPartialResponse const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CPartialResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getFailedSubOperations();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CPartialResponse_getWarningSubOperations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CPartialResponse_getWarningSubOperations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CPartialResponse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPartialResponse_getWarningSubOperations" "', argument " "1"" of type '" "imebra::CPartialResponse const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CPartialResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getWarningSubOperations();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CPartialResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CPartialResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CStoreCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::uint16_t arg7 ;
  imebra::DataSet *arg8 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  unsigned short val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  imebra::CStoreCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_CStoreCommand",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CStoreCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CStoreCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CStoreCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CStoreCommand" "', argument " "3"" of type '" "imebra::dimseCommandPriority_t""'");
  } 
  arg3 = static_cast< imebra::dimseCommandPriority_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CStoreCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CStoreCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_CStoreCommand" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CStoreCommand" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_CStoreCommand" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CStoreCommand" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  ecode7 = SWIG_AsVal_unsigned_SS_short(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_CStoreCommand" "', argument " "7"" of type '" "std::uint16_t""'");
  } 
  arg7 = static_cast< std::uint16_t >(val7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_CStoreCommand" "', argument " "8"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CStoreCommand" "', argument " "8"" of type '" "imebra::DataSet const &""'"); 
  }
  arg8 = reinterpret_cast< imebra::DataSet * >(argp8);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CStoreCommand *)new imebra::CStoreCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7,(imebra::DataSet const &)*arg8);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CStoreCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CStoreCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CStoreCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CStoreCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CStoreCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CStoreCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CStoreCommand" "', argument " "1"" of type '" "imebra::CStoreCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CStoreCommand" "', argument " "1"" of type '" "imebra::CStoreCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CStoreCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CStoreCommand *)new imebra::CStoreCommand((imebra::CStoreCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CStoreCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CStoreCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CStoreCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CStoreCommand__SWIG_1(self, args);
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_short(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_imebra__DataSet, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_CStoreCommand__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CStoreCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CStoreCommand::CStoreCommand(std::string const &,std::uint16_t,imebra::dimseCommandPriority_t,std::string const &,std::string const &,std::string const &,std::uint16_t,imebra::DataSet const &)\n"
    "    imebra::CStoreCommand::CStoreCommand(imebra::CStoreCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CStoreCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CStoreCommand *arg1 = (imebra::CStoreCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CStoreCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CStoreCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CStoreCommand" "', argument " "1"" of type '" "imebra::CStoreCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CStoreCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CStoreCommand_getOriginatorAET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CStoreCommand *arg1 = (imebra::CStoreCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CStoreCommand_getOriginatorAET",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CStoreCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CStoreCommand_getOriginatorAET" "', argument " "1"" of type '" "imebra::CStoreCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CStoreCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::CStoreCommand const *)arg1)->getOriginatorAET();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CStoreCommand_getOriginatorMessageID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CStoreCommand *arg1 = (imebra::CStoreCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CStoreCommand_getOriginatorMessageID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CStoreCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CStoreCommand_getOriginatorMessageID" "', argument " "1"" of type '" "imebra::CStoreCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CStoreCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)((imebra::CStoreCommand const *)arg1)->getOriginatorMessageID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CStoreCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CStoreCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CStoreResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CStoreCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::CStoreResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CStoreResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CStoreCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CStoreResponse" "', argument " "1"" of type '" "imebra::CStoreCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CStoreResponse" "', argument " "1"" of type '" "imebra::CStoreCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CStoreCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CStoreResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CStoreResponse *)new imebra::CStoreResponse((imebra::CStoreCommand const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CStoreResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CStoreResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CStoreResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CStoreResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CStoreResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CStoreResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CStoreResponse" "', argument " "1"" of type '" "imebra::CStoreResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CStoreResponse" "', argument " "1"" of type '" "imebra::CStoreResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CStoreResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CStoreResponse *)new imebra::CStoreResponse((imebra::CStoreResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CStoreResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CStoreResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CStoreResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CStoreResponse__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CStoreCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CStoreResponse__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CStoreResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CStoreResponse::CStoreResponse(imebra::CStoreCommand const &,imebra::dimseStatusCode_t)\n"
    "    imebra::CStoreResponse::CStoreResponse(imebra::CStoreResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CStoreResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CStoreResponse *arg1 = (imebra::CStoreResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CStoreResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CStoreResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CStoreResponse" "', argument " "1"" of type '" "imebra::CStoreResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CStoreResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CStoreResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CStoreResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CGetCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  imebra::CGetCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_CGetCommand",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CGetCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CGetCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CGetCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CGetCommand" "', argument " "3"" of type '" "imebra::dimseCommandPriority_t""'");
  } 
  arg3 = static_cast< imebra::dimseCommandPriority_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CGetCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CGetCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_CGetCommand" "', argument " "5"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CGetCommand" "', argument " "5"" of type '" "imebra::DataSet const &""'"); 
  }
  arg5 = reinterpret_cast< imebra::DataSet * >(argp5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CGetCommand *)new imebra::CGetCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CGetCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CGetCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CGetCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CGetCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CGetCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CGetCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CGetCommand" "', argument " "1"" of type '" "imebra::CGetCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CGetCommand" "', argument " "1"" of type '" "imebra::CGetCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CGetCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CGetCommand *)new imebra::CGetCommand((imebra::CGetCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CGetCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CGetCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CGetCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CGetCommand__SWIG_1(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_imebra__DataSet, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_CGetCommand__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CGetCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CGetCommand::CGetCommand(std::string const &,std::uint16_t,imebra::dimseCommandPriority_t,std::string const &,imebra::DataSet const &)\n"
    "    imebra::CGetCommand::CGetCommand(imebra::CGetCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CGetCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CGetCommand *arg1 = (imebra::CGetCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CGetCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CGetCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CGetCommand" "', argument " "1"" of type '" "imebra::CGetCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CGetCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CGetCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CGetCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CGetResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::DataSet *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  imebra::CGetResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_CGetResponse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CGetCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CGetResponse" "', argument " "1"" of type '" "imebra::CGetCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CGetResponse" "', argument " "1"" of type '" "imebra::CGetCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CGetCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CGetResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CGetResponse" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CGetResponse" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CGetResponse" "', argument " "5"" of type '" "std::uint32_t""'");
  } 
  arg5 = static_cast< std::uint32_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_CGetResponse" "', argument " "6"" of type '" "std::uint32_t""'");
  } 
  arg6 = static_cast< std::uint32_t >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_CGetResponse" "', argument " "7"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CGetResponse" "', argument " "7"" of type '" "imebra::DataSet const &""'"); 
  }
  arg7 = reinterpret_cast< imebra::DataSet * >(argp7);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CGetResponse *)new imebra::CGetResponse((imebra::CGetCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6,(imebra::DataSet const &)*arg7);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CGetResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CGetResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  imebra::CGetResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_CGetResponse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CGetCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CGetResponse" "', argument " "1"" of type '" "imebra::CGetCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CGetResponse" "', argument " "1"" of type '" "imebra::CGetCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CGetCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CGetResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CGetResponse" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CGetResponse" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CGetResponse" "', argument " "5"" of type '" "std::uint32_t""'");
  } 
  arg5 = static_cast< std::uint32_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_CGetResponse" "', argument " "6"" of type '" "std::uint32_t""'");
  } 
  arg6 = static_cast< std::uint32_t >(val6);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CGetResponse *)new imebra::CGetResponse((imebra::CGetCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CGetResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CGetResponse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CGetResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CGetResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CGetResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CGetResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CGetResponse" "', argument " "1"" of type '" "imebra::CGetResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CGetResponse" "', argument " "1"" of type '" "imebra::CGetResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CGetResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CGetResponse *)new imebra::CGetResponse((imebra::CGetResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CGetResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CGetResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CGetResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CGetResponse__SWIG_2(self, args);
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CGetCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_CGetResponse__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CGetCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_imebra__DataSet, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_CGetResponse__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CGetResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CGetResponse::CGetResponse(imebra::CGetCommand const &,imebra::dimseStatusCode_t,std::uint32_t,std::uint32_t,std::uint32_t,std::uint32_t,imebra::DataSet const &)\n"
    "    imebra::CGetResponse::CGetResponse(imebra::CGetCommand const &,imebra::dimseStatusCode_t,std::uint32_t,std::uint32_t,std::uint32_t,std::uint32_t)\n"
    "    imebra::CGetResponse::CGetResponse(imebra::CGetResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CGetResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CGetResponse *arg1 = (imebra::CGetResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CGetResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CGetResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CGetResponse" "', argument " "1"" of type '" "imebra::CGetResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CGetResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CGetResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CGetResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CFindCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  imebra::CFindCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_CFindCommand",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CFindCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CFindCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CFindCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CFindCommand" "', argument " "3"" of type '" "imebra::dimseCommandPriority_t""'");
  } 
  arg3 = static_cast< imebra::dimseCommandPriority_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CFindCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CFindCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_CFindCommand" "', argument " "5"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CFindCommand" "', argument " "5"" of type '" "imebra::DataSet const &""'"); 
  }
  arg5 = reinterpret_cast< imebra::DataSet * >(argp5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CFindCommand *)new imebra::CFindCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CFindCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CFindCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CFindCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CFindCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CFindCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CFindCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CFindCommand" "', argument " "1"" of type '" "imebra::CFindCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CFindCommand" "', argument " "1"" of type '" "imebra::CFindCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CFindCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CFindCommand *)new imebra::CFindCommand((imebra::CFindCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CFindCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CFindCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CFindCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CFindCommand__SWIG_1(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_imebra__DataSet, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_CFindCommand__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CFindCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CFindCommand::CFindCommand(std::string const &,std::uint16_t,imebra::dimseCommandPriority_t,std::string const &,imebra::DataSet const &)\n"
    "    imebra::CFindCommand::CFindCommand(imebra::CFindCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CFindCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CFindCommand *arg1 = (imebra::CFindCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CFindCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CFindCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CFindCommand" "', argument " "1"" of type '" "imebra::CFindCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CFindCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CFindCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CFindCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CFindResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CFindCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::CFindResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CFindResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CFindCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CFindResponse" "', argument " "1"" of type '" "imebra::CFindCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CFindResponse" "', argument " "1"" of type '" "imebra::CFindCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CFindCommand * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CFindResponse" "', argument " "2"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CFindResponse" "', argument " "2"" of type '" "imebra::DataSet const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::DataSet * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CFindResponse *)new imebra::CFindResponse((imebra::CFindCommand const &)*arg1,(imebra::DataSet const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CFindResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CFindResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CFindCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::CFindResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CFindResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CFindCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CFindResponse" "', argument " "1"" of type '" "imebra::CFindCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CFindResponse" "', argument " "1"" of type '" "imebra::CFindCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CFindCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CFindResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CFindResponse *)new imebra::CFindResponse((imebra::CFindCommand const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CFindResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CFindResponse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CFindResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CFindResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CFindResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CFindResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CFindResponse" "', argument " "1"" of type '" "imebra::CFindResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CFindResponse" "', argument " "1"" of type '" "imebra::CFindResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CFindResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CFindResponse *)new imebra::CFindResponse((imebra::CFindResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CFindResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CFindResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CFindResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CFindResponse__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CFindCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__DataSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CFindResponse__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CFindCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CFindResponse__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CFindResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CFindResponse::CFindResponse(imebra::CFindCommand const &,imebra::DataSet const &)\n"
    "    imebra::CFindResponse::CFindResponse(imebra::CFindCommand const &,imebra::dimseStatusCode_t)\n"
    "    imebra::CFindResponse::CFindResponse(imebra::CFindResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CFindResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CFindResponse *arg1 = (imebra::CFindResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CFindResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CFindResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CFindResponse" "', argument " "1"" of type '" "imebra::CFindResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CFindResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CFindResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CFindResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CMoveCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  imebra::DataSet *arg6 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  imebra::CMoveCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_CMoveCommand",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMoveCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMoveCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CMoveCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CMoveCommand" "', argument " "3"" of type '" "imebra::dimseCommandPriority_t""'");
  } 
  arg3 = static_cast< imebra::dimseCommandPriority_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CMoveCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMoveCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_CMoveCommand" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMoveCommand" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_CMoveCommand" "', argument " "6"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMoveCommand" "', argument " "6"" of type '" "imebra::DataSet const &""'"); 
  }
  arg6 = reinterpret_cast< imebra::DataSet * >(argp6);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CMoveCommand *)new imebra::CMoveCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(imebra::DataSet const &)*arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CMoveCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMoveCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CMoveCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CMoveCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CMoveCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CMoveCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMoveCommand" "', argument " "1"" of type '" "imebra::CMoveCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMoveCommand" "', argument " "1"" of type '" "imebra::CMoveCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CMoveCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CMoveCommand *)new imebra::CMoveCommand((imebra::CMoveCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CMoveCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMoveCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CMoveCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CMoveCommand__SWIG_1(self, args);
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_imebra__DataSet, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_CMoveCommand__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CMoveCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CMoveCommand::CMoveCommand(std::string const &,std::uint16_t,imebra::dimseCommandPriority_t,std::string const &,std::string const &,imebra::DataSet const &)\n"
    "    imebra::CMoveCommand::CMoveCommand(imebra::CMoveCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CMoveCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CMoveCommand *arg1 = (imebra::CMoveCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CMoveCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CMoveCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CMoveCommand" "', argument " "1"" of type '" "imebra::CMoveCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CMoveCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMoveCommand_getDestinationAET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CMoveCommand *arg1 = (imebra::CMoveCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMoveCommand_getDestinationAET",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CMoveCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMoveCommand_getDestinationAET" "', argument " "1"" of type '" "imebra::CMoveCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CMoveCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::CMoveCommand const *)arg1)->getDestinationAET();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CMoveCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CMoveCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CMoveResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CMoveCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::DataSet *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  imebra::CMoveResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_CMoveResponse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CMoveCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMoveResponse" "', argument " "1"" of type '" "imebra::CMoveCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMoveResponse" "', argument " "1"" of type '" "imebra::CMoveCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CMoveCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CMoveResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CMoveResponse" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CMoveResponse" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CMoveResponse" "', argument " "5"" of type '" "std::uint32_t""'");
  } 
  arg5 = static_cast< std::uint32_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_CMoveResponse" "', argument " "6"" of type '" "std::uint32_t""'");
  } 
  arg6 = static_cast< std::uint32_t >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_CMoveResponse" "', argument " "7"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMoveResponse" "', argument " "7"" of type '" "imebra::DataSet const &""'"); 
  }
  arg7 = reinterpret_cast< imebra::DataSet * >(argp7);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CMoveResponse *)new imebra::CMoveResponse((imebra::CMoveCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6,(imebra::DataSet const &)*arg7);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CMoveResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMoveResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CMoveCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  imebra::CMoveResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_CMoveResponse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CMoveCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMoveResponse" "', argument " "1"" of type '" "imebra::CMoveCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMoveResponse" "', argument " "1"" of type '" "imebra::CMoveCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CMoveCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CMoveResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CMoveResponse" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CMoveResponse" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CMoveResponse" "', argument " "5"" of type '" "std::uint32_t""'");
  } 
  arg5 = static_cast< std::uint32_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_CMoveResponse" "', argument " "6"" of type '" "std::uint32_t""'");
  } 
  arg6 = static_cast< std::uint32_t >(val6);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CMoveResponse *)new imebra::CMoveResponse((imebra::CMoveCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CMoveResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMoveResponse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CMoveResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CMoveResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CMoveResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CMoveResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMoveResponse" "', argument " "1"" of type '" "imebra::CMoveResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMoveResponse" "', argument " "1"" of type '" "imebra::CMoveResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CMoveResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CMoveResponse *)new imebra::CMoveResponse((imebra::CMoveResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CMoveResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMoveResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CMoveResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CMoveResponse__SWIG_2(self, args);
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CMoveCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_CMoveResponse__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CMoveCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_imebra__DataSet, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_CMoveResponse__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CMoveResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CMoveResponse::CMoveResponse(imebra::CMoveCommand const &,imebra::dimseStatusCode_t,std::uint32_t,std::uint32_t,std::uint32_t,std::uint32_t,imebra::DataSet const &)\n"
    "    imebra::CMoveResponse::CMoveResponse(imebra::CMoveCommand const &,imebra::dimseStatusCode_t,std::uint32_t,std::uint32_t,std::uint32_t,std::uint32_t)\n"
    "    imebra::CMoveResponse::CMoveResponse(imebra::CMoveResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CMoveResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CMoveResponse *arg1 = (imebra::CMoveResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CMoveResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CMoveResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CMoveResponse" "', argument " "1"" of type '" "imebra::CMoveResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CMoveResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CMoveResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CMoveResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CEchoCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  imebra::CEchoCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_CEchoCommand",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CEchoCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CEchoCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CEchoCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CEchoCommand" "', argument " "3"" of type '" "imebra::dimseCommandPriority_t""'");
  } 
  arg3 = static_cast< imebra::dimseCommandPriority_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CEchoCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CEchoCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CEchoCommand *)new imebra::CEchoCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CEchoCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CEchoCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CEchoCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CEchoCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CEchoCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CEchoCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CEchoCommand" "', argument " "1"" of type '" "imebra::CEchoCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CEchoCommand" "', argument " "1"" of type '" "imebra::CEchoCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CEchoCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CEchoCommand *)new imebra::CEchoCommand((imebra::CEchoCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CEchoCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CEchoCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CEchoCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CEchoCommand__SWIG_1(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_CEchoCommand__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CEchoCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CEchoCommand::CEchoCommand(std::string const &,std::uint16_t,imebra::dimseCommandPriority_t,std::string const &)\n"
    "    imebra::CEchoCommand::CEchoCommand(imebra::CEchoCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CEchoCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CEchoCommand *arg1 = (imebra::CEchoCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CEchoCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CEchoCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CEchoCommand" "', argument " "1"" of type '" "imebra::CEchoCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CEchoCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CEchoCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CEchoCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CEchoResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CEchoCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::CEchoResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CEchoResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CEchoCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CEchoResponse" "', argument " "1"" of type '" "imebra::CEchoCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CEchoResponse" "', argument " "1"" of type '" "imebra::CEchoCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CEchoCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CEchoResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CEchoResponse *)new imebra::CEchoResponse((imebra::CEchoCommand const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CEchoResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CEchoResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CEchoResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CEchoResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CEchoResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CEchoResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CEchoResponse" "', argument " "1"" of type '" "imebra::CEchoResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CEchoResponse" "', argument " "1"" of type '" "imebra::CEchoResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CEchoResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CEchoResponse *)new imebra::CEchoResponse((imebra::CEchoResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CEchoResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CEchoResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CEchoResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CEchoResponse__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CEchoCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CEchoResponse__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CEchoResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CEchoResponse::CEchoResponse(imebra::CEchoCommand const &,imebra::dimseStatusCode_t)\n"
    "    imebra::CEchoResponse::CEchoResponse(imebra::CEchoResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CEchoResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CEchoResponse *arg1 = (imebra::CEchoResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CEchoResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CEchoResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CEchoResponse" "', argument " "1"" of type '" "imebra::CEchoResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CEchoResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CEchoResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CEchoResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CCancelCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::uint16_t arg4 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  imebra::CCancelCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_CCancelCommand",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CCancelCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CCancelCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CCancelCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CCancelCommand" "', argument " "3"" of type '" "imebra::dimseCommandPriority_t""'");
  } 
  arg3 = static_cast< imebra::dimseCommandPriority_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CCancelCommand" "', argument " "4"" of type '" "std::uint16_t""'");
  } 
  arg4 = static_cast< std::uint16_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CCancelCommand *)new imebra::CCancelCommand((std::string const &)*arg1,arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CCancelCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CCancelCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CCancelCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::CCancelCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CCancelCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__CCancelCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CCancelCommand" "', argument " "1"" of type '" "imebra::CCancelCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CCancelCommand" "', argument " "1"" of type '" "imebra::CCancelCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::CCancelCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::CCancelCommand *)new imebra::CCancelCommand((imebra::CCancelCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__CCancelCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CCancelCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__CCancelCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CCancelCommand__SWIG_1(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_CCancelCommand__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CCancelCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::CCancelCommand::CCancelCommand(std::string const &,std::uint16_t,imebra::dimseCommandPriority_t,std::uint16_t)\n"
    "    imebra::CCancelCommand::CCancelCommand(imebra::CCancelCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CCancelCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CCancelCommand *arg1 = (imebra::CCancelCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CCancelCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CCancelCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CCancelCommand" "', argument " "1"" of type '" "imebra::CCancelCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CCancelCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CCancelCommand_getCancelMessageID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::CCancelCommand *arg1 = (imebra::CCancelCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CCancelCommand_getCancelMessageID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__CCancelCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CCancelCommand_getCancelMessageID" "', argument " "1"" of type '" "imebra::CCancelCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::CCancelCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)((imebra::CCancelCommand const *)arg1)->getCancelMessageID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CCancelCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__CCancelCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NEventReportCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  imebra::NEventReportCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_NEventReportCommand",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NEventReportCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NEventReportCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NEventReportCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_NEventReportCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_NEventReportCommand" "', argument " "5"" of type '" "std::uint16_t""'");
  } 
  arg5 = static_cast< std::uint16_t >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NEventReportCommand *)new imebra::NEventReportCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NEventReportCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NEventReportCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  imebra::DataSet *arg6 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  imebra::NEventReportCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_NEventReportCommand",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NEventReportCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NEventReportCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NEventReportCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_NEventReportCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_NEventReportCommand" "', argument " "5"" of type '" "std::uint16_t""'");
  } 
  arg5 = static_cast< std::uint16_t >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_NEventReportCommand" "', argument " "6"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportCommand" "', argument " "6"" of type '" "imebra::DataSet const &""'"); 
  }
  arg6 = reinterpret_cast< imebra::DataSet * >(argp6);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NEventReportCommand *)new imebra::NEventReportCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,(imebra::DataSet const &)*arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NEventReportCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NEventReportCommand__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NEventReportCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NEventReportCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NEventReportCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NEventReportCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NEventReportCommand" "', argument " "1"" of type '" "imebra::NEventReportCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportCommand" "', argument " "1"" of type '" "imebra::NEventReportCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NEventReportCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NEventReportCommand *)new imebra::NEventReportCommand((imebra::NEventReportCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NEventReportCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NEventReportCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NEventReportCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NEventReportCommand__SWIG_2(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_NEventReportCommand__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_imebra__DataSet, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_NEventReportCommand__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NEventReportCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NEventReportCommand::NEventReportCommand(std::string const &,std::uint16_t,std::string const &,std::string const &,std::uint16_t)\n"
    "    imebra::NEventReportCommand::NEventReportCommand(std::string const &,std::uint16_t,std::string const &,std::string const &,std::uint16_t,imebra::DataSet const &)\n"
    "    imebra::NEventReportCommand::NEventReportCommand(imebra::NEventReportCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NEventReportCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NEventReportCommand *arg1 = (imebra::NEventReportCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NEventReportCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NEventReportCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NEventReportCommand" "', argument " "1"" of type '" "imebra::NEventReportCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NEventReportCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NEventReportCommand_getEventID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NEventReportCommand *arg1 = (imebra::NEventReportCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NEventReportCommand_getEventID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NEventReportCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NEventReportCommand_getEventID" "', argument " "1"" of type '" "imebra::NEventReportCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NEventReportCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)((imebra::NEventReportCommand const *)arg1)->getEventID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NEventReportCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NEventReportCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NEventReportResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NEventReportCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NEventReportResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NEventReportResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NEventReportCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NEventReportResponse" "', argument " "1"" of type '" "imebra::NEventReportCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportResponse" "', argument " "1"" of type '" "imebra::NEventReportCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NEventReportCommand * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NEventReportResponse" "', argument " "2"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportResponse" "', argument " "2"" of type '" "imebra::DataSet const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::DataSet * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NEventReportResponse *)new imebra::NEventReportResponse((imebra::NEventReportCommand const &)*arg1,(imebra::DataSet const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NEventReportResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NEventReportResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NEventReportCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NEventReportResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NEventReportResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NEventReportCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NEventReportResponse" "', argument " "1"" of type '" "imebra::NEventReportCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportResponse" "', argument " "1"" of type '" "imebra::NEventReportCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NEventReportCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NEventReportResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NEventReportResponse *)new imebra::NEventReportResponse((imebra::NEventReportCommand const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NEventReportResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NEventReportResponse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NEventReportResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NEventReportResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NEventReportResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NEventReportResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NEventReportResponse" "', argument " "1"" of type '" "imebra::NEventReportResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NEventReportResponse" "', argument " "1"" of type '" "imebra::NEventReportResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NEventReportResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NEventReportResponse *)new imebra::NEventReportResponse((imebra::NEventReportResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NEventReportResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NEventReportResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NEventReportResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NEventReportResponse__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NEventReportCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__DataSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NEventReportResponse__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NEventReportCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_NEventReportResponse__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NEventReportResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NEventReportResponse::NEventReportResponse(imebra::NEventReportCommand const &,imebra::DataSet const &)\n"
    "    imebra::NEventReportResponse::NEventReportResponse(imebra::NEventReportCommand const &,imebra::dimseStatusCode_t)\n"
    "    imebra::NEventReportResponse::NEventReportResponse(imebra::NEventReportResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NEventReportResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NEventReportResponse *arg1 = (imebra::NEventReportResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NEventReportResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NEventReportResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NEventReportResponse" "', argument " "1"" of type '" "imebra::NEventReportResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NEventReportResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NEventReportResponse_getEventID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NEventReportResponse *arg1 = (imebra::NEventReportResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NEventReportResponse_getEventID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NEventReportResponse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NEventReportResponse_getEventID" "', argument " "1"" of type '" "imebra::NEventReportResponse const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NEventReportResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)((imebra::NEventReportResponse const *)arg1)->getEventID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NEventReportResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NEventReportResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NGetCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::attributeIdentifierList_t *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  imebra::NGetCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_NGetCommand",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NGetCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NGetCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NGetCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NGetCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NGetCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_NGetCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NGetCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_NGetCommand" "', argument " "5"" of type '" "imebra::attributeIdentifierList_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NGetCommand" "', argument " "5"" of type '" "imebra::attributeIdentifierList_t const &""'"); 
  }
  arg5 = reinterpret_cast< imebra::attributeIdentifierList_t * >(argp5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NGetCommand *)new imebra::NGetCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(imebra::attributeIdentifierList_t const &)*arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NGetCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NGetCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NGetCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NGetCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NGetCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NGetCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NGetCommand" "', argument " "1"" of type '" "imebra::NGetCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NGetCommand" "', argument " "1"" of type '" "imebra::NGetCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NGetCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NGetCommand *)new imebra::NGetCommand((imebra::NGetCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NGetCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NGetCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NGetCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NGetCommand__SWIG_1(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_NGetCommand__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NGetCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NGetCommand::NGetCommand(std::string const &,std::uint16_t,std::string const &,std::string const &,imebra::attributeIdentifierList_t const &)\n"
    "    imebra::NGetCommand::NGetCommand(imebra::NGetCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NGetCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NGetCommand *arg1 = (imebra::NGetCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NGetCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NGetCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NGetCommand" "', argument " "1"" of type '" "imebra::NGetCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NGetCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NGetCommand_getAttributeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NGetCommand *arg1 = (imebra::NGetCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< enum imebra::tagId_t,std::allocator< enum imebra::tagId_t > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NGetCommand_getAttributeList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NGetCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NGetCommand_getAttributeList" "', argument " "1"" of type '" "imebra::NGetCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NGetCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::NGetCommand const *)arg1)->getAttributeList();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::attributeIdentifierList_t(static_cast< const imebra::attributeIdentifierList_t& >(result))), SWIGTYPE_p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NGetCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NGetCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NGetResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::DataSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  imebra::NGetResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_NGetResponse",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NGetCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NGetResponse" "', argument " "1"" of type '" "imebra::NGetCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NGetResponse" "', argument " "1"" of type '" "imebra::NGetCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NGetCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NGetResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NGetResponse" "', argument " "3"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NGetResponse" "', argument " "3"" of type '" "imebra::DataSet const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::DataSet * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NGetResponse *)new imebra::NGetResponse((imebra::NGetCommand const &)*arg1,arg2,(imebra::DataSet const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NGetResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NGetResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NGetResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NGetResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NGetCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NGetResponse" "', argument " "1"" of type '" "imebra::NGetCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NGetResponse" "', argument " "1"" of type '" "imebra::NGetCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NGetCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NGetResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NGetResponse *)new imebra::NGetResponse((imebra::NGetCommand const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NGetResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NGetResponse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NGetResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NGetResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NGetResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NGetResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NGetResponse" "', argument " "1"" of type '" "imebra::NGetResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NGetResponse" "', argument " "1"" of type '" "imebra::NGetResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NGetResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NGetResponse *)new imebra::NGetResponse((imebra::NGetResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NGetResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NGetResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NGetResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NGetResponse__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NGetCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_NGetResponse__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NGetCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_imebra__DataSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_NGetResponse__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NGetResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NGetResponse::NGetResponse(imebra::NGetCommand const &,imebra::dimseStatusCode_t,imebra::DataSet const &)\n"
    "    imebra::NGetResponse::NGetResponse(imebra::NGetCommand const &,imebra::dimseStatusCode_t)\n"
    "    imebra::NGetResponse::NGetResponse(imebra::NGetResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NGetResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NGetResponse *arg1 = (imebra::NGetResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NGetResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NGetResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NGetResponse" "', argument " "1"" of type '" "imebra::NGetResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NGetResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NGetResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NGetResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NSetCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  imebra::NSetCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_NSetCommand",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NSetCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NSetCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NSetCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NSetCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NSetCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_NSetCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NSetCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_NSetCommand" "', argument " "5"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NSetCommand" "', argument " "5"" of type '" "imebra::DataSet const &""'"); 
  }
  arg5 = reinterpret_cast< imebra::DataSet * >(argp5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NSetCommand *)new imebra::NSetCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NSetCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NSetCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NSetCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NSetCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NSetCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NSetCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NSetCommand" "', argument " "1"" of type '" "imebra::NSetCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NSetCommand" "', argument " "1"" of type '" "imebra::NSetCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NSetCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NSetCommand *)new imebra::NSetCommand((imebra::NSetCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NSetCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NSetCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NSetCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NSetCommand__SWIG_1(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_imebra__DataSet, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_NSetCommand__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NSetCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NSetCommand::NSetCommand(std::string const &,std::uint16_t,std::string const &,std::string const &,imebra::DataSet const &)\n"
    "    imebra::NSetCommand::NSetCommand(imebra::NSetCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NSetCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NSetCommand *arg1 = (imebra::NSetCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NSetCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NSetCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NSetCommand" "', argument " "1"" of type '" "imebra::NSetCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NSetCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NSetCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NSetCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NSetResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NSetCommand *arg1 = 0 ;
  SwigValueWrapper< std::vector< enum imebra::tagId_t,std::allocator< enum imebra::tagId_t > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NSetResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NSetResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NSetCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NSetResponse" "', argument " "1"" of type '" "imebra::NSetCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NSetResponse" "', argument " "1"" of type '" "imebra::NSetCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NSetCommand * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NSetResponse" "', argument " "2"" of type '" "imebra::attributeIdentifierList_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NSetResponse" "', argument " "2"" of type '" "imebra::attributeIdentifierList_t""'");
    } else {
      imebra::attributeIdentifierList_t * temp = reinterpret_cast< imebra::attributeIdentifierList_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NSetResponse *)new imebra::NSetResponse((imebra::NSetCommand const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NSetResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NSetResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NSetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NSetResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NSetResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NSetCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NSetResponse" "', argument " "1"" of type '" "imebra::NSetCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NSetResponse" "', argument " "1"" of type '" "imebra::NSetCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NSetCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NSetResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NSetResponse *)new imebra::NSetResponse((imebra::NSetCommand const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NSetResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NSetResponse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NSetResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NSetResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NSetResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NSetResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NSetResponse" "', argument " "1"" of type '" "imebra::NSetResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NSetResponse" "', argument " "1"" of type '" "imebra::NSetResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NSetResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NSetResponse *)new imebra::NSetResponse((imebra::NSetResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NSetResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NSetResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NSetResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NSetResponse__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NSetCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NSetResponse__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NSetCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_NSetResponse__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NSetResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NSetResponse::NSetResponse(imebra::NSetCommand const &,imebra::attributeIdentifierList_t)\n"
    "    imebra::NSetResponse::NSetResponse(imebra::NSetCommand const &,imebra::dimseStatusCode_t)\n"
    "    imebra::NSetResponse::NSetResponse(imebra::NSetResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NSetResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NSetResponse *arg1 = (imebra::NSetResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NSetResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NSetResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NSetResponse" "', argument " "1"" of type '" "imebra::NSetResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NSetResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NSetResponse_getModifiedAttributes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NSetResponse *arg1 = (imebra::NSetResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< enum imebra::tagId_t,std::allocator< enum imebra::tagId_t > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NSetResponse_getModifiedAttributes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NSetResponse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NSetResponse_getModifiedAttributes" "', argument " "1"" of type '" "imebra::NSetResponse const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NSetResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::NSetResponse const *)arg1)->getModifiedAttributes();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::attributeIdentifierList_t(static_cast< const imebra::attributeIdentifierList_t& >(result))), SWIGTYPE_p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NSetResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NSetResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NActionCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  imebra::DataSet *arg6 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  imebra::NActionCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_NActionCommand",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NActionCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NActionCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NActionCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_NActionCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_NActionCommand" "', argument " "5"" of type '" "std::uint16_t""'");
  } 
  arg5 = static_cast< std::uint16_t >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_NActionCommand" "', argument " "6"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionCommand" "', argument " "6"" of type '" "imebra::DataSet const &""'"); 
  }
  arg6 = reinterpret_cast< imebra::DataSet * >(argp6);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NActionCommand *)new imebra::NActionCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,(imebra::DataSet const &)*arg6);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NActionCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NActionCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  imebra::NActionCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_NActionCommand",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NActionCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NActionCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NActionCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_NActionCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_NActionCommand" "', argument " "5"" of type '" "std::uint16_t""'");
  } 
  arg5 = static_cast< std::uint16_t >(val5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NActionCommand *)new imebra::NActionCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NActionCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NActionCommand__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NActionCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NActionCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NActionCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NActionCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NActionCommand" "', argument " "1"" of type '" "imebra::NActionCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionCommand" "', argument " "1"" of type '" "imebra::NActionCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NActionCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NActionCommand *)new imebra::NActionCommand((imebra::NActionCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NActionCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NActionCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NActionCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NActionCommand__SWIG_2(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_NActionCommand__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_imebra__DataSet, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_NActionCommand__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NActionCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NActionCommand::NActionCommand(std::string const &,std::uint16_t,std::string const &,std::string const &,std::uint16_t,imebra::DataSet const &)\n"
    "    imebra::NActionCommand::NActionCommand(std::string const &,std::uint16_t,std::string const &,std::string const &,std::uint16_t)\n"
    "    imebra::NActionCommand::NActionCommand(imebra::NActionCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NActionCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NActionCommand *arg1 = (imebra::NActionCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NActionCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NActionCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NActionCommand" "', argument " "1"" of type '" "imebra::NActionCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NActionCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NActionCommand_getActionID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NActionCommand *arg1 = (imebra::NActionCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NActionCommand_getActionID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NActionCommand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NActionCommand_getActionID" "', argument " "1"" of type '" "imebra::NActionCommand const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NActionCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)((imebra::NActionCommand const *)arg1)->getActionID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NActionCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NActionCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NActionResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NActionCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NActionResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NActionResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NActionCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NActionResponse" "', argument " "1"" of type '" "imebra::NActionCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionResponse" "', argument " "1"" of type '" "imebra::NActionCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NActionCommand * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NActionResponse" "', argument " "2"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionResponse" "', argument " "2"" of type '" "imebra::DataSet const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::DataSet * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NActionResponse *)new imebra::NActionResponse((imebra::NActionCommand const &)*arg1,(imebra::DataSet const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NActionResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NActionResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NActionCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NActionResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NActionResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NActionCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NActionResponse" "', argument " "1"" of type '" "imebra::NActionCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionResponse" "', argument " "1"" of type '" "imebra::NActionCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NActionCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NActionResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NActionResponse *)new imebra::NActionResponse((imebra::NActionCommand const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NActionResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NActionResponse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NActionResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NActionResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NActionResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NActionResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NActionResponse" "', argument " "1"" of type '" "imebra::NActionResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NActionResponse" "', argument " "1"" of type '" "imebra::NActionResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NActionResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NActionResponse *)new imebra::NActionResponse((imebra::NActionResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NActionResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NActionResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NActionResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NActionResponse__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NActionCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__DataSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NActionResponse__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NActionCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_NActionResponse__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NActionResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NActionResponse::NActionResponse(imebra::NActionCommand const &,imebra::DataSet const &)\n"
    "    imebra::NActionResponse::NActionResponse(imebra::NActionCommand const &,imebra::dimseStatusCode_t)\n"
    "    imebra::NActionResponse::NActionResponse(imebra::NActionResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NActionResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NActionResponse *arg1 = (imebra::NActionResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NActionResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NActionResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NActionResponse" "', argument " "1"" of type '" "imebra::NActionResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NActionResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NActionResponse_getActionID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NActionResponse *arg1 = (imebra::NActionResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NActionResponse_getActionID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NActionResponse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NActionResponse_getActionID" "', argument " "1"" of type '" "imebra::NActionResponse const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NActionResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)((imebra::NActionResponse const *)arg1)->getActionID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NActionResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NActionResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NCreateCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  imebra::NCreateCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_NCreateCommand",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NCreateCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NCreateCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NCreateCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_NCreateCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_NCreateCommand" "', argument " "5"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateCommand" "', argument " "5"" of type '" "imebra::DataSet const &""'"); 
  }
  arg5 = reinterpret_cast< imebra::DataSet * >(argp5);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NCreateCommand *)new imebra::NCreateCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NCreateCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NCreateCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  imebra::NCreateCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_NCreateCommand",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NCreateCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NCreateCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NCreateCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_NCreateCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NCreateCommand *)new imebra::NCreateCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NCreateCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NCreateCommand__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NCreateCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NCreateCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NCreateCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NCreateCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NCreateCommand" "', argument " "1"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateCommand" "', argument " "1"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NCreateCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NCreateCommand *)new imebra::NCreateCommand((imebra::NCreateCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NCreateCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NCreateCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NCreateCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NCreateCommand__SWIG_2(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_NCreateCommand__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_imebra__DataSet, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_NCreateCommand__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NCreateCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NCreateCommand::NCreateCommand(std::string const &,std::uint16_t,std::string const &,std::string const &,imebra::DataSet const &)\n"
    "    imebra::NCreateCommand::NCreateCommand(std::string const &,std::uint16_t,std::string const &,std::string const &)\n"
    "    imebra::NCreateCommand::NCreateCommand(imebra::NCreateCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NCreateCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NCreateCommand *arg1 = (imebra::NCreateCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NCreateCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NCreateCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NCreateCommand" "', argument " "1"" of type '" "imebra::NCreateCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NCreateCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NCreateCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NCreateCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NCreateResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NCreateCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NCreateResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NCreateCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NCreateCommand * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NCreateResponse" "', argument " "2"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateResponse" "', argument " "2"" of type '" "imebra::DataSet const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::DataSet * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,(imebra::DataSet const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NCreateResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NCreateResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NCreateCommand *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::DataSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_NCreateResponse",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NCreateCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NCreateCommand * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NCreateResponse" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateResponse" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_imebra__DataSet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NCreateResponse" "', argument " "3"" of type '" "imebra::DataSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateResponse" "', argument " "3"" of type '" "imebra::DataSet const &""'"); 
  }
  arg3 = reinterpret_cast< imebra::DataSet * >(argp3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,(std::string const &)*arg2,(imebra::DataSet const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NCreateResponse, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NCreateResponse__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NCreateCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NCreateResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NCreateCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NCreateCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NCreateResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NCreateResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NCreateResponse__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NCreateCommand *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NCreateResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NCreateCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NCreateCommand * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NCreateResponse" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateResponse" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,(std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NCreateResponse, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NCreateResponse__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NCreateResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NCreateResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NCreateResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NCreateResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NCreateResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NCreateResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NCreateResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NCreateResponse__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NCreateCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_imebra__DataSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NCreateResponse__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NCreateCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_NCreateResponse__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NCreateCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NCreateResponse__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NCreateCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_imebra__DataSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_NCreateResponse__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NCreateResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NCreateResponse::NCreateResponse(imebra::NCreateCommand const &,imebra::DataSet const &)\n"
    "    imebra::NCreateResponse::NCreateResponse(imebra::NCreateCommand const &,std::string const &,imebra::DataSet const &)\n"
    "    imebra::NCreateResponse::NCreateResponse(imebra::NCreateCommand const &,imebra::dimseStatusCode_t)\n"
    "    imebra::NCreateResponse::NCreateResponse(imebra::NCreateCommand const &,std::string const &)\n"
    "    imebra::NCreateResponse::NCreateResponse(imebra::NCreateResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NCreateResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NCreateResponse *arg1 = (imebra::NCreateResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NCreateResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NCreateResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NCreateResponse" "', argument " "1"" of type '" "imebra::NCreateResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NCreateResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NCreateResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NCreateResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NDeleteCommand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  imebra::NDeleteCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_NDeleteCommand",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NDeleteCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NDeleteCommand" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NDeleteCommand" "', argument " "2"" of type '" "std::uint16_t""'");
  } 
  arg2 = static_cast< std::uint16_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NDeleteCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NDeleteCommand" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_NDeleteCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NDeleteCommand" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NDeleteCommand *)new imebra::NDeleteCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NDeleteCommand, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NDeleteCommand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NDeleteCommand *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NDeleteCommand *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NDeleteCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NDeleteCommand,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NDeleteCommand" "', argument " "1"" of type '" "imebra::NDeleteCommand const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NDeleteCommand" "', argument " "1"" of type '" "imebra::NDeleteCommand const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NDeleteCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NDeleteCommand *)new imebra::NDeleteCommand((imebra::NDeleteCommand const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NDeleteCommand, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NDeleteCommand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NDeleteCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NDeleteCommand__SWIG_1(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_NDeleteCommand__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NDeleteCommand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NDeleteCommand::NDeleteCommand(std::string const &,std::uint16_t,std::string const &,std::string const &)\n"
    "    imebra::NDeleteCommand::NDeleteCommand(imebra::NDeleteCommand const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NDeleteCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NDeleteCommand *arg1 = (imebra::NDeleteCommand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NDeleteCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NDeleteCommand, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NDeleteCommand" "', argument " "1"" of type '" "imebra::NDeleteCommand *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NDeleteCommand * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NDeleteCommand_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NDeleteCommand, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NDeleteResponse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NDeleteCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::NDeleteResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NDeleteResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NDeleteCommand,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NDeleteResponse" "', argument " "1"" of type '" "imebra::NDeleteCommand &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NDeleteResponse" "', argument " "1"" of type '" "imebra::NDeleteCommand &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NDeleteCommand * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NDeleteResponse" "', argument " "2"" of type '" "imebra::dimseStatusCode_t""'");
  } 
  arg2 = static_cast< imebra::dimseStatusCode_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NDeleteResponse *)new imebra::NDeleteResponse(*arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NDeleteResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NDeleteResponse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NDeleteResponse *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::NDeleteResponse *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NDeleteResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__NDeleteResponse,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NDeleteResponse" "', argument " "1"" of type '" "imebra::NDeleteResponse const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NDeleteResponse" "', argument " "1"" of type '" "imebra::NDeleteResponse const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::NDeleteResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::NDeleteResponse *)new imebra::NDeleteResponse((imebra::NDeleteResponse const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__NDeleteResponse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NDeleteResponse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__NDeleteResponse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NDeleteResponse__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__NDeleteCommand, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_NDeleteResponse__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NDeleteResponse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::NDeleteResponse::NDeleteResponse(imebra::NDeleteCommand &,imebra::dimseStatusCode_t)\n"
    "    imebra::NDeleteResponse::NDeleteResponse(imebra::NDeleteResponse const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NDeleteResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::NDeleteResponse *arg1 = (imebra::NDeleteResponse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NDeleteResponse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__NDeleteResponse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NDeleteResponse" "', argument " "1"" of type '" "imebra::NDeleteResponse *""'"); 
  }
  arg1 = reinterpret_cast< imebra::NDeleteResponse * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NDeleteResponse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__NDeleteResponse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DimseService__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::AssociationBase *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DimseService *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DimseService",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__AssociationBase,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DimseService" "', argument " "1"" of type '" "imebra::AssociationBase &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DimseService" "', argument " "1"" of type '" "imebra::AssociationBase &""'"); 
  }
  arg1 = reinterpret_cast< imebra::AssociationBase * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DimseService *)new imebra::DimseService(*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DimseService, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DimseService__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::DimseService *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DimseService",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__DimseService,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DimseService" "', argument " "1"" of type '" "imebra::DimseService const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DimseService" "', argument " "1"" of type '" "imebra::DimseService const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::DimseService *)new imebra::DimseService((imebra::DimseService const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__DimseService, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DimseService(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_imebra__AssociationBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DimseService__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__DimseService, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DimseService__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DimseService'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::DimseService::DimseService(imebra::AssociationBase &)\n"
    "    imebra::DimseService::DimseService(imebra::DimseService const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DimseService(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DimseService",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DimseService" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getTransferSyntax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getTransferSyntax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getTransferSyntax" "', argument " "1"" of type '" "imebra::DimseService const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getTransferSyntax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getTransferSyntax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::DimseService const *)arg1)->getTransferSyntax((std::string const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getNextCommandID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseService_getNextCommandID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getNextCommandID" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint16_t)(arg1)->getNextCommandID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::DimseCommand > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimseService_getCommand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getCommand" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getCommand();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::DimseCommand(static_cast< const imebra::DimseCommand& >(result))), SWIGTYPE_p_imebra__DimseCommand, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_sendCommandOrResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::DimseCommandBase *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_sendCommandOrResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_sendCommandOrResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__DimseCommandBase,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_sendCommandOrResponse" "', argument " "2"" of type '" "imebra::DimseCommandBase const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_sendCommandOrResponse" "', argument " "2"" of type '" "imebra::DimseCommandBase const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::DimseCommandBase * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->sendCommandOrResponse((imebra::DimseCommandBase const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getCStoreResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CStoreCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::CStoreResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getCStoreResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getCStoreResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__CStoreCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getCStoreResponse" "', argument " "2"" of type '" "imebra::CStoreCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getCStoreResponse" "', argument " "2"" of type '" "imebra::CStoreCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::CStoreCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getCStoreResponse((imebra::CStoreCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CStoreResponse(static_cast< const imebra::CStoreResponse& >(result))), SWIGTYPE_p_imebra__CStoreResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getCGetResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CGetCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::CGetResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getCGetResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getCGetResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__CGetCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getCGetResponse" "', argument " "2"" of type '" "imebra::CGetCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getCGetResponse" "', argument " "2"" of type '" "imebra::CGetCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::CGetCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getCGetResponse((imebra::CGetCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CGetResponse(static_cast< const imebra::CGetResponse& >(result))), SWIGTYPE_p_imebra__CGetResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getCFindResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CFindCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::CFindResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getCFindResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getCFindResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__CFindCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getCFindResponse" "', argument " "2"" of type '" "imebra::CFindCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getCFindResponse" "', argument " "2"" of type '" "imebra::CFindCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::CFindCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getCFindResponse((imebra::CFindCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CFindResponse(static_cast< const imebra::CFindResponse& >(result))), SWIGTYPE_p_imebra__CFindResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getCMoveResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CMoveCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::CMoveResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getCMoveResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getCMoveResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__CMoveCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getCMoveResponse" "', argument " "2"" of type '" "imebra::CMoveCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getCMoveResponse" "', argument " "2"" of type '" "imebra::CMoveCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::CMoveCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getCMoveResponse((imebra::CMoveCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CMoveResponse(static_cast< const imebra::CMoveResponse& >(result))), SWIGTYPE_p_imebra__CMoveResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getCEchoResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CEchoCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::CEchoResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getCEchoResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getCEchoResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__CEchoCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getCEchoResponse" "', argument " "2"" of type '" "imebra::CEchoCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getCEchoResponse" "', argument " "2"" of type '" "imebra::CEchoCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::CEchoCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getCEchoResponse((imebra::CEchoCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::CEchoResponse(static_cast< const imebra::CEchoResponse& >(result))), SWIGTYPE_p_imebra__CEchoResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getNEventReportResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NEventReportCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::NEventReportResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getNEventReportResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getNEventReportResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__NEventReportCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getNEventReportResponse" "', argument " "2"" of type '" "imebra::NEventReportCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getNEventReportResponse" "', argument " "2"" of type '" "imebra::NEventReportCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::NEventReportCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getNEventReportResponse((imebra::NEventReportCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NEventReportResponse(static_cast< const imebra::NEventReportResponse& >(result))), SWIGTYPE_p_imebra__NEventReportResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getNGetResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NGetCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::NGetResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getNGetResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getNGetResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__NGetCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getNGetResponse" "', argument " "2"" of type '" "imebra::NGetCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getNGetResponse" "', argument " "2"" of type '" "imebra::NGetCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::NGetCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getNGetResponse((imebra::NGetCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NGetResponse(static_cast< const imebra::NGetResponse& >(result))), SWIGTYPE_p_imebra__NGetResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getNSetResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NSetCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::NSetResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getNSetResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getNSetResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__NSetCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getNSetResponse" "', argument " "2"" of type '" "imebra::NSetCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getNSetResponse" "', argument " "2"" of type '" "imebra::NSetCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::NSetCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getNSetResponse((imebra::NSetCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NSetResponse(static_cast< const imebra::NSetResponse& >(result))), SWIGTYPE_p_imebra__NSetResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getNActionResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NActionCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::NActionResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getNActionResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getNActionResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__NActionCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getNActionResponse" "', argument " "2"" of type '" "imebra::NActionCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getNActionResponse" "', argument " "2"" of type '" "imebra::NActionCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::NActionCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getNActionResponse((imebra::NActionCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NActionResponse(static_cast< const imebra::NActionResponse& >(result))), SWIGTYPE_p_imebra__NActionResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getNCreateResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NCreateCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::NCreateResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getNCreateResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getNCreateResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__NCreateCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getNCreateResponse" "', argument " "2"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getNCreateResponse" "', argument " "2"" of type '" "imebra::NCreateCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::NCreateCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getNCreateResponse((imebra::NCreateCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NCreateResponse(static_cast< const imebra::NCreateResponse& >(result))), SWIGTYPE_p_imebra__NCreateResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimseService_getNDeleteResponse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NDeleteCommand *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< imebra::NDeleteResponse > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimseService_getNDeleteResponse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__DimseService, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimseService_getNDeleteResponse" "', argument " "1"" of type '" "imebra::DimseService *""'"); 
  }
  arg1 = reinterpret_cast< imebra::DimseService * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__NDeleteCommand,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimseService_getNDeleteResponse" "', argument " "2"" of type '" "imebra::NDeleteCommand const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimseService_getNDeleteResponse" "', argument " "2"" of type '" "imebra::NDeleteCommand const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::NDeleteCommand * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getNDeleteResponse((imebra::NDeleteCommand const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::NDeleteResponse(static_cast< const imebra::NDeleteResponse& >(result))), SWIGTYPE_p_imebra__NDeleteResponse, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DimseService_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__DimseService, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Date__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Date",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Date,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Date" "', argument " "1"" of type '" "imebra::Date const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Date" "', argument " "1"" of type '" "imebra::Date const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Date *)new imebra::Date((imebra::Date const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Date, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Date(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Date",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Date, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Date" "', argument " "1"" of type '" "imebra::Date *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Date__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::uint32_t arg1 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  std::uint32_t arg7 ;
  std::int32_t arg8 ;
  std::int32_t arg9 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  imebra::Date *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_Date",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Date" "', argument " "1"" of type '" "std::uint32_t""'");
  } 
  arg1 = static_cast< std::uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Date" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Date" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Date" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Date" "', argument " "5"" of type '" "std::uint32_t""'");
  } 
  arg5 = static_cast< std::uint32_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Date" "', argument " "6"" of type '" "std::uint32_t""'");
  } 
  arg6 = static_cast< std::uint32_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Date" "', argument " "7"" of type '" "std::uint32_t""'");
  } 
  arg7 = static_cast< std::uint32_t >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Date" "', argument " "8"" of type '" "std::int32_t""'");
  } 
  arg8 = static_cast< std::int32_t >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_Date" "', argument " "9"" of type '" "std::int32_t""'");
  } 
  arg9 = static_cast< std::int32_t >(val9);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Date *)new imebra::Date(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Date, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Date(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__Date, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Date__SWIG_0(self, args);
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_Date__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Date'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::Date::Date(imebra::Date const &)\n"
    "    imebra::Date::Date(std::uint32_t const,std::uint32_t const,std::uint32_t const,std::uint32_t const,std::uint32_t const,std::uint32_t const,std::uint32_t const,std::int32_t const,std::int32_t const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Date_getYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Date_getYear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getYear" "', argument " "1"" of type '" "imebra::Date const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Date const *)arg1)->getYear();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_getMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Date_getMonth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getMonth" "', argument " "1"" of type '" "imebra::Date const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Date const *)arg1)->getMonth();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_getDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Date_getDay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getDay" "', argument " "1"" of type '" "imebra::Date const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Date const *)arg1)->getDay();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_getHour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Date_getHour",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getHour" "', argument " "1"" of type '" "imebra::Date const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Date const *)arg1)->getHour();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_getMinutes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Date_getMinutes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getMinutes" "', argument " "1"" of type '" "imebra::Date const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Date const *)arg1)->getMinutes();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_getSeconds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Date_getSeconds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getSeconds" "', argument " "1"" of type '" "imebra::Date const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Date const *)arg1)->getSeconds();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_getNanoseconds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Date_getNanoseconds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getNanoseconds" "', argument " "1"" of type '" "imebra::Date const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Date const *)arg1)->getNanoseconds();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_getOffsetHours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Date_getOffsetHours",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getOffsetHours" "', argument " "1"" of type '" "imebra::Date const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::int32_t)((imebra::Date const *)arg1)->getOffsetHours();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_getOffsetMinutes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Date_getOffsetMinutes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getOffsetMinutes" "', argument " "1"" of type '" "imebra::Date const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Date * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::int32_t)((imebra::Date const *)arg1)->getOffsetMinutes();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Date_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__Date, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Age__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Age *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::Age *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Age",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__Age,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Age" "', argument " "1"" of type '" "imebra::Age const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Age" "', argument " "1"" of type '" "imebra::Age const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::Age * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Age *)new imebra::Age((imebra::Age const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Age, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Age(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Age",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Age, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Age" "', argument " "1"" of type '" "imebra::Age *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Age * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Age__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::uint32_t arg1 ;
  imebra::ageUnit_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  imebra::Age *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Age",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Age" "', argument " "1"" of type '" "std::uint32_t""'");
  } 
  arg1 = static_cast< std::uint32_t >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Age" "', argument " "2"" of type '" "imebra::ageUnit_t""'");
  } 
  arg2 = static_cast< imebra::ageUnit_t >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::Age *)new imebra::Age(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__Age, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Age(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__Age, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Age__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Age__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Age'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::Age::Age(imebra::Age const &)\n"
    "    imebra::Age::Age(std::uint32_t,imebra::ageUnit_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Age_getYears(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Age_getYears",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Age, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Age_getYears" "', argument " "1"" of type '" "imebra::Age const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Age * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (double)((imebra::Age const *)arg1)->getYears();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Age_getAgeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Age_getAgeValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Age, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Age_getAgeValue" "', argument " "1"" of type '" "imebra::Age const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Age * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (std::uint32_t)((imebra::Age const *)arg1)->getAgeValue();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Age_getAgeUnits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::ageUnit_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Age_getAgeUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__Age, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Age_getAgeUnits" "', argument " "1"" of type '" "imebra::Age const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::Age * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::ageUnit_t)((imebra::Age const *)arg1)->getAgeUnits();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Age_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__Age, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PatientName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PatientName *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::PatientName *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PatientName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__PatientName,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PatientName" "', argument " "1"" of type '" "imebra::PatientName const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PatientName" "', argument " "1"" of type '" "imebra::PatientName const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::PatientName * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::PatientName *)new imebra::PatientName((imebra::PatientName const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__PatientName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PatientName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PatientName *arg1 = (imebra::PatientName *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PatientName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PatientName, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PatientName" "', argument " "1"" of type '" "imebra::PatientName *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PatientName * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PatientName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  imebra::PatientName *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_PatientName",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PatientName" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PatientName" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PatientName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PatientName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PatientName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PatientName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::PatientName *)new imebra::PatientName((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__PatientName, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PatientName(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__PatientName, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PatientName__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_PatientName__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PatientName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::PatientName::PatientName(imebra::PatientName const &)\n"
    "    imebra::PatientName::PatientName(std::string const &,std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PatientName_getAlphabeticRepresentation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PatientName *arg1 = (imebra::PatientName *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatientName_getAlphabeticRepresentation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PatientName, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatientName_getAlphabeticRepresentation" "', argument " "1"" of type '" "imebra::PatientName const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PatientName * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::PatientName const *)arg1)->getAlphabeticRepresentation();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatientName_getIdeographicRepresentation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PatientName *arg1 = (imebra::PatientName *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatientName_getIdeographicRepresentation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PatientName, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatientName_getIdeographicRepresentation" "', argument " "1"" of type '" "imebra::PatientName const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PatientName * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::PatientName const *)arg1)->getIdeographicRepresentation();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PatientName_getPhoneticRepresentation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::PatientName *arg1 = (imebra::PatientName *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PatientName_getPhoneticRepresentation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__PatientName, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PatientName_getPhoneticRepresentation" "', argument " "1"" of type '" "imebra::PatientName const *""'"); 
  }
  arg1 = reinterpret_cast< imebra::PatientName * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((imebra::PatientName const *)arg1)->getPhoneticRepresentation();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PatientName_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__PatientName, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_UIDGeneratorFactory_registerUIDGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  imebra::BaseUIDGenerator *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UIDGeneratorFactory_registerUIDGenerator",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIDGeneratorFactory_registerUIDGenerator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UIDGeneratorFactory_registerUIDGenerator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_imebra__BaseUIDGenerator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UIDGeneratorFactory_registerUIDGenerator" "', argument " "2"" of type '" "imebra::BaseUIDGenerator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UIDGeneratorFactory_registerUIDGenerator" "', argument " "2"" of type '" "imebra::BaseUIDGenerator const &""'"); 
  }
  arg2 = reinterpret_cast< imebra::BaseUIDGenerator * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        imebra::UIDGeneratorFactory::registerUIDGenerator((std::string const &)*arg1,(imebra::BaseUIDGenerator const &)*arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIDGeneratorFactory_getUIDGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< imebra::BaseUIDGenerator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UIDGeneratorFactory_getUIDGenerator",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIDGeneratorFactory_getUIDGenerator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UIDGeneratorFactory_getUIDGenerator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::UIDGeneratorFactory::getUIDGenerator((std::string const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::BaseUIDGenerator(static_cast< const imebra::BaseUIDGenerator& >(result))), SWIGTYPE_p_imebra__BaseUIDGenerator, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIDGeneratorFactory_getDefaultUIDGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< imebra::BaseUIDGenerator > result;
  
  if (!PyArg_ParseTuple(args,(char *)":UIDGeneratorFactory_getDefaultUIDGenerator")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = imebra::UIDGeneratorFactory::getDefaultUIDGenerator();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj((new imebra::BaseUIDGenerator(static_cast< const imebra::BaseUIDGenerator& >(result))), SWIGTYPE_p_imebra__BaseUIDGenerator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIDGeneratorFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::UIDGeneratorFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UIDGeneratorFactory")) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::UIDGeneratorFactory *)new imebra::UIDGeneratorFactory();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__UIDGeneratorFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UIDGeneratorFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::UIDGeneratorFactory *arg1 = (imebra::UIDGeneratorFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UIDGeneratorFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__UIDGeneratorFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UIDGeneratorFactory" "', argument " "1"" of type '" "imebra::UIDGeneratorFactory *""'"); 
  }
  arg1 = reinterpret_cast< imebra::UIDGeneratorFactory * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UIDGeneratorFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__UIDGeneratorFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BaseUIDGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseUIDGenerator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::BaseUIDGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BaseUIDGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__BaseUIDGenerator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BaseUIDGenerator" "', argument " "1"" of type '" "imebra::BaseUIDGenerator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BaseUIDGenerator" "', argument " "1"" of type '" "imebra::BaseUIDGenerator const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseUIDGenerator * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::BaseUIDGenerator *)new imebra::BaseUIDGenerator((imebra::BaseUIDGenerator const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__BaseUIDGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseUIDGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseUIDGenerator *arg1 = (imebra::BaseUIDGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseUIDGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__BaseUIDGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseUIDGenerator" "', argument " "1"" of type '" "imebra::BaseUIDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseUIDGenerator * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseUIDGenerator_getUID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::BaseUIDGenerator *arg1 = (imebra::BaseUIDGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseUIDGenerator_getUID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__BaseUIDGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseUIDGenerator_getUID" "', argument " "1"" of type '" "imebra::BaseUIDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< imebra::BaseUIDGenerator * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (arg1)->getUID();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseUIDGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__BaseUIDGenerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RandomUIDGenerator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  imebra::RandomUIDGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RandomUIDGenerator",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomUIDGenerator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomUIDGenerator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RandomUIDGenerator" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RandomUIDGenerator" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::RandomUIDGenerator *)new imebra::RandomUIDGenerator((std::string const &)*arg1,arg2,arg3);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__RandomUIDGenerator, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomUIDGenerator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::RandomUIDGenerator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::RandomUIDGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RandomUIDGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__RandomUIDGenerator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomUIDGenerator" "', argument " "1"" of type '" "imebra::RandomUIDGenerator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomUIDGenerator" "', argument " "1"" of type '" "imebra::RandomUIDGenerator const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::RandomUIDGenerator * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::RandomUIDGenerator *)new imebra::RandomUIDGenerator((imebra::RandomUIDGenerator const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__RandomUIDGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomUIDGenerator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__RandomUIDGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RandomUIDGenerator__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RandomUIDGenerator__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RandomUIDGenerator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::RandomUIDGenerator::RandomUIDGenerator(std::string const &,std::uint32_t,std::uint32_t)\n"
    "    imebra::RandomUIDGenerator::RandomUIDGenerator(imebra::RandomUIDGenerator const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_RandomUIDGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::RandomUIDGenerator *arg1 = (imebra::RandomUIDGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RandomUIDGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__RandomUIDGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RandomUIDGenerator" "', argument " "1"" of type '" "imebra::RandomUIDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< imebra::RandomUIDGenerator * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RandomUIDGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__RandomUIDGenerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SerialNumberUIDGenerator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  imebra::SerialNumberUIDGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SerialNumberUIDGenerator",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SerialNumberUIDGenerator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SerialNumberUIDGenerator" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SerialNumberUIDGenerator" "', argument " "2"" of type '" "std::uint32_t""'");
  } 
  arg2 = static_cast< std::uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SerialNumberUIDGenerator" "', argument " "3"" of type '" "std::uint32_t""'");
  } 
  arg3 = static_cast< std::uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SerialNumberUIDGenerator" "', argument " "4"" of type '" "std::uint32_t""'");
  } 
  arg4 = static_cast< std::uint32_t >(val4);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::SerialNumberUIDGenerator *)new imebra::SerialNumberUIDGenerator((std::string const &)*arg1,arg2,arg3,arg4);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__SerialNumberUIDGenerator, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SerialNumberUIDGenerator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::SerialNumberUIDGenerator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  imebra::SerialNumberUIDGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SerialNumberUIDGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_imebra__SerialNumberUIDGenerator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SerialNumberUIDGenerator" "', argument " "1"" of type '" "imebra::SerialNumberUIDGenerator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SerialNumberUIDGenerator" "', argument " "1"" of type '" "imebra::SerialNumberUIDGenerator const &""'"); 
  }
  arg1 = reinterpret_cast< imebra::SerialNumberUIDGenerator * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (imebra::SerialNumberUIDGenerator *)new imebra::SerialNumberUIDGenerator((imebra::SerialNumberUIDGenerator const &)*arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_imebra__SerialNumberUIDGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SerialNumberUIDGenerator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_imebra__SerialNumberUIDGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SerialNumberUIDGenerator__SWIG_1(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SerialNumberUIDGenerator__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SerialNumberUIDGenerator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    imebra::SerialNumberUIDGenerator::SerialNumberUIDGenerator(std::string const &,std::uint32_t,std::uint32_t,std::uint32_t)\n"
    "    imebra::SerialNumberUIDGenerator::SerialNumberUIDGenerator(imebra::SerialNumberUIDGenerator const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SerialNumberUIDGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  imebra::SerialNumberUIDGenerator *arg1 = (imebra::SerialNumberUIDGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SerialNumberUIDGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_imebra__SerialNumberUIDGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SerialNumberUIDGenerator" "', argument " "1"" of type '" "imebra::SerialNumberUIDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< imebra::SerialNumberUIDGenerator * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        delete arg1;
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IndexError, error.c_str());
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_IOError, error.c_str());
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_ValueError, error.c_str());
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_MemoryError, error.c_str());
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_TypeError, error.c_str());
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      SWIG_exception(SWIG_RuntimeError, error.c_str());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SerialNumberUIDGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_imebra__SerialNumberUIDGenerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"cdata", _wrap_cdata, METH_VARARGS, NULL},
	 { (char *)"memmove", _wrap_memmove, METH_VARARGS, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"StringsList_iterator", _wrap_StringsList_iterator, METH_VARARGS, NULL},
	 { (char *)"StringsList___nonzero__", _wrap_StringsList___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StringsList___bool__", _wrap_StringsList___bool__, METH_VARARGS, NULL},
	 { (char *)"StringsList___len__", _wrap_StringsList___len__, METH_VARARGS, NULL},
	 { (char *)"StringsList___getslice__", _wrap_StringsList___getslice__, METH_VARARGS, NULL},
	 { (char *)"StringsList___setslice__", _wrap_StringsList___setslice__, METH_VARARGS, NULL},
	 { (char *)"StringsList___delslice__", _wrap_StringsList___delslice__, METH_VARARGS, NULL},
	 { (char *)"StringsList___delitem__", _wrap_StringsList___delitem__, METH_VARARGS, NULL},
	 { (char *)"StringsList___getitem__", _wrap_StringsList___getitem__, METH_VARARGS, NULL},
	 { (char *)"StringsList___setitem__", _wrap_StringsList___setitem__, METH_VARARGS, NULL},
	 { (char *)"StringsList_pop", _wrap_StringsList_pop, METH_VARARGS, NULL},
	 { (char *)"StringsList_append", _wrap_StringsList_append, METH_VARARGS, NULL},
	 { (char *)"StringsList_empty", _wrap_StringsList_empty, METH_VARARGS, NULL},
	 { (char *)"StringsList_size", _wrap_StringsList_size, METH_VARARGS, NULL},
	 { (char *)"StringsList_swap", _wrap_StringsList_swap, METH_VARARGS, NULL},
	 { (char *)"StringsList_begin", _wrap_StringsList_begin, METH_VARARGS, NULL},
	 { (char *)"StringsList_end", _wrap_StringsList_end, METH_VARARGS, NULL},
	 { (char *)"StringsList_rbegin", _wrap_StringsList_rbegin, METH_VARARGS, NULL},
	 { (char *)"StringsList_rend", _wrap_StringsList_rend, METH_VARARGS, NULL},
	 { (char *)"StringsList_clear", _wrap_StringsList_clear, METH_VARARGS, NULL},
	 { (char *)"StringsList_get_allocator", _wrap_StringsList_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StringsList_pop_back", _wrap_StringsList_pop_back, METH_VARARGS, NULL},
	 { (char *)"StringsList_erase", _wrap_StringsList_erase, METH_VARARGS, NULL},
	 { (char *)"new_StringsList", _wrap_new_StringsList, METH_VARARGS, NULL},
	 { (char *)"StringsList_push_back", _wrap_StringsList_push_back, METH_VARARGS, NULL},
	 { (char *)"StringsList_front", _wrap_StringsList_front, METH_VARARGS, NULL},
	 { (char *)"StringsList_back", _wrap_StringsList_back, METH_VARARGS, NULL},
	 { (char *)"StringsList_assign", _wrap_StringsList_assign, METH_VARARGS, NULL},
	 { (char *)"StringsList_resize", _wrap_StringsList_resize, METH_VARARGS, NULL},
	 { (char *)"StringsList_insert", _wrap_StringsList_insert, METH_VARARGS, NULL},
	 { (char *)"StringsList_reserve", _wrap_StringsList_reserve, METH_VARARGS, NULL},
	 { (char *)"StringsList_capacity", _wrap_StringsList_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StringsList", _wrap_delete_StringsList, METH_VARARGS, NULL},
	 { (char *)"StringsList_swigregister", StringsList_swigregister, METH_VARARGS, NULL},
	 { (char *)"Groups_iterator", _wrap_Groups_iterator, METH_VARARGS, NULL},
	 { (char *)"Groups___nonzero__", _wrap_Groups___nonzero__, METH_VARARGS, NULL},
	 { (char *)"Groups___bool__", _wrap_Groups___bool__, METH_VARARGS, NULL},
	 { (char *)"Groups___len__", _wrap_Groups___len__, METH_VARARGS, NULL},
	 { (char *)"Groups___getslice__", _wrap_Groups___getslice__, METH_VARARGS, NULL},
	 { (char *)"Groups___setslice__", _wrap_Groups___setslice__, METH_VARARGS, NULL},
	 { (char *)"Groups___delslice__", _wrap_Groups___delslice__, METH_VARARGS, NULL},
	 { (char *)"Groups___delitem__", _wrap_Groups___delitem__, METH_VARARGS, NULL},
	 { (char *)"Groups___getitem__", _wrap_Groups___getitem__, METH_VARARGS, NULL},
	 { (char *)"Groups___setitem__", _wrap_Groups___setitem__, METH_VARARGS, NULL},
	 { (char *)"Groups_pop", _wrap_Groups_pop, METH_VARARGS, NULL},
	 { (char *)"Groups_append", _wrap_Groups_append, METH_VARARGS, NULL},
	 { (char *)"Groups_empty", _wrap_Groups_empty, METH_VARARGS, NULL},
	 { (char *)"Groups_size", _wrap_Groups_size, METH_VARARGS, NULL},
	 { (char *)"Groups_swap", _wrap_Groups_swap, METH_VARARGS, NULL},
	 { (char *)"Groups_begin", _wrap_Groups_begin, METH_VARARGS, NULL},
	 { (char *)"Groups_end", _wrap_Groups_end, METH_VARARGS, NULL},
	 { (char *)"Groups_rbegin", _wrap_Groups_rbegin, METH_VARARGS, NULL},
	 { (char *)"Groups_rend", _wrap_Groups_rend, METH_VARARGS, NULL},
	 { (char *)"Groups_clear", _wrap_Groups_clear, METH_VARARGS, NULL},
	 { (char *)"Groups_get_allocator", _wrap_Groups_get_allocator, METH_VARARGS, NULL},
	 { (char *)"Groups_pop_back", _wrap_Groups_pop_back, METH_VARARGS, NULL},
	 { (char *)"Groups_erase", _wrap_Groups_erase, METH_VARARGS, NULL},
	 { (char *)"new_Groups", _wrap_new_Groups, METH_VARARGS, NULL},
	 { (char *)"Groups_push_back", _wrap_Groups_push_back, METH_VARARGS, NULL},
	 { (char *)"Groups_front", _wrap_Groups_front, METH_VARARGS, NULL},
	 { (char *)"Groups_back", _wrap_Groups_back, METH_VARARGS, NULL},
	 { (char *)"Groups_assign", _wrap_Groups_assign, METH_VARARGS, NULL},
	 { (char *)"Groups_resize", _wrap_Groups_resize, METH_VARARGS, NULL},
	 { (char *)"Groups_insert", _wrap_Groups_insert, METH_VARARGS, NULL},
	 { (char *)"Groups_reserve", _wrap_Groups_reserve, METH_VARARGS, NULL},
	 { (char *)"Groups_capacity", _wrap_Groups_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_Groups", _wrap_delete_Groups, METH_VARARGS, NULL},
	 { (char *)"Groups_swigregister", Groups_swigregister, METH_VARARGS, NULL},
	 { (char *)"TagsIds_iterator", _wrap_TagsIds_iterator, METH_VARARGS, NULL},
	 { (char *)"TagsIds___nonzero__", _wrap_TagsIds___nonzero__, METH_VARARGS, NULL},
	 { (char *)"TagsIds___bool__", _wrap_TagsIds___bool__, METH_VARARGS, NULL},
	 { (char *)"TagsIds___len__", _wrap_TagsIds___len__, METH_VARARGS, NULL},
	 { (char *)"TagsIds___getslice__", _wrap_TagsIds___getslice__, METH_VARARGS, NULL},
	 { (char *)"TagsIds___setslice__", _wrap_TagsIds___setslice__, METH_VARARGS, NULL},
	 { (char *)"TagsIds___delslice__", _wrap_TagsIds___delslice__, METH_VARARGS, NULL},
	 { (char *)"TagsIds___delitem__", _wrap_TagsIds___delitem__, METH_VARARGS, NULL},
	 { (char *)"TagsIds___getitem__", _wrap_TagsIds___getitem__, METH_VARARGS, NULL},
	 { (char *)"TagsIds___setitem__", _wrap_TagsIds___setitem__, METH_VARARGS, NULL},
	 { (char *)"TagsIds_pop", _wrap_TagsIds_pop, METH_VARARGS, NULL},
	 { (char *)"TagsIds_append", _wrap_TagsIds_append, METH_VARARGS, NULL},
	 { (char *)"TagsIds_empty", _wrap_TagsIds_empty, METH_VARARGS, NULL},
	 { (char *)"TagsIds_size", _wrap_TagsIds_size, METH_VARARGS, NULL},
	 { (char *)"TagsIds_swap", _wrap_TagsIds_swap, METH_VARARGS, NULL},
	 { (char *)"TagsIds_begin", _wrap_TagsIds_begin, METH_VARARGS, NULL},
	 { (char *)"TagsIds_end", _wrap_TagsIds_end, METH_VARARGS, NULL},
	 { (char *)"TagsIds_rbegin", _wrap_TagsIds_rbegin, METH_VARARGS, NULL},
	 { (char *)"TagsIds_rend", _wrap_TagsIds_rend, METH_VARARGS, NULL},
	 { (char *)"TagsIds_clear", _wrap_TagsIds_clear, METH_VARARGS, NULL},
	 { (char *)"TagsIds_get_allocator", _wrap_TagsIds_get_allocator, METH_VARARGS, NULL},
	 { (char *)"TagsIds_pop_back", _wrap_TagsIds_pop_back, METH_VARARGS, NULL},
	 { (char *)"TagsIds_erase", _wrap_TagsIds_erase, METH_VARARGS, NULL},
	 { (char *)"new_TagsIds", _wrap_new_TagsIds, METH_VARARGS, NULL},
	 { (char *)"TagsIds_push_back", _wrap_TagsIds_push_back, METH_VARARGS, NULL},
	 { (char *)"TagsIds_front", _wrap_TagsIds_front, METH_VARARGS, NULL},
	 { (char *)"TagsIds_back", _wrap_TagsIds_back, METH_VARARGS, NULL},
	 { (char *)"TagsIds_assign", _wrap_TagsIds_assign, METH_VARARGS, NULL},
	 { (char *)"TagsIds_resize", _wrap_TagsIds_resize, METH_VARARGS, NULL},
	 { (char *)"TagsIds_insert", _wrap_TagsIds_insert, METH_VARARGS, NULL},
	 { (char *)"TagsIds_reserve", _wrap_TagsIds_reserve, METH_VARARGS, NULL},
	 { (char *)"TagsIds_capacity", _wrap_TagsIds_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_TagsIds", _wrap_delete_TagsIds, METH_VARARGS, NULL},
	 { (char *)"TagsIds_swigregister", TagsIds_swigregister, METH_VARARGS, NULL},
	 { (char *)"VOIs_iterator", _wrap_VOIs_iterator, METH_VARARGS, NULL},
	 { (char *)"VOIs___nonzero__", _wrap_VOIs___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VOIs___bool__", _wrap_VOIs___bool__, METH_VARARGS, NULL},
	 { (char *)"VOIs___len__", _wrap_VOIs___len__, METH_VARARGS, NULL},
	 { (char *)"VOIs___getslice__", _wrap_VOIs___getslice__, METH_VARARGS, NULL},
	 { (char *)"VOIs___setslice__", _wrap_VOIs___setslice__, METH_VARARGS, NULL},
	 { (char *)"VOIs___delslice__", _wrap_VOIs___delslice__, METH_VARARGS, NULL},
	 { (char *)"VOIs___delitem__", _wrap_VOIs___delitem__, METH_VARARGS, NULL},
	 { (char *)"VOIs___getitem__", _wrap_VOIs___getitem__, METH_VARARGS, NULL},
	 { (char *)"VOIs___setitem__", _wrap_VOIs___setitem__, METH_VARARGS, NULL},
	 { (char *)"VOIs_pop", _wrap_VOIs_pop, METH_VARARGS, NULL},
	 { (char *)"VOIs_append", _wrap_VOIs_append, METH_VARARGS, NULL},
	 { (char *)"VOIs_empty", _wrap_VOIs_empty, METH_VARARGS, NULL},
	 { (char *)"VOIs_size", _wrap_VOIs_size, METH_VARARGS, NULL},
	 { (char *)"VOIs_swap", _wrap_VOIs_swap, METH_VARARGS, NULL},
	 { (char *)"VOIs_begin", _wrap_VOIs_begin, METH_VARARGS, NULL},
	 { (char *)"VOIs_end", _wrap_VOIs_end, METH_VARARGS, NULL},
	 { (char *)"VOIs_rbegin", _wrap_VOIs_rbegin, METH_VARARGS, NULL},
	 { (char *)"VOIs_rend", _wrap_VOIs_rend, METH_VARARGS, NULL},
	 { (char *)"VOIs_clear", _wrap_VOIs_clear, METH_VARARGS, NULL},
	 { (char *)"VOIs_get_allocator", _wrap_VOIs_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VOIs_pop_back", _wrap_VOIs_pop_back, METH_VARARGS, NULL},
	 { (char *)"VOIs_erase", _wrap_VOIs_erase, METH_VARARGS, NULL},
	 { (char *)"new_VOIs", _wrap_new_VOIs, METH_VARARGS, NULL},
	 { (char *)"VOIs_push_back", _wrap_VOIs_push_back, METH_VARARGS, NULL},
	 { (char *)"VOIs_front", _wrap_VOIs_front, METH_VARARGS, NULL},
	 { (char *)"VOIs_back", _wrap_VOIs_back, METH_VARARGS, NULL},
	 { (char *)"VOIs_assign", _wrap_VOIs_assign, METH_VARARGS, NULL},
	 { (char *)"VOIs_resize", _wrap_VOIs_resize, METH_VARARGS, NULL},
	 { (char *)"VOIs_insert", _wrap_VOIs_insert, METH_VARARGS, NULL},
	 { (char *)"VOIs_reserve", _wrap_VOIs_reserve, METH_VARARGS, NULL},
	 { (char *)"VOIs_capacity", _wrap_VOIs_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VOIs", _wrap_delete_VOIs, METH_VARARGS, NULL},
	 { (char *)"VOIs_swigregister", VOIs_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TagId", _wrap_new_TagId, METH_VARARGS, NULL},
	 { (char *)"delete_TagId", _wrap_delete_TagId, METH_VARARGS, NULL},
	 { (char *)"TagId_getGroupId", _wrap_TagId_getGroupId, METH_VARARGS, NULL},
	 { (char *)"TagId_getGroupOrder", _wrap_TagId_getGroupOrder, METH_VARARGS, NULL},
	 { (char *)"TagId_getTagId", _wrap_TagId_getTagId, METH_VARARGS, NULL},
	 { (char *)"TagId_swigregister", TagId_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Memory", _wrap_new_Memory, METH_VARARGS, NULL},
	 { (char *)"delete_Memory", _wrap_delete_Memory, METH_VARARGS, NULL},
	 { (char *)"Memory_size", _wrap_Memory_size, METH_VARARGS, NULL},
	 { (char *)"Memory_data", _wrap_Memory_data, METH_VARARGS, NULL},
	 { (char *)"Memory_regionData", _wrap_Memory_regionData, METH_VARARGS, NULL},
	 { (char *)"Memory_empty", _wrap_Memory_empty, METH_VARARGS, NULL},
	 { (char *)"Memory_swigregister", Memory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MutableMemory", _wrap_new_MutableMemory, METH_VARARGS, NULL},
	 { (char *)"delete_MutableMemory", _wrap_delete_MutableMemory, METH_VARARGS, NULL},
	 { (char *)"MutableMemory_copyFrom", _wrap_MutableMemory_copyFrom, METH_VARARGS, NULL},
	 { (char *)"MutableMemory_clear", _wrap_MutableMemory_clear, METH_VARARGS, NULL},
	 { (char *)"MutableMemory_resize", _wrap_MutableMemory_resize, METH_VARARGS, NULL},
	 { (char *)"MutableMemory_reserve", _wrap_MutableMemory_reserve, METH_VARARGS, NULL},
	 { (char *)"MutableMemory_assign", _wrap_MutableMemory_assign, METH_VARARGS, NULL},
	 { (char *)"MutableMemory_assignRegion", _wrap_MutableMemory_assignRegion, METH_VARARGS, NULL},
	 { (char *)"MutableMemory_swigregister", MutableMemory_swigregister, METH_VARARGS, NULL},
	 { (char *)"MemoryPool_flush", _wrap_MemoryPool_flush, METH_VARARGS, NULL},
	 { (char *)"MemoryPool_getUnusedMemorySize", _wrap_MemoryPool_getUnusedMemorySize, METH_VARARGS, NULL},
	 { (char *)"MemoryPool_setMemoryPoolSize", _wrap_MemoryPool_setMemoryPoolSize, METH_VARARGS, NULL},
	 { (char *)"new_MemoryPool", _wrap_new_MemoryPool, METH_VARARGS, NULL},
	 { (char *)"delete_MemoryPool", _wrap_delete_MemoryPool, METH_VARARGS, NULL},
	 { (char *)"MemoryPool_swigregister", MemoryPool_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BaseStreamInput", _wrap_new_BaseStreamInput, METH_VARARGS, NULL},
	 { (char *)"delete_BaseStreamInput", _wrap_delete_BaseStreamInput, METH_VARARGS, NULL},
	 { (char *)"BaseStreamInput_swigregister", BaseStreamInput_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StreamTimeout", _wrap_new_StreamTimeout, METH_VARARGS, NULL},
	 { (char *)"delete_StreamTimeout", _wrap_delete_StreamTimeout, METH_VARARGS, NULL},
	 { (char *)"StreamTimeout_swigregister", StreamTimeout_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BaseStreamOutput", _wrap_new_BaseStreamOutput, METH_VARARGS, NULL},
	 { (char *)"delete_BaseStreamOutput", _wrap_delete_BaseStreamOutput, METH_VARARGS, NULL},
	 { (char *)"BaseStreamOutput_swigregister", BaseStreamOutput_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StreamReader", _wrap_new_StreamReader, METH_VARARGS, NULL},
	 { (char *)"StreamReader_getVirtualStream", _wrap_StreamReader_getVirtualStream, METH_VARARGS, NULL},
	 { (char *)"StreamReader_read", _wrap_StreamReader_read, METH_VARARGS, NULL},
	 { (char *)"StreamReader_readSome", _wrap_StreamReader_readSome, METH_VARARGS, NULL},
	 { (char *)"StreamReader_terminate", _wrap_StreamReader_terminate, METH_VARARGS, NULL},
	 { (char *)"delete_StreamReader", _wrap_delete_StreamReader, METH_VARARGS, NULL},
	 { (char *)"StreamReader_swigregister", StreamReader_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StreamWriter", _wrap_new_StreamWriter, METH_VARARGS, NULL},
	 { (char *)"StreamWriter_write", _wrap_StreamWriter_write, METH_VARARGS, NULL},
	 { (char *)"StreamWriter_flush", _wrap_StreamWriter_flush, METH_VARARGS, NULL},
	 { (char *)"delete_StreamWriter", _wrap_delete_StreamWriter, METH_VARARGS, NULL},
	 { (char *)"StreamWriter_swigregister", StreamWriter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ReadingDataHandler", _wrap_new_ReadingDataHandler, METH_VARARGS, NULL},
	 { (char *)"delete_ReadingDataHandler", _wrap_delete_ReadingDataHandler, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandler_getSize", _wrap_ReadingDataHandler_getSize, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandler_getDataType", _wrap_ReadingDataHandler_getDataType, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandler_getSignedLong", _wrap_ReadingDataHandler_getSignedLong, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandler_getUnsignedLong", _wrap_ReadingDataHandler_getUnsignedLong, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandler_getDouble", _wrap_ReadingDataHandler_getDouble, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandler_getString", _wrap_ReadingDataHandler_getString, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandler_getDate", _wrap_ReadingDataHandler_getDate, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandler_getAge", _wrap_ReadingDataHandler_getAge, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandler_getPatientName", _wrap_ReadingDataHandler_getPatientName, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandler_swigregister", ReadingDataHandler_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ReadingDataHandlerNumeric", _wrap_new_ReadingDataHandlerNumeric, METH_VARARGS, NULL},
	 { (char *)"delete_ReadingDataHandlerNumeric", _wrap_delete_ReadingDataHandlerNumeric, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandlerNumeric_getMemory", _wrap_ReadingDataHandlerNumeric_getMemory, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandlerNumeric_data", _wrap_ReadingDataHandlerNumeric_data, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandlerNumeric_getUnitSize", _wrap_ReadingDataHandlerNumeric_getUnitSize, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandlerNumeric_isSigned", _wrap_ReadingDataHandlerNumeric_isSigned, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandlerNumeric_isFloat", _wrap_ReadingDataHandlerNumeric_isFloat, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandlerNumeric_copyTo", _wrap_ReadingDataHandlerNumeric_copyTo, METH_VARARGS, NULL},
	 { (char *)"ReadingDataHandlerNumeric_swigregister", ReadingDataHandlerNumeric_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WritingDataHandler", _wrap_new_WritingDataHandler, METH_VARARGS, NULL},
	 { (char *)"delete_WritingDataHandler", _wrap_delete_WritingDataHandler, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_setSize", _wrap_WritingDataHandler_setSize, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_getSize", _wrap_WritingDataHandler_getSize, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_getDataType", _wrap_WritingDataHandler_getDataType, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_setSignedLong", _wrap_WritingDataHandler_setSignedLong, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_setUnsignedLong", _wrap_WritingDataHandler_setUnsignedLong, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_setDouble", _wrap_WritingDataHandler_setDouble, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_setString", _wrap_WritingDataHandler_setString, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_setUnicodeString", _wrap_WritingDataHandler_setUnicodeString, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_setDate", _wrap_WritingDataHandler_setDate, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_setAge", _wrap_WritingDataHandler_setAge, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_setPatientName", _wrap_WritingDataHandler_setPatientName, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandler_swigregister", WritingDataHandler_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WritingDataHandlerNumeric", _wrap_new_WritingDataHandlerNumeric, METH_VARARGS, NULL},
	 { (char *)"delete_WritingDataHandlerNumeric", _wrap_delete_WritingDataHandlerNumeric, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandlerNumeric_getMemory", _wrap_WritingDataHandlerNumeric_getMemory, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandlerNumeric_assign", _wrap_WritingDataHandlerNumeric_assign, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandlerNumeric_data", _wrap_WritingDataHandlerNumeric_data, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandlerNumeric_getUnitSize", _wrap_WritingDataHandlerNumeric_getUnitSize, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandlerNumeric_isSigned", _wrap_WritingDataHandlerNumeric_isSigned, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandlerNumeric_isFloat", _wrap_WritingDataHandlerNumeric_isFloat, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandlerNumeric_copyFrom", _wrap_WritingDataHandlerNumeric_copyFrom, METH_VARARGS, NULL},
	 { (char *)"WritingDataHandlerNumeric_swigregister", WritingDataHandlerNumeric_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LUT", _wrap_new_LUT, METH_VARARGS, NULL},
	 { (char *)"delete_LUT", _wrap_delete_LUT, METH_VARARGS, NULL},
	 { (char *)"LUT_getDescription", _wrap_LUT_getDescription, METH_VARARGS, NULL},
	 { (char *)"LUT_getReadingDataHandler", _wrap_LUT_getReadingDataHandler, METH_VARARGS, NULL},
	 { (char *)"LUT_getBits", _wrap_LUT_getBits, METH_VARARGS, NULL},
	 { (char *)"LUT_getSize", _wrap_LUT_getSize, METH_VARARGS, NULL},
	 { (char *)"LUT_getFirstMapped", _wrap_LUT_getFirstMapped, METH_VARARGS, NULL},
	 { (char *)"LUT_getMappedValue", _wrap_LUT_getMappedValue, METH_VARARGS, NULL},
	 { (char *)"LUT_swigregister", LUT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Image", _wrap_new_Image, METH_VARARGS, NULL},
	 { (char *)"delete_Image", _wrap_delete_Image, METH_VARARGS, NULL},
	 { (char *)"Image_getWidth", _wrap_Image_getWidth, METH_VARARGS, NULL},
	 { (char *)"Image_getHeight", _wrap_Image_getHeight, METH_VARARGS, NULL},
	 { (char *)"Image_getReadingDataHandler", _wrap_Image_getReadingDataHandler, METH_VARARGS, NULL},
	 { (char *)"Image_getColorSpace", _wrap_Image_getColorSpace, METH_VARARGS, NULL},
	 { (char *)"Image_getChannelsNumber", _wrap_Image_getChannelsNumber, METH_VARARGS, NULL},
	 { (char *)"Image_getDepth", _wrap_Image_getDepth, METH_VARARGS, NULL},
	 { (char *)"Image_getHighBit", _wrap_Image_getHighBit, METH_VARARGS, NULL},
	 { (char *)"Image_swigregister", Image_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MutableImage", _wrap_new_MutableImage, METH_VARARGS, NULL},
	 { (char *)"delete_MutableImage", _wrap_delete_MutableImage, METH_VARARGS, NULL},
	 { (char *)"MutableImage_getWritingDataHandler", _wrap_MutableImage_getWritingDataHandler, METH_VARARGS, NULL},
	 { (char *)"MutableImage_swigregister", MutableImage_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Overlay", _wrap_new_Overlay, METH_VARARGS, NULL},
	 { (char *)"delete_Overlay", _wrap_delete_Overlay, METH_VARARGS, NULL},
	 { (char *)"Overlay_getFirstFrame", _wrap_Overlay_getFirstFrame, METH_VARARGS, NULL},
	 { (char *)"Overlay_getFramesCount", _wrap_Overlay_getFramesCount, METH_VARARGS, NULL},
	 { (char *)"Overlay_getZeroBasedOriginX", _wrap_Overlay_getZeroBasedOriginX, METH_VARARGS, NULL},
	 { (char *)"Overlay_getZeroBasedOriginY", _wrap_Overlay_getZeroBasedOriginY, METH_VARARGS, NULL},
	 { (char *)"Overlay_getOneBasedOriginX", _wrap_Overlay_getOneBasedOriginX, METH_VARARGS, NULL},
	 { (char *)"Overlay_getOneBasedOriginY", _wrap_Overlay_getOneBasedOriginY, METH_VARARGS, NULL},
	 { (char *)"Overlay_getType", _wrap_Overlay_getType, METH_VARARGS, NULL},
	 { (char *)"Overlay_getSubType", _wrap_Overlay_getSubType, METH_VARARGS, NULL},
	 { (char *)"Overlay_getLabel", _wrap_Overlay_getLabel, METH_VARARGS, NULL},
	 { (char *)"Overlay_getDescription", _wrap_Overlay_getDescription, METH_VARARGS, NULL},
	 { (char *)"Overlay_getROIArea", _wrap_Overlay_getROIArea, METH_VARARGS, NULL},
	 { (char *)"Overlay_getROIMean", _wrap_Overlay_getROIMean, METH_VARARGS, NULL},
	 { (char *)"Overlay_getROIStandardDeviation", _wrap_Overlay_getROIStandardDeviation, METH_VARARGS, NULL},
	 { (char *)"Overlay_getImage", _wrap_Overlay_getImage, METH_VARARGS, NULL},
	 { (char *)"Overlay_swigregister", Overlay_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MutableOverlay", _wrap_new_MutableOverlay, METH_VARARGS, NULL},
	 { (char *)"delete_MutableOverlay", _wrap_delete_MutableOverlay, METH_VARARGS, NULL},
	 { (char *)"MutableOverlay_setROIArea", _wrap_MutableOverlay_setROIArea, METH_VARARGS, NULL},
	 { (char *)"MutableOverlay_setROIMean", _wrap_MutableOverlay_setROIMean, METH_VARARGS, NULL},
	 { (char *)"MutableOverlay_setROIStandardDeviation", _wrap_MutableOverlay_setROIStandardDeviation, METH_VARARGS, NULL},
	 { (char *)"MutableOverlay_setImage", _wrap_MutableOverlay_setImage, METH_VARARGS, NULL},
	 { (char *)"MutableOverlay_swigregister", MutableOverlay_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Tag", _wrap_new_Tag, METH_VARARGS, NULL},
	 { (char *)"delete_Tag", _wrap_delete_Tag, METH_VARARGS, NULL},
	 { (char *)"Tag_getBuffersCount", _wrap_Tag_getBuffersCount, METH_VARARGS, NULL},
	 { (char *)"Tag_bufferExists", _wrap_Tag_bufferExists, METH_VARARGS, NULL},
	 { (char *)"Tag_getBufferSize", _wrap_Tag_getBufferSize, METH_VARARGS, NULL},
	 { (char *)"Tag_getReadingDataHandler", _wrap_Tag_getReadingDataHandler, METH_VARARGS, NULL},
	 { (char *)"Tag_getReadingDataHandlerNumeric", _wrap_Tag_getReadingDataHandlerNumeric, METH_VARARGS, NULL},
	 { (char *)"Tag_getReadingDataHandlerRaw", _wrap_Tag_getReadingDataHandlerRaw, METH_VARARGS, NULL},
	 { (char *)"Tag_getStreamReader", _wrap_Tag_getStreamReader, METH_VARARGS, NULL},
	 { (char *)"Tag_getSequenceItem", _wrap_Tag_getSequenceItem, METH_VARARGS, NULL},
	 { (char *)"Tag_sequenceItemExists", _wrap_Tag_sequenceItemExists, METH_VARARGS, NULL},
	 { (char *)"Tag_getDataType", _wrap_Tag_getDataType, METH_VARARGS, NULL},
	 { (char *)"Tag_swigregister", Tag_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MutableTag", _wrap_new_MutableTag, METH_VARARGS, NULL},
	 { (char *)"delete_MutableTag", _wrap_delete_MutableTag, METH_VARARGS, NULL},
	 { (char *)"MutableTag_getWritingDataHandler", _wrap_MutableTag_getWritingDataHandler, METH_VARARGS, NULL},
	 { (char *)"MutableTag_getWritingDataHandlerNumeric", _wrap_MutableTag_getWritingDataHandlerNumeric, METH_VARARGS, NULL},
	 { (char *)"MutableTag_getWritingDataHandlerRaw", _wrap_MutableTag_getWritingDataHandlerRaw, METH_VARARGS, NULL},
	 { (char *)"MutableTag_getStreamWriter", _wrap_MutableTag_getStreamWriter, METH_VARARGS, NULL},
	 { (char *)"MutableTag_appendSequenceItem", _wrap_MutableTag_appendSequenceItem, METH_VARARGS, NULL},
	 { (char *)"MutableTag_setStream", _wrap_MutableTag_setStream, METH_VARARGS, NULL},
	 { (char *)"MutableTag_swigregister", MutableTag_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DataSet", _wrap_new_DataSet, METH_VARARGS, NULL},
	 { (char *)"delete_DataSet", _wrap_delete_DataSet, METH_VARARGS, NULL},
	 { (char *)"DataSet_getTags", _wrap_DataSet_getTags, METH_VARARGS, NULL},
	 { (char *)"DataSet_getTag", _wrap_DataSet_getTag, METH_VARARGS, NULL},
	 { (char *)"DataSet_getImage", _wrap_DataSet_getImage, METH_VARARGS, NULL},
	 { (char *)"DataSet_getOverlay", _wrap_DataSet_getOverlay, METH_VARARGS, NULL},
	 { (char *)"DataSet_getImageApplyModalityTransform", _wrap_DataSet_getImageApplyModalityTransform, METH_VARARGS, NULL},
	 { (char *)"DataSet_getVOIs", _wrap_DataSet_getVOIs, METH_VARARGS, NULL},
	 { (char *)"DataSet_getFunctionalGroupDataSet", _wrap_DataSet_getFunctionalGroupDataSet, METH_VARARGS, NULL},
	 { (char *)"DataSet_getStreamReader", _wrap_DataSet_getStreamReader, METH_VARARGS, NULL},
	 { (char *)"DataSet_getSequenceItem", _wrap_DataSet_getSequenceItem, METH_VARARGS, NULL},
	 { (char *)"DataSet_getLUT", _wrap_DataSet_getLUT, METH_VARARGS, NULL},
	 { (char *)"DataSet_getReadingDataHandler", _wrap_DataSet_getReadingDataHandler, METH_VARARGS, NULL},
	 { (char *)"DataSet_getReadingDataHandlerNumeric", _wrap_DataSet_getReadingDataHandlerNumeric, METH_VARARGS, NULL},
	 { (char *)"DataSet_getReadingDataHandlerRaw", _wrap_DataSet_getReadingDataHandlerRaw, METH_VARARGS, NULL},
	 { (char *)"DataSet_bufferExists", _wrap_DataSet_bufferExists, METH_VARARGS, NULL},
	 { (char *)"DataSet_getSignedLong", _wrap_DataSet_getSignedLong, METH_VARARGS, NULL},
	 { (char *)"DataSet_getUnsignedLong", _wrap_DataSet_getUnsignedLong, METH_VARARGS, NULL},
	 { (char *)"DataSet_getDouble", _wrap_DataSet_getDouble, METH_VARARGS, NULL},
	 { (char *)"DataSet_getString", _wrap_DataSet_getString, METH_VARARGS, NULL},
	 { (char *)"DataSet_getAge", _wrap_DataSet_getAge, METH_VARARGS, NULL},
	 { (char *)"DataSet_getDate", _wrap_DataSet_getDate, METH_VARARGS, NULL},
	 { (char *)"DataSet_getPatientName", _wrap_DataSet_getPatientName, METH_VARARGS, NULL},
	 { (char *)"DataSet_getDataType", _wrap_DataSet_getDataType, METH_VARARGS, NULL},
	 { (char *)"DataSet_swigregister", DataSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MutableDataSet", _wrap_new_MutableDataSet, METH_VARARGS, NULL},
	 { (char *)"delete_MutableDataSet", _wrap_delete_MutableDataSet, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_getTagCreate", _wrap_MutableDataSet_getTagCreate, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_setImage", _wrap_MutableDataSet_setImage, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_setOverlay", _wrap_MutableDataSet_setOverlay, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_getStreamWriter", _wrap_MutableDataSet_getStreamWriter, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_appendSequenceItem", _wrap_MutableDataSet_appendSequenceItem, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_getWritingDataHandler", _wrap_MutableDataSet_getWritingDataHandler, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_getWritingDataHandlerNumeric", _wrap_MutableDataSet_getWritingDataHandlerNumeric, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_getWritingDataHandlerRaw", _wrap_MutableDataSet_getWritingDataHandlerRaw, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_setSignedLong", _wrap_MutableDataSet_setSignedLong, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_setUnsignedLong", _wrap_MutableDataSet_setUnsignedLong, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_setDouble", _wrap_MutableDataSet_setDouble, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_setString", _wrap_MutableDataSet_setString, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_setAge", _wrap_MutableDataSet_setAge, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_setDate", _wrap_MutableDataSet_setDate, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_setPatientName", _wrap_MutableDataSet_setPatientName, METH_VARARGS, NULL},
	 { (char *)"MutableDataSet_swigregister", MutableDataSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"CodecFactory_load", _wrap_CodecFactory_load, METH_VARARGS, NULL},
	 { (char *)"CodecFactory_saveImage", _wrap_CodecFactory_saveImage, METH_VARARGS, NULL},
	 { (char *)"CodecFactory_save", _wrap_CodecFactory_save, METH_VARARGS, NULL},
	 { (char *)"CodecFactory_setMaximumImageSize", _wrap_CodecFactory_setMaximumImageSize, METH_VARARGS, NULL},
	 { (char *)"new_CodecFactory", _wrap_new_CodecFactory, METH_VARARGS, NULL},
	 { (char *)"delete_CodecFactory", _wrap_delete_CodecFactory, METH_VARARGS, NULL},
	 { (char *)"CodecFactory_swigregister", CodecFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TCPAddress", _wrap_new_TCPAddress, METH_VARARGS, NULL},
	 { (char *)"delete_TCPAddress", _wrap_delete_TCPAddress, METH_VARARGS, NULL},
	 { (char *)"TCPAddress_getNode", _wrap_TCPAddress_getNode, METH_VARARGS, NULL},
	 { (char *)"TCPAddress_getService", _wrap_TCPAddress_getService, METH_VARARGS, NULL},
	 { (char *)"TCPAddress_swigregister", TCPAddress_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TCPActiveAddress", _wrap_new_TCPActiveAddress, METH_VARARGS, NULL},
	 { (char *)"delete_TCPActiveAddress", _wrap_delete_TCPActiveAddress, METH_VARARGS, NULL},
	 { (char *)"TCPActiveAddress_swigregister", TCPActiveAddress_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TCPPassiveAddress", _wrap_new_TCPPassiveAddress, METH_VARARGS, NULL},
	 { (char *)"delete_TCPPassiveAddress", _wrap_delete_TCPPassiveAddress, METH_VARARGS, NULL},
	 { (char *)"TCPPassiveAddress_swigregister", TCPPassiveAddress_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TCPListener", _wrap_new_TCPListener, METH_VARARGS, NULL},
	 { (char *)"delete_TCPListener", _wrap_delete_TCPListener, METH_VARARGS, NULL},
	 { (char *)"TCPListener_waitForConnection", _wrap_TCPListener_waitForConnection, METH_VARARGS, NULL},
	 { (char *)"TCPListener_terminate", _wrap_TCPListener_terminate, METH_VARARGS, NULL},
	 { (char *)"TCPListener_swigregister", TCPListener_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TCPStream", _wrap_new_TCPStream, METH_VARARGS, NULL},
	 { (char *)"delete_TCPStream", _wrap_delete_TCPStream, METH_VARARGS, NULL},
	 { (char *)"TCPStream_getPeerAddress", _wrap_TCPStream_getPeerAddress, METH_VARARGS, NULL},
	 { (char *)"TCPStream_getStreamInput", _wrap_TCPStream_getStreamInput, METH_VARARGS, NULL},
	 { (char *)"TCPStream_getStreamOutput", _wrap_TCPStream_getStreamOutput, METH_VARARGS, NULL},
	 { (char *)"TCPStream_swigregister", TCPStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PipeStream", _wrap_new_PipeStream, METH_VARARGS, NULL},
	 { (char *)"delete_PipeStream", _wrap_delete_PipeStream, METH_VARARGS, NULL},
	 { (char *)"PipeStream_close", _wrap_PipeStream_close, METH_VARARGS, NULL},
	 { (char *)"PipeStream_getStreamInput", _wrap_PipeStream_getStreamInput, METH_VARARGS, NULL},
	 { (char *)"PipeStream_getStreamOutput", _wrap_PipeStream_getStreamOutput, METH_VARARGS, NULL},
	 { (char *)"PipeStream_swigregister", PipeStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Transform", _wrap_new_Transform, METH_VARARGS, NULL},
	 { (char *)"delete_Transform", _wrap_delete_Transform, METH_VARARGS, NULL},
	 { (char *)"Transform_isEmpty", _wrap_Transform_isEmpty, METH_VARARGS, NULL},
	 { (char *)"Transform_allocateOutputImage", _wrap_Transform_allocateOutputImage, METH_VARARGS, NULL},
	 { (char *)"Transform_runTransform", _wrap_Transform_runTransform, METH_VARARGS, NULL},
	 { (char *)"Transform_swigregister", Transform_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TransformHighBit", _wrap_new_TransformHighBit, METH_VARARGS, NULL},
	 { (char *)"delete_TransformHighBit", _wrap_delete_TransformHighBit, METH_VARARGS, NULL},
	 { (char *)"TransformHighBit_swigregister", TransformHighBit_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TransformsChain", _wrap_new_TransformsChain, METH_VARARGS, NULL},
	 { (char *)"delete_TransformsChain", _wrap_delete_TransformsChain, METH_VARARGS, NULL},
	 { (char *)"TransformsChain_addTransform", _wrap_TransformsChain_addTransform, METH_VARARGS, NULL},
	 { (char *)"TransformsChain_swigregister", TransformsChain_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ModalityVOILUT", _wrap_new_ModalityVOILUT, METH_VARARGS, NULL},
	 { (char *)"delete_ModalityVOILUT", _wrap_delete_ModalityVOILUT, METH_VARARGS, NULL},
	 { (char *)"ModalityVOILUT_swigregister", ModalityVOILUT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VOILUT", _wrap_new_VOILUT, METH_VARARGS, NULL},
	 { (char *)"delete_VOILUT", _wrap_delete_VOILUT, METH_VARARGS, NULL},
	 { (char *)"VOILUT_getOptimalVOI", _wrap_VOILUT_getOptimalVOI, METH_VARARGS, NULL},
	 { (char *)"VOILUT_swigregister", VOILUT_swigregister, METH_VARARGS, NULL},
	 { (char *)"ColorTransformsFactory_normalizeColorSpace", _wrap_ColorTransformsFactory_normalizeColorSpace, METH_VARARGS, NULL},
	 { (char *)"ColorTransformsFactory_isMonochrome", _wrap_ColorTransformsFactory_isMonochrome, METH_VARARGS, NULL},
	 { (char *)"ColorTransformsFactory_isSubsampledX", _wrap_ColorTransformsFactory_isSubsampledX, METH_VARARGS, NULL},
	 { (char *)"ColorTransformsFactory_isSubsampledY", _wrap_ColorTransformsFactory_isSubsampledY, METH_VARARGS, NULL},
	 { (char *)"ColorTransformsFactory_canSubsample", _wrap_ColorTransformsFactory_canSubsample, METH_VARARGS, NULL},
	 { (char *)"ColorTransformsFactory_makeSubsampled", _wrap_ColorTransformsFactory_makeSubsampled, METH_VARARGS, NULL},
	 { (char *)"ColorTransformsFactory_getNumberOfChannels", _wrap_ColorTransformsFactory_getNumberOfChannels, METH_VARARGS, NULL},
	 { (char *)"ColorTransformsFactory_getTransform", _wrap_ColorTransformsFactory_getTransform, METH_VARARGS, NULL},
	 { (char *)"new_ColorTransformsFactory", _wrap_new_ColorTransformsFactory, METH_VARARGS, NULL},
	 { (char *)"delete_ColorTransformsFactory", _wrap_delete_ColorTransformsFactory, METH_VARARGS, NULL},
	 { (char *)"ColorTransformsFactory_swigregister", ColorTransformsFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DicomDirEntry", _wrap_new_DicomDirEntry, METH_VARARGS, NULL},
	 { (char *)"delete_DicomDirEntry", _wrap_delete_DicomDirEntry, METH_VARARGS, NULL},
	 { (char *)"DicomDirEntry_getEntryDataSet", _wrap_DicomDirEntry_getEntryDataSet, METH_VARARGS, NULL},
	 { (char *)"DicomDirEntry_hasNextEntry", _wrap_DicomDirEntry_hasNextEntry, METH_VARARGS, NULL},
	 { (char *)"DicomDirEntry_getNextEntry", _wrap_DicomDirEntry_getNextEntry, METH_VARARGS, NULL},
	 { (char *)"DicomDirEntry_hasChildren", _wrap_DicomDirEntry_hasChildren, METH_VARARGS, NULL},
	 { (char *)"DicomDirEntry_getFirstChildEntry", _wrap_DicomDirEntry_getFirstChildEntry, METH_VARARGS, NULL},
	 { (char *)"DicomDirEntry_getFileParts", _wrap_DicomDirEntry_getFileParts, METH_VARARGS, NULL},
	 { (char *)"DicomDirEntry_getTypeString", _wrap_DicomDirEntry_getTypeString, METH_VARARGS, NULL},
	 { (char *)"DicomDirEntry_swigregister", DicomDirEntry_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MutableDicomDirEntry", _wrap_new_MutableDicomDirEntry, METH_VARARGS, NULL},
	 { (char *)"delete_MutableDicomDirEntry", _wrap_delete_MutableDicomDirEntry, METH_VARARGS, NULL},
	 { (char *)"MutableDicomDirEntry_getEntryDataSet", _wrap_MutableDicomDirEntry_getEntryDataSet, METH_VARARGS, NULL},
	 { (char *)"MutableDicomDirEntry_setNextEntry", _wrap_MutableDicomDirEntry_setNextEntry, METH_VARARGS, NULL},
	 { (char *)"MutableDicomDirEntry_setFirstChildEntry", _wrap_MutableDicomDirEntry_setFirstChildEntry, METH_VARARGS, NULL},
	 { (char *)"MutableDicomDirEntry_setFileParts", _wrap_MutableDicomDirEntry_setFileParts, METH_VARARGS, NULL},
	 { (char *)"MutableDicomDirEntry_swigregister", MutableDicomDirEntry_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DicomDir", _wrap_new_DicomDir, METH_VARARGS, NULL},
	 { (char *)"delete_DicomDir", _wrap_delete_DicomDir, METH_VARARGS, NULL},
	 { (char *)"DicomDir_hasRootEntry", _wrap_DicomDir_hasRootEntry, METH_VARARGS, NULL},
	 { (char *)"DicomDir_getFirstRootEntry", _wrap_DicomDir_getFirstRootEntry, METH_VARARGS, NULL},
	 { (char *)"DicomDir_swigregister", DicomDir_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MutableDicomDir", _wrap_new_MutableDicomDir, METH_VARARGS, NULL},
	 { (char *)"delete_MutableDicomDir", _wrap_delete_MutableDicomDir, METH_VARARGS, NULL},
	 { (char *)"MutableDicomDir_getNewEntry", _wrap_MutableDicomDir_getNewEntry, METH_VARARGS, NULL},
	 { (char *)"MutableDicomDir_setFirstRootEntry", _wrap_MutableDicomDir_setFirstRootEntry, METH_VARARGS, NULL},
	 { (char *)"MutableDicomDir_updateDataSet", _wrap_MutableDicomDir_updateDataSet, METH_VARARGS, NULL},
	 { (char *)"MutableDicomDir_swigregister", MutableDicomDir_swigregister, METH_VARARGS, NULL},
	 { (char *)"DicomDictionary_getTagDescription", _wrap_DicomDictionary_getTagDescription, METH_VARARGS, NULL},
	 { (char *)"DicomDictionary_getTagType", _wrap_DicomDictionary_getTagType, METH_VARARGS, NULL},
	 { (char *)"DicomDictionary_getMultiplicityMin", _wrap_DicomDictionary_getMultiplicityMin, METH_VARARGS, NULL},
	 { (char *)"DicomDictionary_getMultiplicityMax", _wrap_DicomDictionary_getMultiplicityMax, METH_VARARGS, NULL},
	 { (char *)"DicomDictionary_getMultiplicityStep", _wrap_DicomDictionary_getMultiplicityStep, METH_VARARGS, NULL},
	 { (char *)"DicomDictionary_getWordSize", _wrap_DicomDictionary_getWordSize, METH_VARARGS, NULL},
	 { (char *)"DicomDictionary_getMaxSize", _wrap_DicomDictionary_getMaxSize, METH_VARARGS, NULL},
	 { (char *)"new_DicomDictionary", _wrap_new_DicomDictionary, METH_VARARGS, NULL},
	 { (char *)"delete_DicomDictionary", _wrap_delete_DicomDictionary, METH_VARARGS, NULL},
	 { (char *)"DicomDictionary_swigregister", DicomDictionary_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DrawBitmap", _wrap_new_DrawBitmap, METH_VARARGS, NULL},
	 { (char *)"delete_DrawBitmap", _wrap_delete_DrawBitmap, METH_VARARGS, NULL},
	 { (char *)"DrawBitmap_getBitmap", _wrap_DrawBitmap_getBitmap, METH_VARARGS, NULL},
	 { (char *)"DrawBitmap_swigregister", DrawBitmap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileStreamInput", _wrap_new_FileStreamInput, METH_VARARGS, NULL},
	 { (char *)"delete_FileStreamInput", _wrap_delete_FileStreamInput, METH_VARARGS, NULL},
	 { (char *)"FileStreamInput_swigregister", FileStreamInput_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileStreamOutput", _wrap_new_FileStreamOutput, METH_VARARGS, NULL},
	 { (char *)"delete_FileStreamOutput", _wrap_delete_FileStreamOutput, METH_VARARGS, NULL},
	 { (char *)"FileStreamOutput_swigregister", FileStreamOutput_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MemoryStreamInput", _wrap_new_MemoryStreamInput, METH_VARARGS, NULL},
	 { (char *)"delete_MemoryStreamInput", _wrap_delete_MemoryStreamInput, METH_VARARGS, NULL},
	 { (char *)"MemoryStreamInput_swigregister", MemoryStreamInput_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MemoryStreamOutput", _wrap_new_MemoryStreamOutput, METH_VARARGS, NULL},
	 { (char *)"delete_MemoryStreamOutput", _wrap_delete_MemoryStreamOutput, METH_VARARGS, NULL},
	 { (char *)"MemoryStreamOutput_swigregister", MemoryStreamOutput_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PresentationContext", _wrap_new_PresentationContext, METH_VARARGS, NULL},
	 { (char *)"delete_PresentationContext", _wrap_delete_PresentationContext, METH_VARARGS, NULL},
	 { (char *)"PresentationContext_addTransferSyntax", _wrap_PresentationContext_addTransferSyntax, METH_VARARGS, NULL},
	 { (char *)"PresentationContext_swigregister", PresentationContext_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PresentationContexts", _wrap_new_PresentationContexts, METH_VARARGS, NULL},
	 { (char *)"delete_PresentationContexts", _wrap_delete_PresentationContexts, METH_VARARGS, NULL},
	 { (char *)"PresentationContexts_addPresentationContext", _wrap_PresentationContexts_addPresentationContext, METH_VARARGS, NULL},
	 { (char *)"PresentationContexts_swigregister", PresentationContexts_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AssociationMessage", _wrap_new_AssociationMessage, METH_VARARGS, NULL},
	 { (char *)"delete_AssociationMessage", _wrap_delete_AssociationMessage, METH_VARARGS, NULL},
	 { (char *)"AssociationMessage_getAbstractSyntax", _wrap_AssociationMessage_getAbstractSyntax, METH_VARARGS, NULL},
	 { (char *)"AssociationMessage_getCommand", _wrap_AssociationMessage_getCommand, METH_VARARGS, NULL},
	 { (char *)"AssociationMessage_getPayload", _wrap_AssociationMessage_getPayload, METH_VARARGS, NULL},
	 { (char *)"AssociationMessage_hasPayload", _wrap_AssociationMessage_hasPayload, METH_VARARGS, NULL},
	 { (char *)"AssociationMessage_swigregister", AssociationMessage_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MutableAssociationMessage", _wrap_new_MutableAssociationMessage, METH_VARARGS, NULL},
	 { (char *)"delete_MutableAssociationMessage", _wrap_delete_MutableAssociationMessage, METH_VARARGS, NULL},
	 { (char *)"MutableAssociationMessage_addDataSet", _wrap_MutableAssociationMessage_addDataSet, METH_VARARGS, NULL},
	 { (char *)"MutableAssociationMessage_swigregister", MutableAssociationMessage_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_AssociationBase", _wrap_delete_AssociationBase, METH_VARARGS, NULL},
	 { (char *)"AssociationBase_getCommand", _wrap_AssociationBase_getCommand, METH_VARARGS, NULL},
	 { (char *)"AssociationBase_getResponse", _wrap_AssociationBase_getResponse, METH_VARARGS, NULL},
	 { (char *)"AssociationBase_sendMessage", _wrap_AssociationBase_sendMessage, METH_VARARGS, NULL},
	 { (char *)"AssociationBase_release", _wrap_AssociationBase_release, METH_VARARGS, NULL},
	 { (char *)"AssociationBase_abort", _wrap_AssociationBase_abort, METH_VARARGS, NULL},
	 { (char *)"AssociationBase_getThisAET", _wrap_AssociationBase_getThisAET, METH_VARARGS, NULL},
	 { (char *)"AssociationBase_getOtherAET", _wrap_AssociationBase_getOtherAET, METH_VARARGS, NULL},
	 { (char *)"AssociationBase_getTransferSyntax", _wrap_AssociationBase_getTransferSyntax, METH_VARARGS, NULL},
	 { (char *)"AssociationBase_getTransferSyntaxes", _wrap_AssociationBase_getTransferSyntaxes, METH_VARARGS, NULL},
	 { (char *)"AssociationBase_swigregister", AssociationBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AssociationSCU", _wrap_new_AssociationSCU, METH_VARARGS, NULL},
	 { (char *)"delete_AssociationSCU", _wrap_delete_AssociationSCU, METH_VARARGS, NULL},
	 { (char *)"AssociationSCU_swigregister", AssociationSCU_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AssociationSCP", _wrap_new_AssociationSCP, METH_VARARGS, NULL},
	 { (char *)"delete_AssociationSCP", _wrap_delete_AssociationSCP, METH_VARARGS, NULL},
	 { (char *)"AssociationSCP_swigregister", AssociationSCP_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DimseCommandBase", _wrap_delete_DimseCommandBase, METH_VARARGS, NULL},
	 { (char *)"new_DimseCommandBase", _wrap_new_DimseCommandBase, METH_VARARGS, NULL},
	 { (char *)"DimseCommandBase_getCommandDataSet", _wrap_DimseCommandBase_getCommandDataSet, METH_VARARGS, NULL},
	 { (char *)"DimseCommandBase_getPayloadDataSet", _wrap_DimseCommandBase_getPayloadDataSet, METH_VARARGS, NULL},
	 { (char *)"DimseCommandBase_getAbstractSyntax", _wrap_DimseCommandBase_getAbstractSyntax, METH_VARARGS, NULL},
	 { (char *)"DimseCommandBase_getAffectedSopInstanceUid", _wrap_DimseCommandBase_getAffectedSopInstanceUid, METH_VARARGS, NULL},
	 { (char *)"DimseCommandBase_getAffectedSopClassUid", _wrap_DimseCommandBase_getAffectedSopClassUid, METH_VARARGS, NULL},
	 { (char *)"DimseCommandBase_getRequestedSopInstanceUid", _wrap_DimseCommandBase_getRequestedSopInstanceUid, METH_VARARGS, NULL},
	 { (char *)"DimseCommandBase_getRequestedSopClassUid", _wrap_DimseCommandBase_getRequestedSopClassUid, METH_VARARGS, NULL},
	 { (char *)"DimseCommandBase_swigregister", DimseCommandBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DimseCommand", _wrap_new_DimseCommand, METH_VARARGS, NULL},
	 { (char *)"delete_DimseCommand", _wrap_delete_DimseCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getID", _wrap_DimseCommand_getID, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getCommandType", _wrap_DimseCommand_getCommandType, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsCStoreCommand", _wrap_DimseCommand_getAsCStoreCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsCMoveCommand", _wrap_DimseCommand_getAsCMoveCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsCGetCommand", _wrap_DimseCommand_getAsCGetCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsCFindCommand", _wrap_DimseCommand_getAsCFindCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsCEchoCommand", _wrap_DimseCommand_getAsCEchoCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsCCancelCommand", _wrap_DimseCommand_getAsCCancelCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsNActionCommand", _wrap_DimseCommand_getAsNActionCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsNEventReportCommand", _wrap_DimseCommand_getAsNEventReportCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsNCreateCommand", _wrap_DimseCommand_getAsNCreateCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsNDeleteCommand", _wrap_DimseCommand_getAsNDeleteCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsNSetCommand", _wrap_DimseCommand_getAsNSetCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_getAsNGetCommand", _wrap_DimseCommand_getAsNGetCommand, METH_VARARGS, NULL},
	 { (char *)"DimseCommand_swigregister", DimseCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DimseResponse", _wrap_new_DimseResponse, METH_VARARGS, NULL},
	 { (char *)"delete_DimseResponse", _wrap_delete_DimseResponse, METH_VARARGS, NULL},
	 { (char *)"DimseResponse_getStatus", _wrap_DimseResponse_getStatus, METH_VARARGS, NULL},
	 { (char *)"DimseResponse_getStatusCode", _wrap_DimseResponse_getStatusCode, METH_VARARGS, NULL},
	 { (char *)"DimseResponse_swigregister", DimseResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CPartialResponse", _wrap_new_CPartialResponse, METH_VARARGS, NULL},
	 { (char *)"delete_CPartialResponse", _wrap_delete_CPartialResponse, METH_VARARGS, NULL},
	 { (char *)"CPartialResponse_getRemainingSubOperations", _wrap_CPartialResponse_getRemainingSubOperations, METH_VARARGS, NULL},
	 { (char *)"CPartialResponse_getCompletedSubOperations", _wrap_CPartialResponse_getCompletedSubOperations, METH_VARARGS, NULL},
	 { (char *)"CPartialResponse_getFailedSubOperations", _wrap_CPartialResponse_getFailedSubOperations, METH_VARARGS, NULL},
	 { (char *)"CPartialResponse_getWarningSubOperations", _wrap_CPartialResponse_getWarningSubOperations, METH_VARARGS, NULL},
	 { (char *)"CPartialResponse_swigregister", CPartialResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CStoreCommand", _wrap_new_CStoreCommand, METH_VARARGS, NULL},
	 { (char *)"delete_CStoreCommand", _wrap_delete_CStoreCommand, METH_VARARGS, NULL},
	 { (char *)"CStoreCommand_getOriginatorAET", _wrap_CStoreCommand_getOriginatorAET, METH_VARARGS, NULL},
	 { (char *)"CStoreCommand_getOriginatorMessageID", _wrap_CStoreCommand_getOriginatorMessageID, METH_VARARGS, NULL},
	 { (char *)"CStoreCommand_swigregister", CStoreCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CStoreResponse", _wrap_new_CStoreResponse, METH_VARARGS, NULL},
	 { (char *)"delete_CStoreResponse", _wrap_delete_CStoreResponse, METH_VARARGS, NULL},
	 { (char *)"CStoreResponse_swigregister", CStoreResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CGetCommand", _wrap_new_CGetCommand, METH_VARARGS, NULL},
	 { (char *)"delete_CGetCommand", _wrap_delete_CGetCommand, METH_VARARGS, NULL},
	 { (char *)"CGetCommand_swigregister", CGetCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CGetResponse", _wrap_new_CGetResponse, METH_VARARGS, NULL},
	 { (char *)"delete_CGetResponse", _wrap_delete_CGetResponse, METH_VARARGS, NULL},
	 { (char *)"CGetResponse_swigregister", CGetResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CFindCommand", _wrap_new_CFindCommand, METH_VARARGS, NULL},
	 { (char *)"delete_CFindCommand", _wrap_delete_CFindCommand, METH_VARARGS, NULL},
	 { (char *)"CFindCommand_swigregister", CFindCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CFindResponse", _wrap_new_CFindResponse, METH_VARARGS, NULL},
	 { (char *)"delete_CFindResponse", _wrap_delete_CFindResponse, METH_VARARGS, NULL},
	 { (char *)"CFindResponse_swigregister", CFindResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CMoveCommand", _wrap_new_CMoveCommand, METH_VARARGS, NULL},
	 { (char *)"delete_CMoveCommand", _wrap_delete_CMoveCommand, METH_VARARGS, NULL},
	 { (char *)"CMoveCommand_getDestinationAET", _wrap_CMoveCommand_getDestinationAET, METH_VARARGS, NULL},
	 { (char *)"CMoveCommand_swigregister", CMoveCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CMoveResponse", _wrap_new_CMoveResponse, METH_VARARGS, NULL},
	 { (char *)"delete_CMoveResponse", _wrap_delete_CMoveResponse, METH_VARARGS, NULL},
	 { (char *)"CMoveResponse_swigregister", CMoveResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CEchoCommand", _wrap_new_CEchoCommand, METH_VARARGS, NULL},
	 { (char *)"delete_CEchoCommand", _wrap_delete_CEchoCommand, METH_VARARGS, NULL},
	 { (char *)"CEchoCommand_swigregister", CEchoCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CEchoResponse", _wrap_new_CEchoResponse, METH_VARARGS, NULL},
	 { (char *)"delete_CEchoResponse", _wrap_delete_CEchoResponse, METH_VARARGS, NULL},
	 { (char *)"CEchoResponse_swigregister", CEchoResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CCancelCommand", _wrap_new_CCancelCommand, METH_VARARGS, NULL},
	 { (char *)"delete_CCancelCommand", _wrap_delete_CCancelCommand, METH_VARARGS, NULL},
	 { (char *)"CCancelCommand_getCancelMessageID", _wrap_CCancelCommand_getCancelMessageID, METH_VARARGS, NULL},
	 { (char *)"CCancelCommand_swigregister", CCancelCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NEventReportCommand", _wrap_new_NEventReportCommand, METH_VARARGS, NULL},
	 { (char *)"delete_NEventReportCommand", _wrap_delete_NEventReportCommand, METH_VARARGS, NULL},
	 { (char *)"NEventReportCommand_getEventID", _wrap_NEventReportCommand_getEventID, METH_VARARGS, NULL},
	 { (char *)"NEventReportCommand_swigregister", NEventReportCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NEventReportResponse", _wrap_new_NEventReportResponse, METH_VARARGS, NULL},
	 { (char *)"delete_NEventReportResponse", _wrap_delete_NEventReportResponse, METH_VARARGS, NULL},
	 { (char *)"NEventReportResponse_getEventID", _wrap_NEventReportResponse_getEventID, METH_VARARGS, NULL},
	 { (char *)"NEventReportResponse_swigregister", NEventReportResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NGetCommand", _wrap_new_NGetCommand, METH_VARARGS, NULL},
	 { (char *)"delete_NGetCommand", _wrap_delete_NGetCommand, METH_VARARGS, NULL},
	 { (char *)"NGetCommand_getAttributeList", _wrap_NGetCommand_getAttributeList, METH_VARARGS, NULL},
	 { (char *)"NGetCommand_swigregister", NGetCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NGetResponse", _wrap_new_NGetResponse, METH_VARARGS, NULL},
	 { (char *)"delete_NGetResponse", _wrap_delete_NGetResponse, METH_VARARGS, NULL},
	 { (char *)"NGetResponse_swigregister", NGetResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NSetCommand", _wrap_new_NSetCommand, METH_VARARGS, NULL},
	 { (char *)"delete_NSetCommand", _wrap_delete_NSetCommand, METH_VARARGS, NULL},
	 { (char *)"NSetCommand_swigregister", NSetCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NSetResponse", _wrap_new_NSetResponse, METH_VARARGS, NULL},
	 { (char *)"delete_NSetResponse", _wrap_delete_NSetResponse, METH_VARARGS, NULL},
	 { (char *)"NSetResponse_getModifiedAttributes", _wrap_NSetResponse_getModifiedAttributes, METH_VARARGS, NULL},
	 { (char *)"NSetResponse_swigregister", NSetResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NActionCommand", _wrap_new_NActionCommand, METH_VARARGS, NULL},
	 { (char *)"delete_NActionCommand", _wrap_delete_NActionCommand, METH_VARARGS, NULL},
	 { (char *)"NActionCommand_getActionID", _wrap_NActionCommand_getActionID, METH_VARARGS, NULL},
	 { (char *)"NActionCommand_swigregister", NActionCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NActionResponse", _wrap_new_NActionResponse, METH_VARARGS, NULL},
	 { (char *)"delete_NActionResponse", _wrap_delete_NActionResponse, METH_VARARGS, NULL},
	 { (char *)"NActionResponse_getActionID", _wrap_NActionResponse_getActionID, METH_VARARGS, NULL},
	 { (char *)"NActionResponse_swigregister", NActionResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NCreateCommand", _wrap_new_NCreateCommand, METH_VARARGS, NULL},
	 { (char *)"delete_NCreateCommand", _wrap_delete_NCreateCommand, METH_VARARGS, NULL},
	 { (char *)"NCreateCommand_swigregister", NCreateCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NCreateResponse", _wrap_new_NCreateResponse, METH_VARARGS, NULL},
	 { (char *)"delete_NCreateResponse", _wrap_delete_NCreateResponse, METH_VARARGS, NULL},
	 { (char *)"NCreateResponse_swigregister", NCreateResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NDeleteCommand", _wrap_new_NDeleteCommand, METH_VARARGS, NULL},
	 { (char *)"delete_NDeleteCommand", _wrap_delete_NDeleteCommand, METH_VARARGS, NULL},
	 { (char *)"NDeleteCommand_swigregister", NDeleteCommand_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NDeleteResponse", _wrap_new_NDeleteResponse, METH_VARARGS, NULL},
	 { (char *)"delete_NDeleteResponse", _wrap_delete_NDeleteResponse, METH_VARARGS, NULL},
	 { (char *)"NDeleteResponse_swigregister", NDeleteResponse_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DimseService", _wrap_new_DimseService, METH_VARARGS, NULL},
	 { (char *)"delete_DimseService", _wrap_delete_DimseService, METH_VARARGS, NULL},
	 { (char *)"DimseService_getTransferSyntax", _wrap_DimseService_getTransferSyntax, METH_VARARGS, NULL},
	 { (char *)"DimseService_getNextCommandID", _wrap_DimseService_getNextCommandID, METH_VARARGS, NULL},
	 { (char *)"DimseService_getCommand", _wrap_DimseService_getCommand, METH_VARARGS, NULL},
	 { (char *)"DimseService_sendCommandOrResponse", _wrap_DimseService_sendCommandOrResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getCStoreResponse", _wrap_DimseService_getCStoreResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getCGetResponse", _wrap_DimseService_getCGetResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getCFindResponse", _wrap_DimseService_getCFindResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getCMoveResponse", _wrap_DimseService_getCMoveResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getCEchoResponse", _wrap_DimseService_getCEchoResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getNEventReportResponse", _wrap_DimseService_getNEventReportResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getNGetResponse", _wrap_DimseService_getNGetResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getNSetResponse", _wrap_DimseService_getNSetResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getNActionResponse", _wrap_DimseService_getNActionResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getNCreateResponse", _wrap_DimseService_getNCreateResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_getNDeleteResponse", _wrap_DimseService_getNDeleteResponse, METH_VARARGS, NULL},
	 { (char *)"DimseService_swigregister", DimseService_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Date", _wrap_delete_Date, METH_VARARGS, NULL},
	 { (char *)"new_Date", _wrap_new_Date, METH_VARARGS, NULL},
	 { (char *)"Date_getYear", _wrap_Date_getYear, METH_VARARGS, NULL},
	 { (char *)"Date_getMonth", _wrap_Date_getMonth, METH_VARARGS, NULL},
	 { (char *)"Date_getDay", _wrap_Date_getDay, METH_VARARGS, NULL},
	 { (char *)"Date_getHour", _wrap_Date_getHour, METH_VARARGS, NULL},
	 { (char *)"Date_getMinutes", _wrap_Date_getMinutes, METH_VARARGS, NULL},
	 { (char *)"Date_getSeconds", _wrap_Date_getSeconds, METH_VARARGS, NULL},
	 { (char *)"Date_getNanoseconds", _wrap_Date_getNanoseconds, METH_VARARGS, NULL},
	 { (char *)"Date_getOffsetHours", _wrap_Date_getOffsetHours, METH_VARARGS, NULL},
	 { (char *)"Date_getOffsetMinutes", _wrap_Date_getOffsetMinutes, METH_VARARGS, NULL},
	 { (char *)"Date_swigregister", Date_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Age", _wrap_delete_Age, METH_VARARGS, NULL},
	 { (char *)"new_Age", _wrap_new_Age, METH_VARARGS, NULL},
	 { (char *)"Age_getYears", _wrap_Age_getYears, METH_VARARGS, NULL},
	 { (char *)"Age_getAgeValue", _wrap_Age_getAgeValue, METH_VARARGS, NULL},
	 { (char *)"Age_getAgeUnits", _wrap_Age_getAgeUnits, METH_VARARGS, NULL},
	 { (char *)"Age_swigregister", Age_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_PatientName", _wrap_delete_PatientName, METH_VARARGS, NULL},
	 { (char *)"new_PatientName", _wrap_new_PatientName, METH_VARARGS, NULL},
	 { (char *)"PatientName_getAlphabeticRepresentation", _wrap_PatientName_getAlphabeticRepresentation, METH_VARARGS, NULL},
	 { (char *)"PatientName_getIdeographicRepresentation", _wrap_PatientName_getIdeographicRepresentation, METH_VARARGS, NULL},
	 { (char *)"PatientName_getPhoneticRepresentation", _wrap_PatientName_getPhoneticRepresentation, METH_VARARGS, NULL},
	 { (char *)"PatientName_swigregister", PatientName_swigregister, METH_VARARGS, NULL},
	 { (char *)"UIDGeneratorFactory_registerUIDGenerator", _wrap_UIDGeneratorFactory_registerUIDGenerator, METH_VARARGS, NULL},
	 { (char *)"UIDGeneratorFactory_getUIDGenerator", _wrap_UIDGeneratorFactory_getUIDGenerator, METH_VARARGS, NULL},
	 { (char *)"UIDGeneratorFactory_getDefaultUIDGenerator", _wrap_UIDGeneratorFactory_getDefaultUIDGenerator, METH_VARARGS, NULL},
	 { (char *)"new_UIDGeneratorFactory", _wrap_new_UIDGeneratorFactory, METH_VARARGS, NULL},
	 { (char *)"delete_UIDGeneratorFactory", _wrap_delete_UIDGeneratorFactory, METH_VARARGS, NULL},
	 { (char *)"UIDGeneratorFactory_swigregister", UIDGeneratorFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BaseUIDGenerator", _wrap_new_BaseUIDGenerator, METH_VARARGS, NULL},
	 { (char *)"delete_BaseUIDGenerator", _wrap_delete_BaseUIDGenerator, METH_VARARGS, NULL},
	 { (char *)"BaseUIDGenerator_getUID", _wrap_BaseUIDGenerator_getUID, METH_VARARGS, NULL},
	 { (char *)"BaseUIDGenerator_swigregister", BaseUIDGenerator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RandomUIDGenerator", _wrap_new_RandomUIDGenerator, METH_VARARGS, NULL},
	 { (char *)"delete_RandomUIDGenerator", _wrap_delete_RandomUIDGenerator, METH_VARARGS, NULL},
	 { (char *)"RandomUIDGenerator_swigregister", RandomUIDGenerator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SerialNumberUIDGenerator", _wrap_new_SerialNumberUIDGenerator, METH_VARARGS, NULL},
	 { (char *)"delete_SerialNumberUIDGenerator", _wrap_delete_SerialNumberUIDGenerator, METH_VARARGS, NULL},
	 { (char *)"SerialNumberUIDGenerator_swigregister", SerialNumberUIDGenerator_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_imebra__FileStreamOutputTo_p_imebra__BaseStreamOutput(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::BaseStreamOutput *)  ((imebra::FileStreamOutput *) x));
}
static void *_p_imebra__MemoryStreamOutputTo_p_imebra__BaseStreamOutput(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::BaseStreamOutput *)  ((imebra::MemoryStreamOutput *) x));
}
static void *_p_imebra__MutableDicomDirTo_p_imebra__DicomDir(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DicomDir *)  ((imebra::MutableDicomDir *) x));
}
static void *_p_imebra__MutableImageTo_p_imebra__Image(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::Image *)  ((imebra::MutableImage *) x));
}
static void *_p_imebra__CStoreCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::CStoreCommand *) x));
}
static void *_p_imebra__CGetCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::CGetCommand *) x));
}
static void *_p_imebra__CFindCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::CFindCommand *) x));
}
static void *_p_imebra__CMoveCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::CMoveCommand *) x));
}
static void *_p_imebra__CEchoCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::CEchoCommand *) x));
}
static void *_p_imebra__CCancelCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::CCancelCommand *) x));
}
static void *_p_imebra__NEventReportCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::NEventReportCommand *) x));
}
static void *_p_imebra__NGetCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::NGetCommand *) x));
}
static void *_p_imebra__NSetCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::NSetCommand *) x));
}
static void *_p_imebra__NActionCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::NActionCommand *) x));
}
static void *_p_imebra__NCreateCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::NCreateCommand *) x));
}
static void *_p_imebra__NDeleteCommandTo_p_imebra__DimseCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommand *)  ((imebra::NDeleteCommand *) x));
}
static void *_p_imebra__TCPActiveAddressTo_p_imebra__TCPAddress(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::TCPAddress *)  ((imebra::TCPActiveAddress *) x));
}
static void *_p_imebra__TCPPassiveAddressTo_p_imebra__TCPAddress(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::TCPAddress *)  ((imebra::TCPPassiveAddress *) x));
}
static void *_p_imebra__TransformsChainTo_p_imebra__Transform(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::Transform *)  ((imebra::TransformsChain *) x));
}
static void *_p_imebra__VOILUTTo_p_imebra__Transform(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::Transform *)  ((imebra::VOILUT *) x));
}
static void *_p_imebra__ModalityVOILUTTo_p_imebra__Transform(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::Transform *)  ((imebra::ModalityVOILUT *) x));
}
static void *_p_imebra__TransformHighBitTo_p_imebra__Transform(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::Transform *)  ((imebra::TransformHighBit *) x));
}
static void *_p_imebra__MutableMemoryTo_p_imebra__Memory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::Memory *)  ((imebra::MutableMemory *) x));
}
static void *_p_imebra__RandomUIDGeneratorTo_p_imebra__BaseUIDGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::BaseUIDGenerator *)  ((imebra::RandomUIDGenerator *) x));
}
static void *_p_imebra__SerialNumberUIDGeneratorTo_p_imebra__BaseUIDGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::BaseUIDGenerator *)  ((imebra::SerialNumberUIDGenerator *) x));
}
static void *_p_imebra__MutableDicomDirEntryTo_p_imebra__DicomDirEntry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DicomDirEntry *)  ((imebra::MutableDicomDirEntry *) x));
}
static void *_p_imebra__MutableDataSetTo_p_imebra__DataSet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DataSet *)  ((imebra::MutableDataSet *) x));
}
static void *_p_imebra__CGetResponseTo_p_imebra__CPartialResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::CPartialResponse *)  ((imebra::CGetResponse *) x));
}
static void *_p_imebra__CMoveResponseTo_p_imebra__CPartialResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::CPartialResponse *)  ((imebra::CMoveResponse *) x));
}
static void *_p_imebra__CPartialResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *)  ((imebra::CPartialResponse *) x));
}
static void *_p_imebra__CStoreResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *)  ((imebra::CStoreResponse *) x));
}
static void *_p_imebra__CGetResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *) (imebra::CPartialResponse *) ((imebra::CGetResponse *) x));
}
static void *_p_imebra__CFindResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *)  ((imebra::CFindResponse *) x));
}
static void *_p_imebra__CMoveResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *) (imebra::CPartialResponse *) ((imebra::CMoveResponse *) x));
}
static void *_p_imebra__CEchoResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *)  ((imebra::CEchoResponse *) x));
}
static void *_p_imebra__NEventReportResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *)  ((imebra::NEventReportResponse *) x));
}
static void *_p_imebra__NGetResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *)  ((imebra::NGetResponse *) x));
}
static void *_p_imebra__NSetResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *)  ((imebra::NSetResponse *) x));
}
static void *_p_imebra__NActionResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *)  ((imebra::NActionResponse *) x));
}
static void *_p_imebra__NCreateResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *)  ((imebra::NCreateResponse *) x));
}
static void *_p_imebra__NDeleteResponseTo_p_imebra__DimseResponse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseResponse *)  ((imebra::NDeleteResponse *) x));
}
static void *_p_imebra__CEchoResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *) ((imebra::CEchoResponse *) x));
}
static void *_p_imebra__CMoveResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *)(imebra::CPartialResponse *) ((imebra::CMoveResponse *) x));
}
static void *_p_imebra__CFindResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *) ((imebra::CFindResponse *) x));
}
static void *_p_imebra__CGetResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *)(imebra::CPartialResponse *) ((imebra::CGetResponse *) x));
}
static void *_p_imebra__CStoreResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *) ((imebra::CStoreResponse *) x));
}
static void *_p_imebra__CPartialResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *) ((imebra::CPartialResponse *) x));
}
static void *_p_imebra__DimseResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *)  ((imebra::DimseResponse *) x));
}
static void *_p_imebra__NEventReportResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *) ((imebra::NEventReportResponse *) x));
}
static void *_p_imebra__NGetResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *) ((imebra::NGetResponse *) x));
}
static void *_p_imebra__NSetResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *) ((imebra::NSetResponse *) x));
}
static void *_p_imebra__NActionResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *) ((imebra::NActionResponse *) x));
}
static void *_p_imebra__NCreateResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *) ((imebra::NCreateResponse *) x));
}
static void *_p_imebra__NDeleteResponseTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseResponse *) ((imebra::NDeleteResponse *) x));
}
static void *_p_imebra__CCancelCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::CCancelCommand *) x));
}
static void *_p_imebra__CEchoCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::CEchoCommand *) x));
}
static void *_p_imebra__CMoveCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::CMoveCommand *) x));
}
static void *_p_imebra__CFindCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::CFindCommand *) x));
}
static void *_p_imebra__CGetCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::CGetCommand *) x));
}
static void *_p_imebra__CStoreCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::CStoreCommand *) x));
}
static void *_p_imebra__DimseCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *)  ((imebra::DimseCommand *) x));
}
static void *_p_imebra__NEventReportCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::NEventReportCommand *) x));
}
static void *_p_imebra__NGetCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::NGetCommand *) x));
}
static void *_p_imebra__NSetCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::NSetCommand *) x));
}
static void *_p_imebra__NActionCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::NActionCommand *) x));
}
static void *_p_imebra__NCreateCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::NCreateCommand *) x));
}
static void *_p_imebra__NDeleteCommandTo_p_imebra__DimseCommandBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::DimseCommandBase *) (imebra::DimseCommand *) ((imebra::NDeleteCommand *) x));
}
static void *_p_imebra__WritingDataHandlerNumericTo_p_imebra__WritingDataHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::WritingDataHandler *)  ((imebra::WritingDataHandlerNumeric *) x));
}
static void *_p_imebra__ReadingDataHandlerNumericTo_p_imebra__ReadingDataHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::ReadingDataHandler *)  ((imebra::ReadingDataHandlerNumeric *) x));
}
static void *_p_imebra__MutableTagTo_p_imebra__Tag(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::Tag *)  ((imebra::MutableTag *) x));
}
static void *_p_imebra__FileStreamInputTo_p_imebra__BaseStreamInput(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::BaseStreamInput *)  ((imebra::FileStreamInput *) x));
}
static void *_p_imebra__MemoryStreamInputTo_p_imebra__BaseStreamInput(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::BaseStreamInput *)  ((imebra::MemoryStreamInput *) x));
}
static void *_p_imebra__MutableAssociationMessageTo_p_imebra__AssociationMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::AssociationMessage *)  ((imebra::MutableAssociationMessage *) x));
}
static void *_p_imebra__AssociationSCUTo_p_imebra__AssociationBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::AssociationBase *)  ((imebra::AssociationSCU *) x));
}
static void *_p_imebra__AssociationSCPTo_p_imebra__AssociationBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::AssociationBase *)  ((imebra::AssociationSCP *) x));
}
static void *_p_imebra__MutableOverlayTo_p_imebra__Overlay(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((imebra::Overlay *)  ((imebra::MutableOverlay *) x));
}
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__Age = {"_p_imebra__Age", "imebra::Age *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__AssociationBase = {"_p_imebra__AssociationBase", "imebra::AssociationBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__AssociationMessage = {"_p_imebra__AssociationMessage", "imebra::AssociationMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__AssociationSCP = {"_p_imebra__AssociationSCP", "imebra::AssociationSCP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__AssociationSCU = {"_p_imebra__AssociationSCU", "imebra::AssociationSCU *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__BaseStreamInput = {"_p_imebra__BaseStreamInput", "imebra::BaseStreamInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__BaseStreamOutput = {"_p_imebra__BaseStreamOutput", "imebra::BaseStreamOutput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__BaseUIDGenerator = {"_p_imebra__BaseUIDGenerator", "imebra::BaseUIDGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CCancelCommand = {"_p_imebra__CCancelCommand", "imebra::CCancelCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CEchoCommand = {"_p_imebra__CEchoCommand", "imebra::CEchoCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CEchoResponse = {"_p_imebra__CEchoResponse", "imebra::CEchoResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CFindCommand = {"_p_imebra__CFindCommand", "imebra::CFindCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CFindResponse = {"_p_imebra__CFindResponse", "imebra::CFindResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CGetCommand = {"_p_imebra__CGetCommand", "imebra::CGetCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CGetResponse = {"_p_imebra__CGetResponse", "imebra::CGetResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CMoveCommand = {"_p_imebra__CMoveCommand", "imebra::CMoveCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CMoveResponse = {"_p_imebra__CMoveResponse", "imebra::CMoveResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CPartialResponse = {"_p_imebra__CPartialResponse", "imebra::CPartialResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CStoreCommand = {"_p_imebra__CStoreCommand", "imebra::CStoreCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CStoreResponse = {"_p_imebra__CStoreResponse", "imebra::CStoreResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__CodecFactory = {"_p_imebra__CodecFactory", "imebra::CodecFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__ColorTransformsFactory = {"_p_imebra__ColorTransformsFactory", "imebra::ColorTransformsFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__DataSet = {"_p_imebra__DataSet", "imebra::DataSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__Date = {"_p_imebra__Date", "imebra::Date *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__DicomDictionary = {"_p_imebra__DicomDictionary", "imebra::DicomDictionary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__DicomDir = {"_p_imebra__DicomDir", "imebra::DicomDir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__DicomDirEntry = {"_p_imebra__DicomDirEntry", "imebra::DicomDirEntry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__DimseCommand = {"_p_imebra__DimseCommand", "imebra::DimseCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__DimseCommandBase = {"_p_imebra__DimseCommandBase", "imebra::DimseCommandBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__DimseResponse = {"_p_imebra__DimseResponse", "imebra::DimseResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__DimseService = {"_p_imebra__DimseService", "imebra::DimseService *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__DrawBitmap = {"_p_imebra__DrawBitmap", "imebra::DrawBitmap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__FileStreamInput = {"_p_imebra__FileStreamInput", "imebra::FileStreamInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__FileStreamOutput = {"_p_imebra__FileStreamOutput", "imebra::FileStreamOutput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__Image = {"_p_imebra__Image", "imebra::Image *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__LUT = {"_p_imebra__LUT", "imebra::LUT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__Memory = {"_p_imebra__Memory", "imebra::Memory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MemoryPool = {"_p_imebra__MemoryPool", "imebra::MemoryPool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MemoryStreamInput = {"_p_imebra__MemoryStreamInput", "imebra::MemoryStreamInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MemoryStreamOutput = {"_p_imebra__MemoryStreamOutput", "imebra::MemoryStreamOutput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__ModalityVOILUT = {"_p_imebra__ModalityVOILUT", "imebra::ModalityVOILUT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MutableAssociationMessage = {"_p_imebra__MutableAssociationMessage", "imebra::MutableAssociationMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MutableDataSet = {"_p_imebra__MutableDataSet", "imebra::MutableDataSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MutableDicomDir = {"_p_imebra__MutableDicomDir", "imebra::MutableDicomDir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MutableDicomDirEntry = {"_p_imebra__MutableDicomDirEntry", "imebra::MutableDicomDirEntry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MutableImage = {"_p_imebra__MutableImage", "imebra::MutableImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MutableMemory = {"_p_imebra__MutableMemory", "imebra::MutableMemory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MutableOverlay = {"_p_imebra__MutableOverlay", "imebra::MutableOverlay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__MutableTag = {"_p_imebra__MutableTag", "imebra::MutableTag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NActionCommand = {"_p_imebra__NActionCommand", "imebra::NActionCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NActionResponse = {"_p_imebra__NActionResponse", "imebra::NActionResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NCreateCommand = {"_p_imebra__NCreateCommand", "imebra::NCreateCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NCreateResponse = {"_p_imebra__NCreateResponse", "imebra::NCreateResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NDeleteCommand = {"_p_imebra__NDeleteCommand", "imebra::NDeleteCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NDeleteResponse = {"_p_imebra__NDeleteResponse", "imebra::NDeleteResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NEventReportCommand = {"_p_imebra__NEventReportCommand", "imebra::NEventReportCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NEventReportResponse = {"_p_imebra__NEventReportResponse", "imebra::NEventReportResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NGetCommand = {"_p_imebra__NGetCommand", "imebra::NGetCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NGetResponse = {"_p_imebra__NGetResponse", "imebra::NGetResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NSetCommand = {"_p_imebra__NSetCommand", "imebra::NSetCommand *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__NSetResponse = {"_p_imebra__NSetResponse", "imebra::NSetResponse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__Overlay = {"_p_imebra__Overlay", "imebra::Overlay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__PatientName = {"_p_imebra__PatientName", "imebra::PatientName *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__PipeStream = {"_p_imebra__PipeStream", "imebra::PipeStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__PresentationContext = {"_p_imebra__PresentationContext", "imebra::PresentationContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__PresentationContexts = {"_p_imebra__PresentationContexts", "imebra::PresentationContexts *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__RandomUIDGenerator = {"_p_imebra__RandomUIDGenerator", "imebra::RandomUIDGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__ReadingDataHandler = {"_p_imebra__ReadingDataHandler", "imebra::ReadingDataHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__ReadingDataHandlerNumeric = {"_p_imebra__ReadingDataHandlerNumeric", "imebra::ReadingDataHandlerNumeric *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__SerialNumberUIDGenerator = {"_p_imebra__SerialNumberUIDGenerator", "imebra::SerialNumberUIDGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__StreamReader = {"_p_imebra__StreamReader", "imebra::StreamReader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__StreamTimeout = {"_p_imebra__StreamTimeout", "imebra::StreamTimeout *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__StreamWriter = {"_p_imebra__StreamWriter", "imebra::StreamWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__TCPActiveAddress = {"_p_imebra__TCPActiveAddress", "imebra::TCPActiveAddress *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__TCPAddress = {"_p_imebra__TCPAddress", "imebra::TCPAddress *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__TCPListener = {"_p_imebra__TCPListener", "imebra::TCPListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__TCPPassiveAddress = {"_p_imebra__TCPPassiveAddress", "imebra::TCPPassiveAddress *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__TCPStream = {"_p_imebra__TCPStream", "imebra::TCPStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__Tag = {"_p_imebra__Tag", "imebra::Tag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__TagId = {"_p_imebra__TagId", "std::vector< imebra::TagId >::value_type *|imebra::TagId *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__Transform = {"_p_imebra__Transform", "imebra::Transform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__TransformHighBit = {"_p_imebra__TransformHighBit", "imebra::TransformHighBit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__TransformsChain = {"_p_imebra__TransformsChain", "imebra::TransformsChain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__UIDGeneratorFactory = {"_p_imebra__UIDGeneratorFactory", "imebra::UIDGeneratorFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__VOIDescription = {"_p_imebra__VOIDescription", "imebra::VOIDescription *|std::vector< imebra::VOIDescription >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__VOILUT = {"_p_imebra__VOILUT", "imebra::VOILUT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__WritingDataHandler = {"_p_imebra__WritingDataHandler", "imebra::WritingDataHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imebra__WritingDataHandlerNumeric = {"_p_imebra__WritingDataHandlerNumeric", "imebra::WritingDataHandlerNumeric *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_imebra__TagId_t = {"_p_std__allocatorT_imebra__TagId_t", "std::vector< imebra::TagId >::allocator_type *|std::allocator< imebra::TagId > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_imebra__VOIDescription_t = {"_p_std__allocatorT_imebra__VOIDescription_t", "std::allocator< imebra::VOIDescription > *|std::vector< imebra::VOIDescription >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_unsigned_short_t = {"_p_std__allocatorT_unsigned_short_t", "std::allocator< unsigned short > *|std::vector< unsigned short >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t = {"_p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t", "std::vector< imebra::TagId > *|std::vector< imebra::TagId,std::allocator< imebra::TagId > > *|imebra::tagsIds_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t = {"_p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t", "imebra::vois_t *|std::vector< imebra::VOIDescription,std::allocator< imebra::VOIDescription > > *|std::vector< imebra::VOIDescription > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t = {"_p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t", "imebra::attributeIdentifierList_t *|std::vector< enum imebra::tagId_t,std::allocator< enum imebra::tagId_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *|imebra::fileParts_t *|imebra::charsetsList_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t = {"_p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t", "std::vector< unsigned short,std::allocator< unsigned short > > *|std::vector< unsigned short > *|std::vector< std::uint16_t,std::allocator< std::uint16_t > > *|std::vector< std::uint16_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_imebra__Age,
  &_swigt__p_imebra__AssociationBase,
  &_swigt__p_imebra__AssociationMessage,
  &_swigt__p_imebra__AssociationSCP,
  &_swigt__p_imebra__AssociationSCU,
  &_swigt__p_imebra__BaseStreamInput,
  &_swigt__p_imebra__BaseStreamOutput,
  &_swigt__p_imebra__BaseUIDGenerator,
  &_swigt__p_imebra__CCancelCommand,
  &_swigt__p_imebra__CEchoCommand,
  &_swigt__p_imebra__CEchoResponse,
  &_swigt__p_imebra__CFindCommand,
  &_swigt__p_imebra__CFindResponse,
  &_swigt__p_imebra__CGetCommand,
  &_swigt__p_imebra__CGetResponse,
  &_swigt__p_imebra__CMoveCommand,
  &_swigt__p_imebra__CMoveResponse,
  &_swigt__p_imebra__CPartialResponse,
  &_swigt__p_imebra__CStoreCommand,
  &_swigt__p_imebra__CStoreResponse,
  &_swigt__p_imebra__CodecFactory,
  &_swigt__p_imebra__ColorTransformsFactory,
  &_swigt__p_imebra__DataSet,
  &_swigt__p_imebra__Date,
  &_swigt__p_imebra__DicomDictionary,
  &_swigt__p_imebra__DicomDir,
  &_swigt__p_imebra__DicomDirEntry,
  &_swigt__p_imebra__DimseCommand,
  &_swigt__p_imebra__DimseCommandBase,
  &_swigt__p_imebra__DimseResponse,
  &_swigt__p_imebra__DimseService,
  &_swigt__p_imebra__DrawBitmap,
  &_swigt__p_imebra__FileStreamInput,
  &_swigt__p_imebra__FileStreamOutput,
  &_swigt__p_imebra__Image,
  &_swigt__p_imebra__LUT,
  &_swigt__p_imebra__Memory,
  &_swigt__p_imebra__MemoryPool,
  &_swigt__p_imebra__MemoryStreamInput,
  &_swigt__p_imebra__MemoryStreamOutput,
  &_swigt__p_imebra__ModalityVOILUT,
  &_swigt__p_imebra__MutableAssociationMessage,
  &_swigt__p_imebra__MutableDataSet,
  &_swigt__p_imebra__MutableDicomDir,
  &_swigt__p_imebra__MutableDicomDirEntry,
  &_swigt__p_imebra__MutableImage,
  &_swigt__p_imebra__MutableMemory,
  &_swigt__p_imebra__MutableOverlay,
  &_swigt__p_imebra__MutableTag,
  &_swigt__p_imebra__NActionCommand,
  &_swigt__p_imebra__NActionResponse,
  &_swigt__p_imebra__NCreateCommand,
  &_swigt__p_imebra__NCreateResponse,
  &_swigt__p_imebra__NDeleteCommand,
  &_swigt__p_imebra__NDeleteResponse,
  &_swigt__p_imebra__NEventReportCommand,
  &_swigt__p_imebra__NEventReportResponse,
  &_swigt__p_imebra__NGetCommand,
  &_swigt__p_imebra__NGetResponse,
  &_swigt__p_imebra__NSetCommand,
  &_swigt__p_imebra__NSetResponse,
  &_swigt__p_imebra__Overlay,
  &_swigt__p_imebra__PatientName,
  &_swigt__p_imebra__PipeStream,
  &_swigt__p_imebra__PresentationContext,
  &_swigt__p_imebra__PresentationContexts,
  &_swigt__p_imebra__RandomUIDGenerator,
  &_swigt__p_imebra__ReadingDataHandler,
  &_swigt__p_imebra__ReadingDataHandlerNumeric,
  &_swigt__p_imebra__SerialNumberUIDGenerator,
  &_swigt__p_imebra__StreamReader,
  &_swigt__p_imebra__StreamTimeout,
  &_swigt__p_imebra__StreamWriter,
  &_swigt__p_imebra__TCPActiveAddress,
  &_swigt__p_imebra__TCPAddress,
  &_swigt__p_imebra__TCPListener,
  &_swigt__p_imebra__TCPPassiveAddress,
  &_swigt__p_imebra__TCPStream,
  &_swigt__p_imebra__Tag,
  &_swigt__p_imebra__TagId,
  &_swigt__p_imebra__Transform,
  &_swigt__p_imebra__TransformHighBit,
  &_swigt__p_imebra__TransformsChain,
  &_swigt__p_imebra__UIDGeneratorFactory,
  &_swigt__p_imebra__VOIDescription,
  &_swigt__p_imebra__VOILUT,
  &_swigt__p_imebra__WritingDataHandler,
  &_swigt__p_imebra__WritingDataHandlerNumeric,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_PyObject,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_imebra__TagId_t,
  &_swigt__p_std__allocatorT_imebra__VOIDescription_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__allocatorT_unsigned_short_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t,
  &_swigt__p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t,
  &_swigt__p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,
  &_swigt__p_std__wstring,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__Age[] = {  {&_swigt__p_imebra__Age, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__AssociationBase[] = {  {&_swigt__p_imebra__AssociationSCU, _p_imebra__AssociationSCUTo_p_imebra__AssociationBase, 0, 0},  {&_swigt__p_imebra__AssociationSCP, _p_imebra__AssociationSCPTo_p_imebra__AssociationBase, 0, 0},  {&_swigt__p_imebra__AssociationBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__AssociationMessage[] = {  {&_swigt__p_imebra__AssociationMessage, 0, 0, 0},  {&_swigt__p_imebra__MutableAssociationMessage, _p_imebra__MutableAssociationMessageTo_p_imebra__AssociationMessage, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__AssociationSCP[] = {  {&_swigt__p_imebra__AssociationSCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__AssociationSCU[] = {  {&_swigt__p_imebra__AssociationSCU, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__BaseStreamInput[] = {  {&_swigt__p_imebra__BaseStreamInput, 0, 0, 0},  {&_swigt__p_imebra__FileStreamInput, _p_imebra__FileStreamInputTo_p_imebra__BaseStreamInput, 0, 0},  {&_swigt__p_imebra__MemoryStreamInput, _p_imebra__MemoryStreamInputTo_p_imebra__BaseStreamInput, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__BaseStreamOutput[] = {  {&_swigt__p_imebra__BaseStreamOutput, 0, 0, 0},  {&_swigt__p_imebra__FileStreamOutput, _p_imebra__FileStreamOutputTo_p_imebra__BaseStreamOutput, 0, 0},  {&_swigt__p_imebra__MemoryStreamOutput, _p_imebra__MemoryStreamOutputTo_p_imebra__BaseStreamOutput, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__BaseUIDGenerator[] = {  {&_swigt__p_imebra__BaseUIDGenerator, 0, 0, 0},  {&_swigt__p_imebra__RandomUIDGenerator, _p_imebra__RandomUIDGeneratorTo_p_imebra__BaseUIDGenerator, 0, 0},  {&_swigt__p_imebra__SerialNumberUIDGenerator, _p_imebra__SerialNumberUIDGeneratorTo_p_imebra__BaseUIDGenerator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CCancelCommand[] = {  {&_swigt__p_imebra__CCancelCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CEchoCommand[] = {  {&_swigt__p_imebra__CEchoCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CEchoResponse[] = {  {&_swigt__p_imebra__CEchoResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CFindCommand[] = {  {&_swigt__p_imebra__CFindCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CFindResponse[] = {  {&_swigt__p_imebra__CFindResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CGetCommand[] = {  {&_swigt__p_imebra__CGetCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CGetResponse[] = {  {&_swigt__p_imebra__CGetResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CMoveCommand[] = {  {&_swigt__p_imebra__CMoveCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CMoveResponse[] = {  {&_swigt__p_imebra__CMoveResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CPartialResponse[] = {  {&_swigt__p_imebra__CPartialResponse, 0, 0, 0},  {&_swigt__p_imebra__CGetResponse, _p_imebra__CGetResponseTo_p_imebra__CPartialResponse, 0, 0},  {&_swigt__p_imebra__CMoveResponse, _p_imebra__CMoveResponseTo_p_imebra__CPartialResponse, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CStoreCommand[] = {  {&_swigt__p_imebra__CStoreCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CStoreResponse[] = {  {&_swigt__p_imebra__CStoreResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__CodecFactory[] = {  {&_swigt__p_imebra__CodecFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__ColorTransformsFactory[] = {  {&_swigt__p_imebra__ColorTransformsFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__DataSet[] = {  {&_swigt__p_imebra__DataSet, 0, 0, 0},  {&_swigt__p_imebra__MutableDataSet, _p_imebra__MutableDataSetTo_p_imebra__DataSet, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__Date[] = {  {&_swigt__p_imebra__Date, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__DicomDictionary[] = {  {&_swigt__p_imebra__DicomDictionary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__DicomDir[] = {  {&_swigt__p_imebra__DicomDir, 0, 0, 0},  {&_swigt__p_imebra__MutableDicomDir, _p_imebra__MutableDicomDirTo_p_imebra__DicomDir, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__DicomDirEntry[] = {  {&_swigt__p_imebra__DicomDirEntry, 0, 0, 0},  {&_swigt__p_imebra__MutableDicomDirEntry, _p_imebra__MutableDicomDirEntryTo_p_imebra__DicomDirEntry, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__DimseCommand[] = {  {&_swigt__p_imebra__DimseCommand, 0, 0, 0},  {&_swigt__p_imebra__CStoreCommand, _p_imebra__CStoreCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__CGetCommand, _p_imebra__CGetCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__CFindCommand, _p_imebra__CFindCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__CMoveCommand, _p_imebra__CMoveCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__CEchoCommand, _p_imebra__CEchoCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__CCancelCommand, _p_imebra__CCancelCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__NEventReportCommand, _p_imebra__NEventReportCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__NGetCommand, _p_imebra__NGetCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__NSetCommand, _p_imebra__NSetCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__NActionCommand, _p_imebra__NActionCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__NCreateCommand, _p_imebra__NCreateCommandTo_p_imebra__DimseCommand, 0, 0},  {&_swigt__p_imebra__NDeleteCommand, _p_imebra__NDeleteCommandTo_p_imebra__DimseCommand, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__DimseCommandBase[] = {  {&_swigt__p_imebra__CEchoResponse, _p_imebra__CEchoResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CFindResponse, _p_imebra__CFindResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CStoreResponse, _p_imebra__CStoreResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CMoveResponse, _p_imebra__CMoveResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CGetResponse, _p_imebra__CGetResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CPartialResponse, _p_imebra__CPartialResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__DimseResponse, _p_imebra__DimseResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NEventReportResponse, _p_imebra__NEventReportResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NGetResponse, _p_imebra__NGetResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NSetResponse, _p_imebra__NSetResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NActionResponse, _p_imebra__NActionResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NCreateResponse, _p_imebra__NCreateResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NDeleteResponse, _p_imebra__NDeleteResponseTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CCancelCommand, _p_imebra__CCancelCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CEchoCommand, _p_imebra__CEchoCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CMoveCommand, _p_imebra__CMoveCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CFindCommand, _p_imebra__CFindCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CGetCommand, _p_imebra__CGetCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__CStoreCommand, _p_imebra__CStoreCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__DimseCommand, _p_imebra__DimseCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NEventReportCommand, _p_imebra__NEventReportCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NGetCommand, _p_imebra__NGetCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NSetCommand, _p_imebra__NSetCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NActionCommand, _p_imebra__NActionCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NCreateCommand, _p_imebra__NCreateCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__NDeleteCommand, _p_imebra__NDeleteCommandTo_p_imebra__DimseCommandBase, 0, 0},  {&_swigt__p_imebra__DimseCommandBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__DimseResponse[] = {  {&_swigt__p_imebra__DimseResponse, 0, 0, 0},  {&_swigt__p_imebra__CPartialResponse, _p_imebra__CPartialResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__CGetResponse, _p_imebra__CGetResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__CMoveResponse, _p_imebra__CMoveResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__CStoreResponse, _p_imebra__CStoreResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__CFindResponse, _p_imebra__CFindResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__CEchoResponse, _p_imebra__CEchoResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__NEventReportResponse, _p_imebra__NEventReportResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__NGetResponse, _p_imebra__NGetResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__NSetResponse, _p_imebra__NSetResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__NActionResponse, _p_imebra__NActionResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__NCreateResponse, _p_imebra__NCreateResponseTo_p_imebra__DimseResponse, 0, 0},  {&_swigt__p_imebra__NDeleteResponse, _p_imebra__NDeleteResponseTo_p_imebra__DimseResponse, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__DimseService[] = {  {&_swigt__p_imebra__DimseService, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__DrawBitmap[] = {  {&_swigt__p_imebra__DrawBitmap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__FileStreamInput[] = {  {&_swigt__p_imebra__FileStreamInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__FileStreamOutput[] = {  {&_swigt__p_imebra__FileStreamOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__Image[] = {  {&_swigt__p_imebra__Image, 0, 0, 0},  {&_swigt__p_imebra__MutableImage, _p_imebra__MutableImageTo_p_imebra__Image, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__LUT[] = {  {&_swigt__p_imebra__LUT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__Memory[] = {  {&_swigt__p_imebra__Memory, 0, 0, 0},  {&_swigt__p_imebra__MutableMemory, _p_imebra__MutableMemoryTo_p_imebra__Memory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MemoryPool[] = {  {&_swigt__p_imebra__MemoryPool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MemoryStreamInput[] = {  {&_swigt__p_imebra__MemoryStreamInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MemoryStreamOutput[] = {  {&_swigt__p_imebra__MemoryStreamOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__ModalityVOILUT[] = {  {&_swigt__p_imebra__ModalityVOILUT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MutableAssociationMessage[] = {  {&_swigt__p_imebra__MutableAssociationMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MutableDataSet[] = {  {&_swigt__p_imebra__MutableDataSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MutableDicomDir[] = {  {&_swigt__p_imebra__MutableDicomDir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MutableDicomDirEntry[] = {  {&_swigt__p_imebra__MutableDicomDirEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MutableImage[] = {  {&_swigt__p_imebra__MutableImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MutableMemory[] = {  {&_swigt__p_imebra__MutableMemory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MutableOverlay[] = {  {&_swigt__p_imebra__MutableOverlay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__MutableTag[] = {  {&_swigt__p_imebra__MutableTag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NActionCommand[] = {  {&_swigt__p_imebra__NActionCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NActionResponse[] = {  {&_swigt__p_imebra__NActionResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NCreateCommand[] = {  {&_swigt__p_imebra__NCreateCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NCreateResponse[] = {  {&_swigt__p_imebra__NCreateResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NDeleteCommand[] = {  {&_swigt__p_imebra__NDeleteCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NDeleteResponse[] = {  {&_swigt__p_imebra__NDeleteResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NEventReportCommand[] = {  {&_swigt__p_imebra__NEventReportCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NEventReportResponse[] = {  {&_swigt__p_imebra__NEventReportResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NGetCommand[] = {  {&_swigt__p_imebra__NGetCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NGetResponse[] = {  {&_swigt__p_imebra__NGetResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NSetCommand[] = {  {&_swigt__p_imebra__NSetCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__NSetResponse[] = {  {&_swigt__p_imebra__NSetResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__Overlay[] = {  {&_swigt__p_imebra__Overlay, 0, 0, 0},  {&_swigt__p_imebra__MutableOverlay, _p_imebra__MutableOverlayTo_p_imebra__Overlay, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__PatientName[] = {  {&_swigt__p_imebra__PatientName, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__PipeStream[] = {  {&_swigt__p_imebra__PipeStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__PresentationContext[] = {  {&_swigt__p_imebra__PresentationContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__PresentationContexts[] = {  {&_swigt__p_imebra__PresentationContexts, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__RandomUIDGenerator[] = {  {&_swigt__p_imebra__RandomUIDGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__ReadingDataHandler[] = {  {&_swigt__p_imebra__ReadingDataHandler, 0, 0, 0},  {&_swigt__p_imebra__ReadingDataHandlerNumeric, _p_imebra__ReadingDataHandlerNumericTo_p_imebra__ReadingDataHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__ReadingDataHandlerNumeric[] = {  {&_swigt__p_imebra__ReadingDataHandlerNumeric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__SerialNumberUIDGenerator[] = {  {&_swigt__p_imebra__SerialNumberUIDGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__StreamReader[] = {  {&_swigt__p_imebra__StreamReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__StreamTimeout[] = {  {&_swigt__p_imebra__StreamTimeout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__StreamWriter[] = {  {&_swigt__p_imebra__StreamWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__TCPActiveAddress[] = {  {&_swigt__p_imebra__TCPActiveAddress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__TCPAddress[] = {  {&_swigt__p_imebra__TCPAddress, 0, 0, 0},  {&_swigt__p_imebra__TCPActiveAddress, _p_imebra__TCPActiveAddressTo_p_imebra__TCPAddress, 0, 0},  {&_swigt__p_imebra__TCPPassiveAddress, _p_imebra__TCPPassiveAddressTo_p_imebra__TCPAddress, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__TCPListener[] = {  {&_swigt__p_imebra__TCPListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__TCPPassiveAddress[] = {  {&_swigt__p_imebra__TCPPassiveAddress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__TCPStream[] = {  {&_swigt__p_imebra__TCPStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__Tag[] = {  {&_swigt__p_imebra__Tag, 0, 0, 0},  {&_swigt__p_imebra__MutableTag, _p_imebra__MutableTagTo_p_imebra__Tag, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__TagId[] = {  {&_swigt__p_imebra__TagId, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__Transform[] = {  {&_swigt__p_imebra__TransformsChain, _p_imebra__TransformsChainTo_p_imebra__Transform, 0, 0},  {&_swigt__p_imebra__VOILUT, _p_imebra__VOILUTTo_p_imebra__Transform, 0, 0},  {&_swigt__p_imebra__ModalityVOILUT, _p_imebra__ModalityVOILUTTo_p_imebra__Transform, 0, 0},  {&_swigt__p_imebra__Transform, 0, 0, 0},  {&_swigt__p_imebra__TransformHighBit, _p_imebra__TransformHighBitTo_p_imebra__Transform, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__TransformHighBit[] = {  {&_swigt__p_imebra__TransformHighBit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__TransformsChain[] = {  {&_swigt__p_imebra__TransformsChain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__UIDGeneratorFactory[] = {  {&_swigt__p_imebra__UIDGeneratorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__VOIDescription[] = {  {&_swigt__p_imebra__VOIDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__VOILUT[] = {  {&_swigt__p_imebra__VOILUT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__WritingDataHandler[] = {  {&_swigt__p_imebra__WritingDataHandler, 0, 0, 0},  {&_swigt__p_imebra__WritingDataHandlerNumeric, _p_imebra__WritingDataHandlerNumericTo_p_imebra__WritingDataHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imebra__WritingDataHandlerNumeric[] = {  {&_swigt__p_imebra__WritingDataHandlerNumeric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_imebra__TagId_t[] = {  {&_swigt__p_std__allocatorT_imebra__TagId_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_imebra__VOIDescription_t[] = {  {&_swigt__p_std__allocatorT_imebra__VOIDescription_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_unsigned_short_t[] = {  {&_swigt__p_std__allocatorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t[] = {  {&_swigt__p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t[] = {  {&_swigt__p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t[] = {  {&_swigt__p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_imebra__Age,
  _swigc__p_imebra__AssociationBase,
  _swigc__p_imebra__AssociationMessage,
  _swigc__p_imebra__AssociationSCP,
  _swigc__p_imebra__AssociationSCU,
  _swigc__p_imebra__BaseStreamInput,
  _swigc__p_imebra__BaseStreamOutput,
  _swigc__p_imebra__BaseUIDGenerator,
  _swigc__p_imebra__CCancelCommand,
  _swigc__p_imebra__CEchoCommand,
  _swigc__p_imebra__CEchoResponse,
  _swigc__p_imebra__CFindCommand,
  _swigc__p_imebra__CFindResponse,
  _swigc__p_imebra__CGetCommand,
  _swigc__p_imebra__CGetResponse,
  _swigc__p_imebra__CMoveCommand,
  _swigc__p_imebra__CMoveResponse,
  _swigc__p_imebra__CPartialResponse,
  _swigc__p_imebra__CStoreCommand,
  _swigc__p_imebra__CStoreResponse,
  _swigc__p_imebra__CodecFactory,
  _swigc__p_imebra__ColorTransformsFactory,
  _swigc__p_imebra__DataSet,
  _swigc__p_imebra__Date,
  _swigc__p_imebra__DicomDictionary,
  _swigc__p_imebra__DicomDir,
  _swigc__p_imebra__DicomDirEntry,
  _swigc__p_imebra__DimseCommand,
  _swigc__p_imebra__DimseCommandBase,
  _swigc__p_imebra__DimseResponse,
  _swigc__p_imebra__DimseService,
  _swigc__p_imebra__DrawBitmap,
  _swigc__p_imebra__FileStreamInput,
  _swigc__p_imebra__FileStreamOutput,
  _swigc__p_imebra__Image,
  _swigc__p_imebra__LUT,
  _swigc__p_imebra__Memory,
  _swigc__p_imebra__MemoryPool,
  _swigc__p_imebra__MemoryStreamInput,
  _swigc__p_imebra__MemoryStreamOutput,
  _swigc__p_imebra__ModalityVOILUT,
  _swigc__p_imebra__MutableAssociationMessage,
  _swigc__p_imebra__MutableDataSet,
  _swigc__p_imebra__MutableDicomDir,
  _swigc__p_imebra__MutableDicomDirEntry,
  _swigc__p_imebra__MutableImage,
  _swigc__p_imebra__MutableMemory,
  _swigc__p_imebra__MutableOverlay,
  _swigc__p_imebra__MutableTag,
  _swigc__p_imebra__NActionCommand,
  _swigc__p_imebra__NActionResponse,
  _swigc__p_imebra__NCreateCommand,
  _swigc__p_imebra__NCreateResponse,
  _swigc__p_imebra__NDeleteCommand,
  _swigc__p_imebra__NDeleteResponse,
  _swigc__p_imebra__NEventReportCommand,
  _swigc__p_imebra__NEventReportResponse,
  _swigc__p_imebra__NGetCommand,
  _swigc__p_imebra__NGetResponse,
  _swigc__p_imebra__NSetCommand,
  _swigc__p_imebra__NSetResponse,
  _swigc__p_imebra__Overlay,
  _swigc__p_imebra__PatientName,
  _swigc__p_imebra__PipeStream,
  _swigc__p_imebra__PresentationContext,
  _swigc__p_imebra__PresentationContexts,
  _swigc__p_imebra__RandomUIDGenerator,
  _swigc__p_imebra__ReadingDataHandler,
  _swigc__p_imebra__ReadingDataHandlerNumeric,
  _swigc__p_imebra__SerialNumberUIDGenerator,
  _swigc__p_imebra__StreamReader,
  _swigc__p_imebra__StreamTimeout,
  _swigc__p_imebra__StreamWriter,
  _swigc__p_imebra__TCPActiveAddress,
  _swigc__p_imebra__TCPAddress,
  _swigc__p_imebra__TCPListener,
  _swigc__p_imebra__TCPPassiveAddress,
  _swigc__p_imebra__TCPStream,
  _swigc__p_imebra__Tag,
  _swigc__p_imebra__TagId,
  _swigc__p_imebra__Transform,
  _swigc__p_imebra__TransformHighBit,
  _swigc__p_imebra__TransformsChain,
  _swigc__p_imebra__UIDGeneratorFactory,
  _swigc__p_imebra__VOIDescription,
  _swigc__p_imebra__VOILUT,
  _swigc__p_imebra__WritingDataHandler,
  _swigc__p_imebra__WritingDataHandlerNumeric,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_PyObject,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_imebra__TagId_t,
  _swigc__p_std__allocatorT_imebra__VOIDescription_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__allocatorT_unsigned_short_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__vectorT_imebra__TagId_std__allocatorT_imebra__TagId_t_t,
  _swigc__p_std__vectorT_imebra__VOIDescription_std__allocatorT_imebra__VOIDescription_t_t,
  _swigc__p_std__vectorT_imebra__tagId_t_std__allocatorT_imebra__tagId_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_unsigned_short_std__allocatorT_unsigned_short_t_t,
  _swigc__p_std__wstring,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "tagId_t_CommandGroupLength_0000_0000",SWIG_From_int(static_cast< int >(imebra::tagId_t::CommandGroupLength_0000_0000)));
  SWIG_Python_SetConstant(d, "tagId_t_CommandLengthToEnd_0000_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::CommandLengthToEnd_0000_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_AffectedSOPClassUID_0000_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::AffectedSOPClassUID_0000_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedSOPClassUID_0000_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedSOPClassUID_0000_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_CommandRecognitionCode_0000_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::CommandRecognitionCode_0000_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_CommandField_0000_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::CommandField_0000_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_MessageID_0000_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::MessageID_0000_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_MessageIDBeingRespondedTo_0000_0120",SWIG_From_int(static_cast< int >(imebra::tagId_t::MessageIDBeingRespondedTo_0000_0120)));
  SWIG_Python_SetConstant(d, "tagId_t_Initiator_0000_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::Initiator_0000_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_Receiver_0000_0300",SWIG_From_int(static_cast< int >(imebra::tagId_t::Receiver_0000_0300)));
  SWIG_Python_SetConstant(d, "tagId_t_FindLocation_0000_0400",SWIG_From_int(static_cast< int >(imebra::tagId_t::FindLocation_0000_0400)));
  SWIG_Python_SetConstant(d, "tagId_t_MoveDestination_0000_0600",SWIG_From_int(static_cast< int >(imebra::tagId_t::MoveDestination_0000_0600)));
  SWIG_Python_SetConstant(d, "tagId_t_Priority_0000_0700",SWIG_From_int(static_cast< int >(imebra::tagId_t::Priority_0000_0700)));
  SWIG_Python_SetConstant(d, "tagId_t_CommandDataSetType_0000_0800",SWIG_From_int(static_cast< int >(imebra::tagId_t::CommandDataSetType_0000_0800)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfMatches_0000_0850",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfMatches_0000_0850)));
  SWIG_Python_SetConstant(d, "tagId_t_ResponseSequenceNumber_0000_0860",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResponseSequenceNumber_0000_0860)));
  SWIG_Python_SetConstant(d, "tagId_t_Status_0000_0900",SWIG_From_int(static_cast< int >(imebra::tagId_t::Status_0000_0900)));
  SWIG_Python_SetConstant(d, "tagId_t_OffendingElement_0000_0901",SWIG_From_int(static_cast< int >(imebra::tagId_t::OffendingElement_0000_0901)));
  SWIG_Python_SetConstant(d, "tagId_t_ErrorComment_0000_0902",SWIG_From_int(static_cast< int >(imebra::tagId_t::ErrorComment_0000_0902)));
  SWIG_Python_SetConstant(d, "tagId_t_ErrorID_0000_0903",SWIG_From_int(static_cast< int >(imebra::tagId_t::ErrorID_0000_0903)));
  SWIG_Python_SetConstant(d, "tagId_t_AffectedSOPInstanceUID_0000_1000",SWIG_From_int(static_cast< int >(imebra::tagId_t::AffectedSOPInstanceUID_0000_1000)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedSOPInstanceUID_0000_1001",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedSOPInstanceUID_0000_1001)));
  SWIG_Python_SetConstant(d, "tagId_t_EventTypeID_0000_1002",SWIG_From_int(static_cast< int >(imebra::tagId_t::EventTypeID_0000_1002)));
  SWIG_Python_SetConstant(d, "tagId_t_AttributeIdentifierList_0000_1005",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttributeIdentifierList_0000_1005)));
  SWIG_Python_SetConstant(d, "tagId_t_ActionTypeID_0000_1008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ActionTypeID_0000_1008)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfRemainingSuboperations_0000_1020",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfRemainingSuboperations_0000_1020)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfCompletedSuboperations_0000_1021",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfCompletedSuboperations_0000_1021)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFailedSuboperations_0000_1022",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFailedSuboperations_0000_1022)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfWarningSuboperations_0000_1023",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfWarningSuboperations_0000_1023)));
  SWIG_Python_SetConstant(d, "tagId_t_MoveOriginatorApplicationEntityTitle_0000_1030",SWIG_From_int(static_cast< int >(imebra::tagId_t::MoveOriginatorApplicationEntityTitle_0000_1030)));
  SWIG_Python_SetConstant(d, "tagId_t_MoveOriginatorMessageID_0000_1031",SWIG_From_int(static_cast< int >(imebra::tagId_t::MoveOriginatorMessageID_0000_1031)));
  SWIG_Python_SetConstant(d, "tagId_t_DialogReceiver_0000_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::DialogReceiver_0000_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_TerminalType_0000_4010",SWIG_From_int(static_cast< int >(imebra::tagId_t::TerminalType_0000_4010)));
  SWIG_Python_SetConstant(d, "tagId_t_MessageSetID_0000_5010",SWIG_From_int(static_cast< int >(imebra::tagId_t::MessageSetID_0000_5010)));
  SWIG_Python_SetConstant(d, "tagId_t_EndMessageID_0000_5020",SWIG_From_int(static_cast< int >(imebra::tagId_t::EndMessageID_0000_5020)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayFormat_0000_5110",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayFormat_0000_5110)));
  SWIG_Python_SetConstant(d, "tagId_t_PagePositionID_0000_5120",SWIG_From_int(static_cast< int >(imebra::tagId_t::PagePositionID_0000_5120)));
  SWIG_Python_SetConstant(d, "tagId_t_TextFormatID_0000_5130",SWIG_From_int(static_cast< int >(imebra::tagId_t::TextFormatID_0000_5130)));
  SWIG_Python_SetConstant(d, "tagId_t_NormalReverse_0000_5140",SWIG_From_int(static_cast< int >(imebra::tagId_t::NormalReverse_0000_5140)));
  SWIG_Python_SetConstant(d, "tagId_t_AddGrayScale_0000_5150",SWIG_From_int(static_cast< int >(imebra::tagId_t::AddGrayScale_0000_5150)));
  SWIG_Python_SetConstant(d, "tagId_t_Borders_0000_5160",SWIG_From_int(static_cast< int >(imebra::tagId_t::Borders_0000_5160)));
  SWIG_Python_SetConstant(d, "tagId_t_Copies_0000_5170",SWIG_From_int(static_cast< int >(imebra::tagId_t::Copies_0000_5170)));
  SWIG_Python_SetConstant(d, "tagId_t_CommandMagnificationType_0000_5180",SWIG_From_int(static_cast< int >(imebra::tagId_t::CommandMagnificationType_0000_5180)));
  SWIG_Python_SetConstant(d, "tagId_t_Erase_0000_5190",SWIG_From_int(static_cast< int >(imebra::tagId_t::Erase_0000_5190)));
  SWIG_Python_SetConstant(d, "tagId_t_Print_0000_51A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::Print_0000_51A0)));
  SWIG_Python_SetConstant(d, "tagId_t_Overlays_0000_51B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::Overlays_0000_51B0)));
  SWIG_Python_SetConstant(d, "tagId_t_FileMetaInformationGroupLength_0002_0000",SWIG_From_int(static_cast< int >(imebra::tagId_t::FileMetaInformationGroupLength_0002_0000)));
  SWIG_Python_SetConstant(d, "tagId_t_FileMetaInformationVersion_0002_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::FileMetaInformationVersion_0002_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_MediaStorageSOPClassUID_0002_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::MediaStorageSOPClassUID_0002_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_MediaStorageSOPInstanceUID_0002_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::MediaStorageSOPInstanceUID_0002_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_TransferSyntaxUID_0002_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransferSyntaxUID_0002_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplementationClassUID_0002_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplementationClassUID_0002_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplementationVersionName_0002_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplementationVersionName_0002_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicationEntityTitle_0002_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicationEntityTitle_0002_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_SendingApplicationEntityTitle_0002_0017",SWIG_From_int(static_cast< int >(imebra::tagId_t::SendingApplicationEntityTitle_0002_0017)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceivingApplicationEntityTitle_0002_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceivingApplicationEntityTitle_0002_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateInformationCreatorUID_0002_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateInformationCreatorUID_0002_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateInformation_0002_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateInformation_0002_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_FileSetID_0004_1130",SWIG_From_int(static_cast< int >(imebra::tagId_t::FileSetID_0004_1130)));
  SWIG_Python_SetConstant(d, "tagId_t_FileSetDescriptorFileID_0004_1141",SWIG_From_int(static_cast< int >(imebra::tagId_t::FileSetDescriptorFileID_0004_1141)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecificCharacterSetOfFileSetDescriptorFile_0004_1142",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecificCharacterSetOfFileSetDescriptorFile_0004_1142)));
  SWIG_Python_SetConstant(d, "tagId_t_OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity_0004_1200",SWIG_From_int(static_cast< int >(imebra::tagId_t::OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity_0004_1200)));
  SWIG_Python_SetConstant(d, "tagId_t_OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity_0004_1202",SWIG_From_int(static_cast< int >(imebra::tagId_t::OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity_0004_1202)));
  SWIG_Python_SetConstant(d, "tagId_t_FileSetConsistencyFlag_0004_1212",SWIG_From_int(static_cast< int >(imebra::tagId_t::FileSetConsistencyFlag_0004_1212)));
  SWIG_Python_SetConstant(d, "tagId_t_DirectoryRecordSequence_0004_1220",SWIG_From_int(static_cast< int >(imebra::tagId_t::DirectoryRecordSequence_0004_1220)));
  SWIG_Python_SetConstant(d, "tagId_t_OffsetOfTheNextDirectoryRecord_0004_1400",SWIG_From_int(static_cast< int >(imebra::tagId_t::OffsetOfTheNextDirectoryRecord_0004_1400)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordInUseFlag_0004_1410",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordInUseFlag_0004_1410)));
  SWIG_Python_SetConstant(d, "tagId_t_OffsetOfReferencedLowerLevelDirectoryEntity_0004_1420",SWIG_From_int(static_cast< int >(imebra::tagId_t::OffsetOfReferencedLowerLevelDirectoryEntity_0004_1420)));
  SWIG_Python_SetConstant(d, "tagId_t_DirectoryRecordType_0004_1430",SWIG_From_int(static_cast< int >(imebra::tagId_t::DirectoryRecordType_0004_1430)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateRecordUID_0004_1432",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateRecordUID_0004_1432)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFileID_0004_1500",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFileID_0004_1500)));
  SWIG_Python_SetConstant(d, "tagId_t_MRDRDirectoryRecordOffset_0004_1504",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRDRDirectoryRecordOffset_0004_1504)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSOPClassUIDInFile_0004_1510",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSOPClassUIDInFile_0004_1510)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSOPInstanceUIDInFile_0004_1511",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSOPInstanceUIDInFile_0004_1511)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedTransferSyntaxUIDInFile_0004_1512",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedTransferSyntaxUIDInFile_0004_1512)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRelatedGeneralSOPClassUIDInFile_0004_151A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRelatedGeneralSOPClassUIDInFile_0004_151A)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfReferences_0004_1600",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfReferences_0004_1600)));
  SWIG_Python_SetConstant(d, "tagId_t_LengthToEnd_0008_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::LengthToEnd_0008_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecificCharacterSet_0008_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecificCharacterSet_0008_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_LanguageCodeSequence_0008_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::LanguageCodeSequence_0008_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageType_0008_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageType_0008_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_RecognitionCode_0008_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecognitionCode_0008_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_InstanceCreationDate_0008_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstanceCreationDate_0008_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_InstanceCreationTime_0008_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstanceCreationTime_0008_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_InstanceCreatorUID_0008_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstanceCreatorUID_0008_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_InstanceCoercionDateTime_0008_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstanceCoercionDateTime_0008_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_SOPClassUID_0008_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::SOPClassUID_0008_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_SOPInstanceUID_0008_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::SOPInstanceUID_0008_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_RelatedGeneralSOPClassUID_0008_001A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelatedGeneralSOPClassUID_0008_001A)));
  SWIG_Python_SetConstant(d, "tagId_t_OriginalSpecializedSOPClassUID_0008_001B",SWIG_From_int(static_cast< int >(imebra::tagId_t::OriginalSpecializedSOPClassUID_0008_001B)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyDate_0008_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyDate_0008_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_SeriesDate_0008_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::SeriesDate_0008_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionDate_0008_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionDate_0008_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_ContentDate_0008_0023",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContentDate_0008_0023)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayDate_0008_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayDate_0008_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveDate_0008_0025",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveDate_0008_0025)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionDateTime_0008_002A",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionDateTime_0008_002A)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyTime_0008_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyTime_0008_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_SeriesTime_0008_0031",SWIG_From_int(static_cast< int >(imebra::tagId_t::SeriesTime_0008_0031)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionTime_0008_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionTime_0008_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_ContentTime_0008_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContentTime_0008_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayTime_0008_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayTime_0008_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveTime_0008_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveTime_0008_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_DataSetType_0008_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataSetType_0008_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_DataSetSubtype_0008_0041",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataSetSubtype_0008_0041)));
  SWIG_Python_SetConstant(d, "tagId_t_NuclearMedicineSeriesType_0008_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::NuclearMedicineSeriesType_0008_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_AccessionNumber_0008_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::AccessionNumber_0008_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_IssuerOfAccessionNumberSequence_0008_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssuerOfAccessionNumberSequence_0008_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_QueryRetrieveLevel_0008_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::QueryRetrieveLevel_0008_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_QueryRetrieveView_0008_0053",SWIG_From_int(static_cast< int >(imebra::tagId_t::QueryRetrieveView_0008_0053)));
  SWIG_Python_SetConstant(d, "tagId_t_RetrieveAETitle_0008_0054",SWIG_From_int(static_cast< int >(imebra::tagId_t::RetrieveAETitle_0008_0054)));
  SWIG_Python_SetConstant(d, "tagId_t_StationAETitle_0008_0055",SWIG_From_int(static_cast< int >(imebra::tagId_t::StationAETitle_0008_0055)));
  SWIG_Python_SetConstant(d, "tagId_t_InstanceAvailability_0008_0056",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstanceAvailability_0008_0056)));
  SWIG_Python_SetConstant(d, "tagId_t_FailedSOPInstanceUIDList_0008_0058",SWIG_From_int(static_cast< int >(imebra::tagId_t::FailedSOPInstanceUIDList_0008_0058)));
  SWIG_Python_SetConstant(d, "tagId_t_Modality_0008_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::Modality_0008_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_ModalitiesInStudy_0008_0061",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModalitiesInStudy_0008_0061)));
  SWIG_Python_SetConstant(d, "tagId_t_SOPClassesInStudy_0008_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::SOPClassesInStudy_0008_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicRegionsInStudyCodeSequence_0008_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicRegionsInStudyCodeSequence_0008_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_ConversionType_0008_0064",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConversionType_0008_0064)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationIntentType_0008_0068",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationIntentType_0008_0068)));
  SWIG_Python_SetConstant(d, "tagId_t_Manufacturer_0008_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::Manufacturer_0008_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_InstitutionName_0008_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstitutionName_0008_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_InstitutionAddress_0008_0081",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstitutionAddress_0008_0081)));
  SWIG_Python_SetConstant(d, "tagId_t_InstitutionCodeSequence_0008_0082",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstitutionCodeSequence_0008_0082)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferringPhysicianName_0008_0090",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferringPhysicianName_0008_0090)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferringPhysicianAddress_0008_0092",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferringPhysicianAddress_0008_0092)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferringPhysicianTelephoneNumbers_0008_0094",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferringPhysicianTelephoneNumbers_0008_0094)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferringPhysicianIdentificationSequence_0008_0096",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferringPhysicianIdentificationSequence_0008_0096)));
  SWIG_Python_SetConstant(d, "tagId_t_ConsultingPhysicianName_0008_009C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConsultingPhysicianName_0008_009C)));
  SWIG_Python_SetConstant(d, "tagId_t_ConsultingPhysicianIdentificationSequence_0008_009D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConsultingPhysicianIdentificationSequence_0008_009D)));
  SWIG_Python_SetConstant(d, "tagId_t_CodeValue_0008_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodeValue_0008_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_ExtendedCodeValue_0008_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExtendedCodeValue_0008_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeDesignator_0008_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeDesignator_0008_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeVersion_0008_0103",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeVersion_0008_0103)));
  SWIG_Python_SetConstant(d, "tagId_t_CodeMeaning_0008_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodeMeaning_0008_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_MappingResource_0008_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::MappingResource_0008_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_ContextGroupVersion_0008_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContextGroupVersion_0008_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_ContextGroupLocalVersion_0008_0107",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContextGroupLocalVersion_0008_0107)));
  SWIG_Python_SetConstant(d, "tagId_t_ExtendedCodeMeaning_0008_0108",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExtendedCodeMeaning_0008_0108)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeResourcesSequence_0008_0109",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeResourcesSequence_0008_0109)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeURLType_0008_010A",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeURLType_0008_010A)));
  SWIG_Python_SetConstant(d, "tagId_t_ContextGroupExtensionFlag_0008_010B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContextGroupExtensionFlag_0008_010B)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeUID_0008_010C",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeUID_0008_010C)));
  SWIG_Python_SetConstant(d, "tagId_t_ContextGroupExtensionCreatorUID_0008_010D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContextGroupExtensionCreatorUID_0008_010D)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeURL_0008_010E",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeURL_0008_010E)));
  SWIG_Python_SetConstant(d, "tagId_t_ContextIdentifier_0008_010F",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContextIdentifier_0008_010F)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeIdentificationSequence_0008_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeIdentificationSequence_0008_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeRegistry_0008_0112",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeRegistry_0008_0112)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeExternalID_0008_0114",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeExternalID_0008_0114)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeName_0008_0115",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeName_0008_0115)));
  SWIG_Python_SetConstant(d, "tagId_t_CodingSchemeResponsibleOrganization_0008_0116",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodingSchemeResponsibleOrganization_0008_0116)));
  SWIG_Python_SetConstant(d, "tagId_t_ContextUID_0008_0117",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContextUID_0008_0117)));
  SWIG_Python_SetConstant(d, "tagId_t_MappingResourceUID_0008_0118",SWIG_From_int(static_cast< int >(imebra::tagId_t::MappingResourceUID_0008_0118)));
  SWIG_Python_SetConstant(d, "tagId_t_LongCodeValue_0008_0119",SWIG_From_int(static_cast< int >(imebra::tagId_t::LongCodeValue_0008_0119)));
  SWIG_Python_SetConstant(d, "tagId_t_URNCodeValue_0008_0120",SWIG_From_int(static_cast< int >(imebra::tagId_t::URNCodeValue_0008_0120)));
  SWIG_Python_SetConstant(d, "tagId_t_EquivalentCodeSequence_0008_0121",SWIG_From_int(static_cast< int >(imebra::tagId_t::EquivalentCodeSequence_0008_0121)));
  SWIG_Python_SetConstant(d, "tagId_t_MappingResourceName_0008_0122",SWIG_From_int(static_cast< int >(imebra::tagId_t::MappingResourceName_0008_0122)));
  SWIG_Python_SetConstant(d, "tagId_t_ContextGroupIdentificationSequence_0008_0123",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContextGroupIdentificationSequence_0008_0123)));
  SWIG_Python_SetConstant(d, "tagId_t_MappingResourceIdentificationSequence_0008_0124",SWIG_From_int(static_cast< int >(imebra::tagId_t::MappingResourceIdentificationSequence_0008_0124)));
  SWIG_Python_SetConstant(d, "tagId_t_TimezoneOffsetFromUTC_0008_0201",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimezoneOffsetFromUTC_0008_0201)));
  SWIG_Python_SetConstant(d, "tagId_t_ResponsibleGroupCodeSequence_0008_0220",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResponsibleGroupCodeSequence_0008_0220)));
  SWIG_Python_SetConstant(d, "tagId_t_EquipmentModality_0008_0221",SWIG_From_int(static_cast< int >(imebra::tagId_t::EquipmentModality_0008_0221)));
  SWIG_Python_SetConstant(d, "tagId_t_ManufacturerRelatedModelGroup_0008_0222",SWIG_From_int(static_cast< int >(imebra::tagId_t::ManufacturerRelatedModelGroup_0008_0222)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateDataElementCharacteristicsSequence_0008_0300",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateDataElementCharacteristicsSequence_0008_0300)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateGroupReference_0008_0301",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateGroupReference_0008_0301)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateCreatorReference_0008_0302",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateCreatorReference_0008_0302)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockIdentifyingInformationStatus_0008_0303",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockIdentifyingInformationStatus_0008_0303)));
  SWIG_Python_SetConstant(d, "tagId_t_NonidentifyingPrivateElements_0008_0304",SWIG_From_int(static_cast< int >(imebra::tagId_t::NonidentifyingPrivateElements_0008_0304)));
  SWIG_Python_SetConstant(d, "tagId_t_DeidentificationActionSequence_0008_0305",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeidentificationActionSequence_0008_0305)));
  SWIG_Python_SetConstant(d, "tagId_t_IdentifyingPrivateElements_0008_0306",SWIG_From_int(static_cast< int >(imebra::tagId_t::IdentifyingPrivateElements_0008_0306)));
  SWIG_Python_SetConstant(d, "tagId_t_DeidentificationAction_0008_0307",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeidentificationAction_0008_0307)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateDataElement_0008_0308",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateDataElement_0008_0308)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateDataElementValueMultiplicity_0008_0309",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateDataElementValueMultiplicity_0008_0309)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateDataElementValueRepresentation_0008_030A",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateDataElementValueRepresentation_0008_030A)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateDataElementNumberOfItems_0008_030B",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateDataElementNumberOfItems_0008_030B)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateDataElementName_0008_030C",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateDataElementName_0008_030C)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateDataElementKeyword_0008_030D",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateDataElementKeyword_0008_030D)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateDataElementDescription_0008_030E",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateDataElementDescription_0008_030E)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateDataElementEncoding_0008_030F",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateDataElementEncoding_0008_030F)));
  SWIG_Python_SetConstant(d, "tagId_t_PrivateDataElementDefinitionSequence_0008_0310",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrivateDataElementDefinitionSequence_0008_0310)));
  SWIG_Python_SetConstant(d, "tagId_t_NetworkID_0008_1000",SWIG_From_int(static_cast< int >(imebra::tagId_t::NetworkID_0008_1000)));
  SWIG_Python_SetConstant(d, "tagId_t_StationName_0008_1010",SWIG_From_int(static_cast< int >(imebra::tagId_t::StationName_0008_1010)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyDescription_0008_1030",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyDescription_0008_1030)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureCodeSequence_0008_1032",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureCodeSequence_0008_1032)));
  SWIG_Python_SetConstant(d, "tagId_t_SeriesDescription_0008_103E",SWIG_From_int(static_cast< int >(imebra::tagId_t::SeriesDescription_0008_103E)));
  SWIG_Python_SetConstant(d, "tagId_t_SeriesDescriptionCodeSequence_0008_103F",SWIG_From_int(static_cast< int >(imebra::tagId_t::SeriesDescriptionCodeSequence_0008_103F)));
  SWIG_Python_SetConstant(d, "tagId_t_InstitutionalDepartmentName_0008_1040",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstitutionalDepartmentName_0008_1040)));
  SWIG_Python_SetConstant(d, "tagId_t_InstitutionalDepartmentTypeCodeSequence_0008_1041",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstitutionalDepartmentTypeCodeSequence_0008_1041)));
  SWIG_Python_SetConstant(d, "tagId_t_PhysiciansOfRecord_0008_1048",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhysiciansOfRecord_0008_1048)));
  SWIG_Python_SetConstant(d, "tagId_t_PhysiciansOfRecordIdentificationSequence_0008_1049",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhysiciansOfRecordIdentificationSequence_0008_1049)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformingPhysicianName_0008_1050",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformingPhysicianName_0008_1050)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformingPhysicianIdentificationSequence_0008_1052",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformingPhysicianIdentificationSequence_0008_1052)));
  SWIG_Python_SetConstant(d, "tagId_t_NameOfPhysiciansReadingStudy_0008_1060",SWIG_From_int(static_cast< int >(imebra::tagId_t::NameOfPhysiciansReadingStudy_0008_1060)));
  SWIG_Python_SetConstant(d, "tagId_t_PhysiciansReadingStudyIdentificationSequence_0008_1062",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhysiciansReadingStudyIdentificationSequence_0008_1062)));
  SWIG_Python_SetConstant(d, "tagId_t_OperatorsName_0008_1070",SWIG_From_int(static_cast< int >(imebra::tagId_t::OperatorsName_0008_1070)));
  SWIG_Python_SetConstant(d, "tagId_t_OperatorIdentificationSequence_0008_1072",SWIG_From_int(static_cast< int >(imebra::tagId_t::OperatorIdentificationSequence_0008_1072)));
  SWIG_Python_SetConstant(d, "tagId_t_AdmittingDiagnosesDescription_0008_1080",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdmittingDiagnosesDescription_0008_1080)));
  SWIG_Python_SetConstant(d, "tagId_t_AdmittingDiagnosesCodeSequence_0008_1084",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdmittingDiagnosesCodeSequence_0008_1084)));
  SWIG_Python_SetConstant(d, "tagId_t_ManufacturerModelName_0008_1090",SWIG_From_int(static_cast< int >(imebra::tagId_t::ManufacturerModelName_0008_1090)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedResultsSequence_0008_1100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedResultsSequence_0008_1100)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedStudySequence_0008_1110",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedStudySequence_0008_1110)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPerformedProcedureStepSequence_0008_1111",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPerformedProcedureStepSequence_0008_1111)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSeriesSequence_0008_1115",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSeriesSequence_0008_1115)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPatientSequence_0008_1120",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPatientSequence_0008_1120)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedVisitSequence_0008_1125",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedVisitSequence_0008_1125)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedOverlaySequence_0008_1130",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedOverlaySequence_0008_1130)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedStereometricInstanceSequence_0008_1134",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedStereometricInstanceSequence_0008_1134)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedWaveformSequence_0008_113A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedWaveformSequence_0008_113A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedImageSequence_0008_1140",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedImageSequence_0008_1140)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedCurveSequence_0008_1145",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedCurveSequence_0008_1145)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedInstanceSequence_0008_114A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedInstanceSequence_0008_114A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRealWorldValueMappingInstanceSequence_0008_114B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRealWorldValueMappingInstanceSequence_0008_114B)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSOPClassUID_0008_1150",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSOPClassUID_0008_1150)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSOPInstanceUID_0008_1155",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSOPInstanceUID_0008_1155)));
  SWIG_Python_SetConstant(d, "tagId_t_DefinitionSourceSequence_0008_1156",SWIG_From_int(static_cast< int >(imebra::tagId_t::DefinitionSourceSequence_0008_1156)));
  SWIG_Python_SetConstant(d, "tagId_t_SOPClassesSupported_0008_115A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SOPClassesSupported_0008_115A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFrameNumber_0008_1160",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFrameNumber_0008_1160)));
  SWIG_Python_SetConstant(d, "tagId_t_SimpleFrameList_0008_1161",SWIG_From_int(static_cast< int >(imebra::tagId_t::SimpleFrameList_0008_1161)));
  SWIG_Python_SetConstant(d, "tagId_t_CalculatedFrameList_0008_1162",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalculatedFrameList_0008_1162)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeRange_0008_1163",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeRange_0008_1163)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameExtractionSequence_0008_1164",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameExtractionSequence_0008_1164)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiFrameSourceSOPInstanceUID_0008_1167",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiFrameSourceSOPInstanceUID_0008_1167)));
  SWIG_Python_SetConstant(d, "tagId_t_RetrieveURL_0008_1190",SWIG_From_int(static_cast< int >(imebra::tagId_t::RetrieveURL_0008_1190)));
  SWIG_Python_SetConstant(d, "tagId_t_TransactionUID_0008_1195",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransactionUID_0008_1195)));
  SWIG_Python_SetConstant(d, "tagId_t_WarningReason_0008_1196",SWIG_From_int(static_cast< int >(imebra::tagId_t::WarningReason_0008_1196)));
  SWIG_Python_SetConstant(d, "tagId_t_FailureReason_0008_1197",SWIG_From_int(static_cast< int >(imebra::tagId_t::FailureReason_0008_1197)));
  SWIG_Python_SetConstant(d, "tagId_t_FailedSOPSequence_0008_1198",SWIG_From_int(static_cast< int >(imebra::tagId_t::FailedSOPSequence_0008_1198)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSOPSequence_0008_1199",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSOPSequence_0008_1199)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherFailuresSequence_0008_119A",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherFailuresSequence_0008_119A)));
  SWIG_Python_SetConstant(d, "tagId_t_StudiesContainingOtherReferencedInstancesSequence_0008_1200",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudiesContainingOtherReferencedInstancesSequence_0008_1200)));
  SWIG_Python_SetConstant(d, "tagId_t_RelatedSeriesSequence_0008_1250",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelatedSeriesSequence_0008_1250)));
  SWIG_Python_SetConstant(d, "tagId_t_DerivationDescription_0008_2111",SWIG_From_int(static_cast< int >(imebra::tagId_t::DerivationDescription_0008_2111)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceImageSequence_0008_2112",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceImageSequence_0008_2112)));
  SWIG_Python_SetConstant(d, "tagId_t_StageName_0008_2120",SWIG_From_int(static_cast< int >(imebra::tagId_t::StageName_0008_2120)));
  SWIG_Python_SetConstant(d, "tagId_t_StageNumber_0008_2122",SWIG_From_int(static_cast< int >(imebra::tagId_t::StageNumber_0008_2122)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfStages_0008_2124",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfStages_0008_2124)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewName_0008_2127",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewName_0008_2127)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewNumber_0008_2128",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewNumber_0008_2128)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfEventTimers_0008_2129",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfEventTimers_0008_2129)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfViewsInStage_0008_212A",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfViewsInStage_0008_212A)));
  SWIG_Python_SetConstant(d, "tagId_t_EventElapsedTimes_0008_2130",SWIG_From_int(static_cast< int >(imebra::tagId_t::EventElapsedTimes_0008_2130)));
  SWIG_Python_SetConstant(d, "tagId_t_EventTimerNames_0008_2132",SWIG_From_int(static_cast< int >(imebra::tagId_t::EventTimerNames_0008_2132)));
  SWIG_Python_SetConstant(d, "tagId_t_EventTimerSequence_0008_2133",SWIG_From_int(static_cast< int >(imebra::tagId_t::EventTimerSequence_0008_2133)));
  SWIG_Python_SetConstant(d, "tagId_t_EventTimeOffset_0008_2134",SWIG_From_int(static_cast< int >(imebra::tagId_t::EventTimeOffset_0008_2134)));
  SWIG_Python_SetConstant(d, "tagId_t_EventCodeSequence_0008_2135",SWIG_From_int(static_cast< int >(imebra::tagId_t::EventCodeSequence_0008_2135)));
  SWIG_Python_SetConstant(d, "tagId_t_StartTrim_0008_2142",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartTrim_0008_2142)));
  SWIG_Python_SetConstant(d, "tagId_t_StopTrim_0008_2143",SWIG_From_int(static_cast< int >(imebra::tagId_t::StopTrim_0008_2143)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedDisplayFrameRate_0008_2144",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedDisplayFrameRate_0008_2144)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerPosition_0008_2200",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerPosition_0008_2200)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerOrientation_0008_2204",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerOrientation_0008_2204)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicStructure_0008_2208",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicStructure_0008_2208)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicRegionSequence_0008_2218",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicRegionSequence_0008_2218)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicRegionModifierSequence_0008_2220",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicRegionModifierSequence_0008_2220)));
  SWIG_Python_SetConstant(d, "tagId_t_PrimaryAnatomicStructureSequence_0008_2228",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrimaryAnatomicStructureSequence_0008_2228)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicStructureSpaceOrRegionSequence_0008_2229",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicStructureSpaceOrRegionSequence_0008_2229)));
  SWIG_Python_SetConstant(d, "tagId_t_PrimaryAnatomicStructureModifierSequence_0008_2230",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrimaryAnatomicStructureModifierSequence_0008_2230)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerPositionSequence_0008_2240",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerPositionSequence_0008_2240)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerPositionModifierSequence_0008_2242",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerPositionModifierSequence_0008_2242)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerOrientationSequence_0008_2244",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerOrientationSequence_0008_2244)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerOrientationModifierSequence_0008_2246",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerOrientationModifierSequence_0008_2246)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicStructureSpaceOrRegionCodeSequenceTrial_0008_2251",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicStructureSpaceOrRegionCodeSequenceTrial_0008_2251)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicPortalOfEntranceCodeSequenceTrial_0008_2253",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicPortalOfEntranceCodeSequenceTrial_0008_2253)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicApproachDirectionCodeSequenceTrial_0008_2255",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicApproachDirectionCodeSequenceTrial_0008_2255)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicPerspectiveDescriptionTrial_0008_2256",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicPerspectiveDescriptionTrial_0008_2256)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicPerspectiveCodeSequenceTrial_0008_2257",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicPerspectiveCodeSequenceTrial_0008_2257)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicLocationOfExaminingInstrumentDescriptionTrial_0008_2258",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicLocationOfExaminingInstrumentDescriptionTrial_0008_2258)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicLocationOfExaminingInstrumentCodeSequenceTrial_0008_2259",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicLocationOfExaminingInstrumentCodeSequenceTrial_0008_2259)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial_0008_225A",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial_0008_225A)));
  SWIG_Python_SetConstant(d, "tagId_t_OnAxisBackgroundAnatomicStructureCodeSequenceTrial_0008_225C",SWIG_From_int(static_cast< int >(imebra::tagId_t::OnAxisBackgroundAnatomicStructureCodeSequenceTrial_0008_225C)));
  SWIG_Python_SetConstant(d, "tagId_t_AlternateRepresentationSequence_0008_3001",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlternateRepresentationSequence_0008_3001)));
  SWIG_Python_SetConstant(d, "tagId_t_IrradiationEventUID_0008_3010",SWIG_From_int(static_cast< int >(imebra::tagId_t::IrradiationEventUID_0008_3010)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceIrradiationEventSequence_0008_3011",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceIrradiationEventSequence_0008_3011)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalAdministrationEventUID_0008_3012",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalAdministrationEventUID_0008_3012)));
  SWIG_Python_SetConstant(d, "tagId_t_IdentifyingComments_0008_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::IdentifyingComments_0008_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameType_0008_9007",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameType_0008_9007)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedImageEvidenceSequence_0008_9092",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedImageEvidenceSequence_0008_9092)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRawDataSequence_0008_9121",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRawDataSequence_0008_9121)));
  SWIG_Python_SetConstant(d, "tagId_t_CreatorVersionUID_0008_9123",SWIG_From_int(static_cast< int >(imebra::tagId_t::CreatorVersionUID_0008_9123)));
  SWIG_Python_SetConstant(d, "tagId_t_DerivationImageSequence_0008_9124",SWIG_From_int(static_cast< int >(imebra::tagId_t::DerivationImageSequence_0008_9124)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceImageEvidenceSequence_0008_9154",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceImageEvidenceSequence_0008_9154)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelPresentation_0008_9205",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelPresentation_0008_9205)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumetricProperties_0008_9206",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumetricProperties_0008_9206)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeBasedCalculationTechnique_0008_9207",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeBasedCalculationTechnique_0008_9207)));
  SWIG_Python_SetConstant(d, "tagId_t_ComplexImageComponent_0008_9208",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComplexImageComponent_0008_9208)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionContrast_0008_9209",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionContrast_0008_9209)));
  SWIG_Python_SetConstant(d, "tagId_t_DerivationCodeSequence_0008_9215",SWIG_From_int(static_cast< int >(imebra::tagId_t::DerivationCodeSequence_0008_9215)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPresentationStateSequence_0008_9237",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPresentationStateSequence_0008_9237)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedOtherPlaneSequence_0008_9410",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedOtherPlaneSequence_0008_9410)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameDisplaySequence_0008_9458",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameDisplaySequence_0008_9458)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedDisplayFrameRateInFloat_0008_9459",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedDisplayFrameRateInFloat_0008_9459)));
  SWIG_Python_SetConstant(d, "tagId_t_SkipFrameRangeFlag_0008_9460",SWIG_From_int(static_cast< int >(imebra::tagId_t::SkipFrameRangeFlag_0008_9460)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientName_0010_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientName_0010_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientID_0010_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientID_0010_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_IssuerOfPatientID_0010_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssuerOfPatientID_0010_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_TypeOfPatientID_0010_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::TypeOfPatientID_0010_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_IssuerOfPatientIDQualifiersSequence_0010_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssuerOfPatientIDQualifiersSequence_0010_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_SourcePatientGroupIdentificationSequence_0010_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourcePatientGroupIdentificationSequence_0010_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_GroupOfPatientsIdentificationSequence_0010_0027",SWIG_From_int(static_cast< int >(imebra::tagId_t::GroupOfPatientsIdentificationSequence_0010_0027)));
  SWIG_Python_SetConstant(d, "tagId_t_SubjectRelativePositionInImage_0010_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::SubjectRelativePositionInImage_0010_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientBirthDate_0010_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientBirthDate_0010_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientBirthTime_0010_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientBirthTime_0010_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientBirthDateInAlternativeCalendar_0010_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientBirthDateInAlternativeCalendar_0010_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientDeathDateInAlternativeCalendar_0010_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientDeathDateInAlternativeCalendar_0010_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientAlternativeCalendar_0010_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientAlternativeCalendar_0010_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSex_0010_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSex_0010_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientInsurancePlanCodeSequence_0010_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientInsurancePlanCodeSequence_0010_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientPrimaryLanguageCodeSequence_0010_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientPrimaryLanguageCodeSequence_0010_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientPrimaryLanguageModifierCodeSequence_0010_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientPrimaryLanguageModifierCodeSequence_0010_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_QualityControlSubject_0010_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::QualityControlSubject_0010_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_QualityControlSubjectTypeCodeSequence_0010_0201",SWIG_From_int(static_cast< int >(imebra::tagId_t::QualityControlSubjectTypeCodeSequence_0010_0201)));
  SWIG_Python_SetConstant(d, "tagId_t_StrainDescription_0010_0212",SWIG_From_int(static_cast< int >(imebra::tagId_t::StrainDescription_0010_0212)));
  SWIG_Python_SetConstant(d, "tagId_t_StrainNomenclature_0010_0213",SWIG_From_int(static_cast< int >(imebra::tagId_t::StrainNomenclature_0010_0213)));
  SWIG_Python_SetConstant(d, "tagId_t_StrainStockNumber_0010_0214",SWIG_From_int(static_cast< int >(imebra::tagId_t::StrainStockNumber_0010_0214)));
  SWIG_Python_SetConstant(d, "tagId_t_StrainSourceRegistryCodeSequence_0010_0215",SWIG_From_int(static_cast< int >(imebra::tagId_t::StrainSourceRegistryCodeSequence_0010_0215)));
  SWIG_Python_SetConstant(d, "tagId_t_StrainStockSequence_0010_0216",SWIG_From_int(static_cast< int >(imebra::tagId_t::StrainStockSequence_0010_0216)));
  SWIG_Python_SetConstant(d, "tagId_t_StrainSource_0010_0217",SWIG_From_int(static_cast< int >(imebra::tagId_t::StrainSource_0010_0217)));
  SWIG_Python_SetConstant(d, "tagId_t_StrainAdditionalInformation_0010_0218",SWIG_From_int(static_cast< int >(imebra::tagId_t::StrainAdditionalInformation_0010_0218)));
  SWIG_Python_SetConstant(d, "tagId_t_StrainCodeSequence_0010_0219",SWIG_From_int(static_cast< int >(imebra::tagId_t::StrainCodeSequence_0010_0219)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneticModificationsSequence_0010_0221",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneticModificationsSequence_0010_0221)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneticModificationsDescription_0010_0222",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneticModificationsDescription_0010_0222)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneticModificationsNomenclature_0010_0223",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneticModificationsNomenclature_0010_0223)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneticModificationsCodeSequence_0010_0229",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneticModificationsCodeSequence_0010_0229)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherPatientIDs_0010_1000",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherPatientIDs_0010_1000)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherPatientNames_0010_1001",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherPatientNames_0010_1001)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherPatientIDsSequence_0010_1002",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherPatientIDsSequence_0010_1002)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientBirthName_0010_1005",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientBirthName_0010_1005)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientAge_0010_1010",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientAge_0010_1010)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSize_0010_1020",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSize_0010_1020)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSizeCodeSequence_0010_1021",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSizeCodeSequence_0010_1021)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientBodyMassIndex_0010_1022",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientBodyMassIndex_0010_1022)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredAPDimension_0010_1023",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredAPDimension_0010_1023)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredLateralDimension_0010_1024",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredLateralDimension_0010_1024)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientWeight_0010_1030",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientWeight_0010_1030)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientAddress_0010_1040",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientAddress_0010_1040)));
  SWIG_Python_SetConstant(d, "tagId_t_InsurancePlanIdentification_0010_1050",SWIG_From_int(static_cast< int >(imebra::tagId_t::InsurancePlanIdentification_0010_1050)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientMotherBirthName_0010_1060",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientMotherBirthName_0010_1060)));
  SWIG_Python_SetConstant(d, "tagId_t_MilitaryRank_0010_1080",SWIG_From_int(static_cast< int >(imebra::tagId_t::MilitaryRank_0010_1080)));
  SWIG_Python_SetConstant(d, "tagId_t_BranchOfService_0010_1081",SWIG_From_int(static_cast< int >(imebra::tagId_t::BranchOfService_0010_1081)));
  SWIG_Python_SetConstant(d, "tagId_t_MedicalRecordLocator_0010_1090",SWIG_From_int(static_cast< int >(imebra::tagId_t::MedicalRecordLocator_0010_1090)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPatientPhotoSequence_0010_1100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPatientPhotoSequence_0010_1100)));
  SWIG_Python_SetConstant(d, "tagId_t_MedicalAlerts_0010_2000",SWIG_From_int(static_cast< int >(imebra::tagId_t::MedicalAlerts_0010_2000)));
  SWIG_Python_SetConstant(d, "tagId_t_Allergies_0010_2110",SWIG_From_int(static_cast< int >(imebra::tagId_t::Allergies_0010_2110)));
  SWIG_Python_SetConstant(d, "tagId_t_CountryOfResidence_0010_2150",SWIG_From_int(static_cast< int >(imebra::tagId_t::CountryOfResidence_0010_2150)));
  SWIG_Python_SetConstant(d, "tagId_t_RegionOfResidence_0010_2152",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegionOfResidence_0010_2152)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientTelephoneNumbers_0010_2154",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientTelephoneNumbers_0010_2154)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientTelecomInformation_0010_2155",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientTelecomInformation_0010_2155)));
  SWIG_Python_SetConstant(d, "tagId_t_EthnicGroup_0010_2160",SWIG_From_int(static_cast< int >(imebra::tagId_t::EthnicGroup_0010_2160)));
  SWIG_Python_SetConstant(d, "tagId_t_Occupation_0010_2180",SWIG_From_int(static_cast< int >(imebra::tagId_t::Occupation_0010_2180)));
  SWIG_Python_SetConstant(d, "tagId_t_SmokingStatus_0010_21A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::SmokingStatus_0010_21A0)));
  SWIG_Python_SetConstant(d, "tagId_t_AdditionalPatientHistory_0010_21B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdditionalPatientHistory_0010_21B0)));
  SWIG_Python_SetConstant(d, "tagId_t_PregnancyStatus_0010_21C0",SWIG_From_int(static_cast< int >(imebra::tagId_t::PregnancyStatus_0010_21C0)));
  SWIG_Python_SetConstant(d, "tagId_t_LastMenstrualDate_0010_21D0",SWIG_From_int(static_cast< int >(imebra::tagId_t::LastMenstrualDate_0010_21D0)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientReligiousPreference_0010_21F0",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientReligiousPreference_0010_21F0)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSpeciesDescription_0010_2201",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSpeciesDescription_0010_2201)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSpeciesCodeSequence_0010_2202",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSpeciesCodeSequence_0010_2202)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSexNeutered_0010_2203",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSexNeutered_0010_2203)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicalOrientationType_0010_2210",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicalOrientationType_0010_2210)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientBreedDescription_0010_2292",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientBreedDescription_0010_2292)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientBreedCodeSequence_0010_2293",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientBreedCodeSequence_0010_2293)));
  SWIG_Python_SetConstant(d, "tagId_t_BreedRegistrationSequence_0010_2294",SWIG_From_int(static_cast< int >(imebra::tagId_t::BreedRegistrationSequence_0010_2294)));
  SWIG_Python_SetConstant(d, "tagId_t_BreedRegistrationNumber_0010_2295",SWIG_From_int(static_cast< int >(imebra::tagId_t::BreedRegistrationNumber_0010_2295)));
  SWIG_Python_SetConstant(d, "tagId_t_BreedRegistryCodeSequence_0010_2296",SWIG_From_int(static_cast< int >(imebra::tagId_t::BreedRegistryCodeSequence_0010_2296)));
  SWIG_Python_SetConstant(d, "tagId_t_ResponsiblePerson_0010_2297",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResponsiblePerson_0010_2297)));
  SWIG_Python_SetConstant(d, "tagId_t_ResponsiblePersonRole_0010_2298",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResponsiblePersonRole_0010_2298)));
  SWIG_Python_SetConstant(d, "tagId_t_ResponsibleOrganization_0010_2299",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResponsibleOrganization_0010_2299)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientComments_0010_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientComments_0010_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_ExaminedBodyThickness_0010_9431",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExaminedBodyThickness_0010_9431)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialSponsorName_0012_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialSponsorName_0012_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialProtocolID_0012_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialProtocolID_0012_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialProtocolName_0012_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialProtocolName_0012_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialSiteID_0012_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialSiteID_0012_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialSiteName_0012_0031",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialSiteName_0012_0031)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialSubjectID_0012_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialSubjectID_0012_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialSubjectReadingID_0012_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialSubjectReadingID_0012_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialTimePointID_0012_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialTimePointID_0012_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialTimePointDescription_0012_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialTimePointDescription_0012_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_LongitudinalTemporalOffsetFromEvent_0012_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::LongitudinalTemporalOffsetFromEvent_0012_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_LongitudinalTemporalEventType_0012_0053",SWIG_From_int(static_cast< int >(imebra::tagId_t::LongitudinalTemporalEventType_0012_0053)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialCoordinatingCenterName_0012_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialCoordinatingCenterName_0012_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientIdentityRemoved_0012_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientIdentityRemoved_0012_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_DeidentificationMethod_0012_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeidentificationMethod_0012_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_DeidentificationMethodCodeSequence_0012_0064",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeidentificationMethodCodeSequence_0012_0064)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialSeriesID_0012_0071",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialSeriesID_0012_0071)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialSeriesDescription_0012_0072",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialSeriesDescription_0012_0072)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialProtocolEthicsCommitteeName_0012_0081",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialProtocolEthicsCommitteeName_0012_0081)));
  SWIG_Python_SetConstant(d, "tagId_t_ClinicalTrialProtocolEthicsCommitteeApprovalNumber_0012_0082",SWIG_From_int(static_cast< int >(imebra::tagId_t::ClinicalTrialProtocolEthicsCommitteeApprovalNumber_0012_0082)));
  SWIG_Python_SetConstant(d, "tagId_t_ConsentForClinicalTrialUseSequence_0012_0083",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConsentForClinicalTrialUseSequence_0012_0083)));
  SWIG_Python_SetConstant(d, "tagId_t_DistributionType_0012_0084",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistributionType_0012_0084)));
  SWIG_Python_SetConstant(d, "tagId_t_ConsentForDistributionFlag_0012_0085",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConsentForDistributionFlag_0012_0085)));
  SWIG_Python_SetConstant(d, "tagId_t_EthicsCommitteeApprovalEffectivenessStartDate_0012_0086",SWIG_From_int(static_cast< int >(imebra::tagId_t::EthicsCommitteeApprovalEffectivenessStartDate_0012_0086)));
  SWIG_Python_SetConstant(d, "tagId_t_EthicsCommitteeApprovalEffectivenessEndDate_0012_0087",SWIG_From_int(static_cast< int >(imebra::tagId_t::EthicsCommitteeApprovalEffectivenessEndDate_0012_0087)));
  SWIG_Python_SetConstant(d, "tagId_t_CADFileFormat_0014_0023",SWIG_From_int(static_cast< int >(imebra::tagId_t::CADFileFormat_0014_0023)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentReferenceSystem_0014_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentReferenceSystem_0014_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentManufacturingProcedure_0014_0025",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentManufacturingProcedure_0014_0025)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentManufacturer_0014_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentManufacturer_0014_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialThickness_0014_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialThickness_0014_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialPipeDiameter_0014_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialPipeDiameter_0014_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialIsolationDiameter_0014_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialIsolationDiameter_0014_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialGrade_0014_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialGrade_0014_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialPropertiesDescription_0014_0044",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialPropertiesDescription_0014_0044)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialPropertiesFileFormat_0014_0045",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialPropertiesFileFormat_0014_0045)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialNotes_0014_0046",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialNotes_0014_0046)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentShape_0014_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentShape_0014_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_CurvatureType_0014_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurvatureType_0014_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_OuterDiameter_0014_0054",SWIG_From_int(static_cast< int >(imebra::tagId_t::OuterDiameter_0014_0054)));
  SWIG_Python_SetConstant(d, "tagId_t_InnerDiameter_0014_0056",SWIG_From_int(static_cast< int >(imebra::tagId_t::InnerDiameter_0014_0056)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentWelderIDs_0014_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentWelderIDs_0014_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryApprovalStatus_0014_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryApprovalStatus_0014_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryReviewDate_0014_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryReviewDate_0014_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryReviewTime_0014_0103",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryReviewTime_0014_0103)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryReviewerName_0014_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryReviewerName_0014_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_RepairID_0014_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::RepairID_0014_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_MultipleComponentApprovalSequence_0014_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultipleComponentApprovalSequence_0014_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherApprovalStatus_0014_0107",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherApprovalStatus_0014_0107)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherSecondaryApprovalStatus_0014_0108",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherSecondaryApprovalStatus_0014_0108)));
  SWIG_Python_SetConstant(d, "tagId_t_ActualEnvironmentalConditions_0014_1010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ActualEnvironmentalConditions_0014_1010)));
  SWIG_Python_SetConstant(d, "tagId_t_ExpiryDate_0014_1020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExpiryDate_0014_1020)));
  SWIG_Python_SetConstant(d, "tagId_t_EnvironmentalConditions_0014_1040",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnvironmentalConditions_0014_1040)));
  SWIG_Python_SetConstant(d, "tagId_t_EvaluatorSequence_0014_2002",SWIG_From_int(static_cast< int >(imebra::tagId_t::EvaluatorSequence_0014_2002)));
  SWIG_Python_SetConstant(d, "tagId_t_EvaluatorNumber_0014_2004",SWIG_From_int(static_cast< int >(imebra::tagId_t::EvaluatorNumber_0014_2004)));
  SWIG_Python_SetConstant(d, "tagId_t_EvaluatorName_0014_2006",SWIG_From_int(static_cast< int >(imebra::tagId_t::EvaluatorName_0014_2006)));
  SWIG_Python_SetConstant(d, "tagId_t_EvaluationAttempt_0014_2008",SWIG_From_int(static_cast< int >(imebra::tagId_t::EvaluationAttempt_0014_2008)));
  SWIG_Python_SetConstant(d, "tagId_t_IndicationSequence_0014_2012",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndicationSequence_0014_2012)));
  SWIG_Python_SetConstant(d, "tagId_t_IndicationNumber_0014_2014",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndicationNumber_0014_2014)));
  SWIG_Python_SetConstant(d, "tagId_t_IndicationLabel_0014_2016",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndicationLabel_0014_2016)));
  SWIG_Python_SetConstant(d, "tagId_t_IndicationDescription_0014_2018",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndicationDescription_0014_2018)));
  SWIG_Python_SetConstant(d, "tagId_t_IndicationType_0014_201A",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndicationType_0014_201A)));
  SWIG_Python_SetConstant(d, "tagId_t_IndicationDisposition_0014_201C",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndicationDisposition_0014_201C)));
  SWIG_Python_SetConstant(d, "tagId_t_IndicationROISequence_0014_201E",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndicationROISequence_0014_201E)));
  SWIG_Python_SetConstant(d, "tagId_t_IndicationPhysicalPropertySequence_0014_2030",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndicationPhysicalPropertySequence_0014_2030)));
  SWIG_Python_SetConstant(d, "tagId_t_PropertyLabel_0014_2032",SWIG_From_int(static_cast< int >(imebra::tagId_t::PropertyLabel_0014_2032)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemNumberOfAxes_0014_2202",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemNumberOfAxes_0014_2202)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemAxesSequence_0014_2204",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemAxesSequence_0014_2204)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemAxisDescription_0014_2206",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemAxisDescription_0014_2206)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemDataSetMapping_0014_2208",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemDataSetMapping_0014_2208)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemAxisNumber_0014_220A",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemAxisNumber_0014_220A)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemAxisType_0014_220C",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemAxisType_0014_220C)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemAxisUnits_0014_220E",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemAxisUnits_0014_220E)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemAxisValues_0014_2210",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemAxisValues_0014_2210)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemTransformSequence_0014_2220",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemTransformSequence_0014_2220)));
  SWIG_Python_SetConstant(d, "tagId_t_TransformDescription_0014_2222",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransformDescription_0014_2222)));
  SWIG_Python_SetConstant(d, "tagId_t_TransformNumberOfAxes_0014_2224",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransformNumberOfAxes_0014_2224)));
  SWIG_Python_SetConstant(d, "tagId_t_TransformOrderOfAxes_0014_2226",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransformOrderOfAxes_0014_2226)));
  SWIG_Python_SetConstant(d, "tagId_t_TransformedAxisUnits_0014_2228",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransformedAxisUnits_0014_2228)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemTransformRotationAndScaleMatrix_0014_222A",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemTransformRotationAndScaleMatrix_0014_222A)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemTransformTranslationMatrix_0014_222C",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemTransformTranslationMatrix_0014_222C)));
  SWIG_Python_SetConstant(d, "tagId_t_InternalDetectorFrameTime_0014_3011",SWIG_From_int(static_cast< int >(imebra::tagId_t::InternalDetectorFrameTime_0014_3011)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFramesIntegrated_0014_3012",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFramesIntegrated_0014_3012)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorTemperatureSequence_0014_3020",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorTemperatureSequence_0014_3020)));
  SWIG_Python_SetConstant(d, "tagId_t_SensorName_0014_3022",SWIG_From_int(static_cast< int >(imebra::tagId_t::SensorName_0014_3022)));
  SWIG_Python_SetConstant(d, "tagId_t_HorizontalOffsetOfSensor_0014_3024",SWIG_From_int(static_cast< int >(imebra::tagId_t::HorizontalOffsetOfSensor_0014_3024)));
  SWIG_Python_SetConstant(d, "tagId_t_VerticalOffsetOfSensor_0014_3026",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerticalOffsetOfSensor_0014_3026)));
  SWIG_Python_SetConstant(d, "tagId_t_SensorTemperature_0014_3028",SWIG_From_int(static_cast< int >(imebra::tagId_t::SensorTemperature_0014_3028)));
  SWIG_Python_SetConstant(d, "tagId_t_DarkCurrentSequence_0014_3040",SWIG_From_int(static_cast< int >(imebra::tagId_t::DarkCurrentSequence_0014_3040)));
  SWIG_Python_SetConstant(d, "tagId_t_DarkCurrentCounts_0014_3050",SWIG_From_int(static_cast< int >(imebra::tagId_t::DarkCurrentCounts_0014_3050)));
  SWIG_Python_SetConstant(d, "tagId_t_GainCorrectionReferenceSequence_0014_3060",SWIG_From_int(static_cast< int >(imebra::tagId_t::GainCorrectionReferenceSequence_0014_3060)));
  SWIG_Python_SetConstant(d, "tagId_t_AirCounts_0014_3070",SWIG_From_int(static_cast< int >(imebra::tagId_t::AirCounts_0014_3070)));
  SWIG_Python_SetConstant(d, "tagId_t_KVUsedInGainCalibration_0014_3071",SWIG_From_int(static_cast< int >(imebra::tagId_t::KVUsedInGainCalibration_0014_3071)));
  SWIG_Python_SetConstant(d, "tagId_t_MAUsedInGainCalibration_0014_3072",SWIG_From_int(static_cast< int >(imebra::tagId_t::MAUsedInGainCalibration_0014_3072)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFramesUsedForIntegration_0014_3073",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFramesUsedForIntegration_0014_3073)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterMaterialUsedInGainCalibration_0014_3074",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterMaterialUsedInGainCalibration_0014_3074)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterThicknessUsedInGainCalibration_0014_3075",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterThicknessUsedInGainCalibration_0014_3075)));
  SWIG_Python_SetConstant(d, "tagId_t_DateOfGainCalibration_0014_3076",SWIG_From_int(static_cast< int >(imebra::tagId_t::DateOfGainCalibration_0014_3076)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeOfGainCalibration_0014_3077",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeOfGainCalibration_0014_3077)));
  SWIG_Python_SetConstant(d, "tagId_t_BadPixelImage_0014_3080",SWIG_From_int(static_cast< int >(imebra::tagId_t::BadPixelImage_0014_3080)));
  SWIG_Python_SetConstant(d, "tagId_t_CalibrationNotes_0014_3099",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalibrationNotes_0014_3099)));
  SWIG_Python_SetConstant(d, "tagId_t_PulserEquipmentSequence_0014_4002",SWIG_From_int(static_cast< int >(imebra::tagId_t::PulserEquipmentSequence_0014_4002)));
  SWIG_Python_SetConstant(d, "tagId_t_PulserType_0014_4004",SWIG_From_int(static_cast< int >(imebra::tagId_t::PulserType_0014_4004)));
  SWIG_Python_SetConstant(d, "tagId_t_PulserNotes_0014_4006",SWIG_From_int(static_cast< int >(imebra::tagId_t::PulserNotes_0014_4006)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceiverEquipmentSequence_0014_4008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceiverEquipmentSequence_0014_4008)));
  SWIG_Python_SetConstant(d, "tagId_t_AmplifierType_0014_400A",SWIG_From_int(static_cast< int >(imebra::tagId_t::AmplifierType_0014_400A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceiverNotes_0014_400C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceiverNotes_0014_400C)));
  SWIG_Python_SetConstant(d, "tagId_t_PreAmplifierEquipmentSequence_0014_400E",SWIG_From_int(static_cast< int >(imebra::tagId_t::PreAmplifierEquipmentSequence_0014_400E)));
  SWIG_Python_SetConstant(d, "tagId_t_PreAmplifierNotes_0014_400F",SWIG_From_int(static_cast< int >(imebra::tagId_t::PreAmplifierNotes_0014_400F)));
  SWIG_Python_SetConstant(d, "tagId_t_TransmitTransducerSequence_0014_4010",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransmitTransducerSequence_0014_4010)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceiveTransducerSequence_0014_4011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceiveTransducerSequence_0014_4011)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfElements_0014_4012",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfElements_0014_4012)));
  SWIG_Python_SetConstant(d, "tagId_t_ElementShape_0014_4013",SWIG_From_int(static_cast< int >(imebra::tagId_t::ElementShape_0014_4013)));
  SWIG_Python_SetConstant(d, "tagId_t_ElementDimensionA_0014_4014",SWIG_From_int(static_cast< int >(imebra::tagId_t::ElementDimensionA_0014_4014)));
  SWIG_Python_SetConstant(d, "tagId_t_ElementDimensionB_0014_4015",SWIG_From_int(static_cast< int >(imebra::tagId_t::ElementDimensionB_0014_4015)));
  SWIG_Python_SetConstant(d, "tagId_t_ElementPitchA_0014_4016",SWIG_From_int(static_cast< int >(imebra::tagId_t::ElementPitchA_0014_4016)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredBeamDimensionA_0014_4017",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredBeamDimensionA_0014_4017)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredBeamDimensionB_0014_4018",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredBeamDimensionB_0014_4018)));
  SWIG_Python_SetConstant(d, "tagId_t_LocationOfMeasuredBeamDiameter_0014_4019",SWIG_From_int(static_cast< int >(imebra::tagId_t::LocationOfMeasuredBeamDiameter_0014_4019)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalFrequency_0014_401A",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalFrequency_0014_401A)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredCenterFrequency_0014_401B",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredCenterFrequency_0014_401B)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredBandwidth_0014_401C",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredBandwidth_0014_401C)));
  SWIG_Python_SetConstant(d, "tagId_t_ElementPitchB_0014_401D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ElementPitchB_0014_401D)));
  SWIG_Python_SetConstant(d, "tagId_t_PulserSettingsSequence_0014_4020",SWIG_From_int(static_cast< int >(imebra::tagId_t::PulserSettingsSequence_0014_4020)));
  SWIG_Python_SetConstant(d, "tagId_t_PulseWidth_0014_4022",SWIG_From_int(static_cast< int >(imebra::tagId_t::PulseWidth_0014_4022)));
  SWIG_Python_SetConstant(d, "tagId_t_ExcitationFrequency_0014_4024",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExcitationFrequency_0014_4024)));
  SWIG_Python_SetConstant(d, "tagId_t_ModulationType_0014_4026",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModulationType_0014_4026)));
  SWIG_Python_SetConstant(d, "tagId_t_Damping_0014_4028",SWIG_From_int(static_cast< int >(imebra::tagId_t::Damping_0014_4028)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceiverSettingsSequence_0014_4030",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceiverSettingsSequence_0014_4030)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquiredSoundpathLength_0014_4031",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquiredSoundpathLength_0014_4031)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionCompressionType_0014_4032",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionCompressionType_0014_4032)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionSampleSize_0014_4033",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionSampleSize_0014_4033)));
  SWIG_Python_SetConstant(d, "tagId_t_RectifierSmoothing_0014_4034",SWIG_From_int(static_cast< int >(imebra::tagId_t::RectifierSmoothing_0014_4034)));
  SWIG_Python_SetConstant(d, "tagId_t_DACSequence_0014_4035",SWIG_From_int(static_cast< int >(imebra::tagId_t::DACSequence_0014_4035)));
  SWIG_Python_SetConstant(d, "tagId_t_DACType_0014_4036",SWIG_From_int(static_cast< int >(imebra::tagId_t::DACType_0014_4036)));
  SWIG_Python_SetConstant(d, "tagId_t_DACGainPoints_0014_4038",SWIG_From_int(static_cast< int >(imebra::tagId_t::DACGainPoints_0014_4038)));
  SWIG_Python_SetConstant(d, "tagId_t_DACTimePoints_0014_403A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DACTimePoints_0014_403A)));
  SWIG_Python_SetConstant(d, "tagId_t_DACAmplitude_0014_403C",SWIG_From_int(static_cast< int >(imebra::tagId_t::DACAmplitude_0014_403C)));
  SWIG_Python_SetConstant(d, "tagId_t_PreAmplifierSettingsSequence_0014_4040",SWIG_From_int(static_cast< int >(imebra::tagId_t::PreAmplifierSettingsSequence_0014_4040)));
  SWIG_Python_SetConstant(d, "tagId_t_TransmitTransducerSettingsSequence_0014_4050",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransmitTransducerSettingsSequence_0014_4050)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceiveTransducerSettingsSequence_0014_4051",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceiveTransducerSettingsSequence_0014_4051)));
  SWIG_Python_SetConstant(d, "tagId_t_IncidentAngle_0014_4052",SWIG_From_int(static_cast< int >(imebra::tagId_t::IncidentAngle_0014_4052)));
  SWIG_Python_SetConstant(d, "tagId_t_CouplingTechnique_0014_4054",SWIG_From_int(static_cast< int >(imebra::tagId_t::CouplingTechnique_0014_4054)));
  SWIG_Python_SetConstant(d, "tagId_t_CouplingMedium_0014_4056",SWIG_From_int(static_cast< int >(imebra::tagId_t::CouplingMedium_0014_4056)));
  SWIG_Python_SetConstant(d, "tagId_t_CouplingVelocity_0014_4057",SWIG_From_int(static_cast< int >(imebra::tagId_t::CouplingVelocity_0014_4057)));
  SWIG_Python_SetConstant(d, "tagId_t_ProbeCenterLocationX_0014_4058",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProbeCenterLocationX_0014_4058)));
  SWIG_Python_SetConstant(d, "tagId_t_ProbeCenterLocationZ_0014_4059",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProbeCenterLocationZ_0014_4059)));
  SWIG_Python_SetConstant(d, "tagId_t_SoundPathLength_0014_405A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SoundPathLength_0014_405A)));
  SWIG_Python_SetConstant(d, "tagId_t_DelayLawIdentifier_0014_405C",SWIG_From_int(static_cast< int >(imebra::tagId_t::DelayLawIdentifier_0014_405C)));
  SWIG_Python_SetConstant(d, "tagId_t_GateSettingsSequence_0014_4060",SWIG_From_int(static_cast< int >(imebra::tagId_t::GateSettingsSequence_0014_4060)));
  SWIG_Python_SetConstant(d, "tagId_t_GateThreshold_0014_4062",SWIG_From_int(static_cast< int >(imebra::tagId_t::GateThreshold_0014_4062)));
  SWIG_Python_SetConstant(d, "tagId_t_VelocityOfSound_0014_4064",SWIG_From_int(static_cast< int >(imebra::tagId_t::VelocityOfSound_0014_4064)));
  SWIG_Python_SetConstant(d, "tagId_t_CalibrationSettingsSequence_0014_4070",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalibrationSettingsSequence_0014_4070)));
  SWIG_Python_SetConstant(d, "tagId_t_CalibrationProcedure_0014_4072",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalibrationProcedure_0014_4072)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureVersion_0014_4074",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureVersion_0014_4074)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureCreationDate_0014_4076",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureCreationDate_0014_4076)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureExpirationDate_0014_4078",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureExpirationDate_0014_4078)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureLastModifiedDate_0014_407A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureLastModifiedDate_0014_407A)));
  SWIG_Python_SetConstant(d, "tagId_t_CalibrationTime_0014_407C",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalibrationTime_0014_407C)));
  SWIG_Python_SetConstant(d, "tagId_t_CalibrationDate_0014_407E",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalibrationDate_0014_407E)));
  SWIG_Python_SetConstant(d, "tagId_t_ProbeDriveEquipmentSequence_0014_4080",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProbeDriveEquipmentSequence_0014_4080)));
  SWIG_Python_SetConstant(d, "tagId_t_DriveType_0014_4081",SWIG_From_int(static_cast< int >(imebra::tagId_t::DriveType_0014_4081)));
  SWIG_Python_SetConstant(d, "tagId_t_ProbeDriveNotes_0014_4082",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProbeDriveNotes_0014_4082)));
  SWIG_Python_SetConstant(d, "tagId_t_DriveProbeSequence_0014_4083",SWIG_From_int(static_cast< int >(imebra::tagId_t::DriveProbeSequence_0014_4083)));
  SWIG_Python_SetConstant(d, "tagId_t_ProbeInductance_0014_4084",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProbeInductance_0014_4084)));
  SWIG_Python_SetConstant(d, "tagId_t_ProbeResistance_0014_4085",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProbeResistance_0014_4085)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceiveProbeSequence_0014_4086",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceiveProbeSequence_0014_4086)));
  SWIG_Python_SetConstant(d, "tagId_t_ProbeDriveSettingsSequence_0014_4087",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProbeDriveSettingsSequence_0014_4087)));
  SWIG_Python_SetConstant(d, "tagId_t_BridgeResistors_0014_4088",SWIG_From_int(static_cast< int >(imebra::tagId_t::BridgeResistors_0014_4088)));
  SWIG_Python_SetConstant(d, "tagId_t_ProbeOrientationAngle_0014_4089",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProbeOrientationAngle_0014_4089)));
  SWIG_Python_SetConstant(d, "tagId_t_UserSelectedGainY_0014_408B",SWIG_From_int(static_cast< int >(imebra::tagId_t::UserSelectedGainY_0014_408B)));
  SWIG_Python_SetConstant(d, "tagId_t_UserSelectedPhase_0014_408C",SWIG_From_int(static_cast< int >(imebra::tagId_t::UserSelectedPhase_0014_408C)));
  SWIG_Python_SetConstant(d, "tagId_t_UserSelectedOffsetX_0014_408D",SWIG_From_int(static_cast< int >(imebra::tagId_t::UserSelectedOffsetX_0014_408D)));
  SWIG_Python_SetConstant(d, "tagId_t_UserSelectedOffsetY_0014_408E",SWIG_From_int(static_cast< int >(imebra::tagId_t::UserSelectedOffsetY_0014_408E)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelSettingsSequence_0014_4091",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelSettingsSequence_0014_4091)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelThreshold_0014_4092",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelThreshold_0014_4092)));
  SWIG_Python_SetConstant(d, "tagId_t_ScannerSettingsSequence_0014_409A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScannerSettingsSequence_0014_409A)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanProcedure_0014_409B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanProcedure_0014_409B)));
  SWIG_Python_SetConstant(d, "tagId_t_TranslationRateX_0014_409C",SWIG_From_int(static_cast< int >(imebra::tagId_t::TranslationRateX_0014_409C)));
  SWIG_Python_SetConstant(d, "tagId_t_TranslationRateY_0014_409D",SWIG_From_int(static_cast< int >(imebra::tagId_t::TranslationRateY_0014_409D)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelOverlap_0014_409F",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelOverlap_0014_409F)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageQualityIndicatorType_0014_40A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageQualityIndicatorType_0014_40A0)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageQualityIndicatorMaterial_0014_40A1",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageQualityIndicatorMaterial_0014_40A1)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageQualityIndicatorSize_0014_40A2",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageQualityIndicatorSize_0014_40A2)));
  SWIG_Python_SetConstant(d, "tagId_t_LINACEnergy_0014_5002",SWIG_From_int(static_cast< int >(imebra::tagId_t::LINACEnergy_0014_5002)));
  SWIG_Python_SetConstant(d, "tagId_t_LINACOutput_0014_5004",SWIG_From_int(static_cast< int >(imebra::tagId_t::LINACOutput_0014_5004)));
  SWIG_Python_SetConstant(d, "tagId_t_ActiveAperture_0014_5100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ActiveAperture_0014_5100)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalAperture_0014_5101",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalAperture_0014_5101)));
  SWIG_Python_SetConstant(d, "tagId_t_ApertureElevation_0014_5102",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApertureElevation_0014_5102)));
  SWIG_Python_SetConstant(d, "tagId_t_MainLobeAngle_0014_5103",SWIG_From_int(static_cast< int >(imebra::tagId_t::MainLobeAngle_0014_5103)));
  SWIG_Python_SetConstant(d, "tagId_t_MainRoofAngle_0014_5104",SWIG_From_int(static_cast< int >(imebra::tagId_t::MainRoofAngle_0014_5104)));
  SWIG_Python_SetConstant(d, "tagId_t_ConnectorType_0014_5105",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConnectorType_0014_5105)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeModelNumber_0014_5106",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeModelNumber_0014_5106)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeAngleFloat_0014_5107",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeAngleFloat_0014_5107)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeRoofAngle_0014_5108",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeRoofAngle_0014_5108)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeElement1Position_0014_5109",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeElement1Position_0014_5109)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeMaterialVelocity_0014_510A",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeMaterialVelocity_0014_510A)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeMaterial_0014_510B",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeMaterial_0014_510B)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeOffsetZ_0014_510C",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeOffsetZ_0014_510C)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeOriginOffsetX_0014_510D",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeOriginOffsetX_0014_510D)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeTimeDelay_0014_510E",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeTimeDelay_0014_510E)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeName_0014_510F",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeName_0014_510F)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeManufacturerName_0014_5110",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeManufacturerName_0014_5110)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeDescription_0014_5111",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeDescription_0014_5111)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalBeamAngle_0014_5112",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalBeamAngle_0014_5112)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeOffsetX_0014_5113",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeOffsetX_0014_5113)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeOffsetY_0014_5114",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeOffsetY_0014_5114)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeTotalLength_0014_5115",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeTotalLength_0014_5115)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeInContactLength_0014_5116",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeInContactLength_0014_5116)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeFrontGap_0014_5117",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeFrontGap_0014_5117)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeTotalHeight_0014_5118",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeTotalHeight_0014_5118)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeFrontHeight_0014_5119",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeFrontHeight_0014_5119)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeRearHeight_0014_511A",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeRearHeight_0014_511A)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeTotalWidth_0014_511B",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeTotalWidth_0014_511B)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeInContactWidth_0014_511C",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeInContactWidth_0014_511C)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeChamferHeight_0014_511D",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeChamferHeight_0014_511D)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeCurve_0014_511E",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeCurve_0014_511E)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiusAlongWedge_0014_511F",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiusAlongWedge_0014_511F)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusAgent_0018_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusAgent_0018_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusAgentSequence_0018_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusAgentSequence_0018_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusT1Relaxivity_0018_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusT1Relaxivity_0018_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusAdministrationRouteSequence_0018_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusAdministrationRouteSequence_0018_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_BodyPartExamined_0018_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::BodyPartExamined_0018_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanningSequence_0018_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanningSequence_0018_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_SequenceVariant_0018_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::SequenceVariant_0018_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanOptions_0018_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanOptions_0018_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_MRAcquisitionType_0018_0023",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRAcquisitionType_0018_0023)));
  SWIG_Python_SetConstant(d, "tagId_t_SequenceName_0018_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::SequenceName_0018_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_AngioFlag_0018_0025",SWIG_From_int(static_cast< int >(imebra::tagId_t::AngioFlag_0018_0025)));
  SWIG_Python_SetConstant(d, "tagId_t_InterventionDrugInformationSequence_0018_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterventionDrugInformationSequence_0018_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_InterventionDrugStopTime_0018_0027",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterventionDrugStopTime_0018_0027)));
  SWIG_Python_SetConstant(d, "tagId_t_InterventionDrugDose_0018_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterventionDrugDose_0018_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_InterventionDrugCodeSequence_0018_0029",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterventionDrugCodeSequence_0018_0029)));
  SWIG_Python_SetConstant(d, "tagId_t_AdditionalDrugSequence_0018_002A",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdditionalDrugSequence_0018_002A)));
  SWIG_Python_SetConstant(d, "tagId_t_Radionuclide_0018_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::Radionuclide_0018_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_Radiopharmaceutical_0018_0031",SWIG_From_int(static_cast< int >(imebra::tagId_t::Radiopharmaceutical_0018_0031)));
  SWIG_Python_SetConstant(d, "tagId_t_EnergyWindowCenterline_0018_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnergyWindowCenterline_0018_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_EnergyWindowTotalWidth_0018_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnergyWindowTotalWidth_0018_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_InterventionDrugName_0018_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterventionDrugName_0018_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_InterventionDrugStartTime_0018_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterventionDrugStartTime_0018_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_InterventionSequence_0018_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterventionSequence_0018_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_TherapyType_0018_0037",SWIG_From_int(static_cast< int >(imebra::tagId_t::TherapyType_0018_0037)));
  SWIG_Python_SetConstant(d, "tagId_t_InterventionStatus_0018_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterventionStatus_0018_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_TherapyDescription_0018_0039",SWIG_From_int(static_cast< int >(imebra::tagId_t::TherapyDescription_0018_0039)));
  SWIG_Python_SetConstant(d, "tagId_t_InterventionDescription_0018_003A",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterventionDescription_0018_003A)));
  SWIG_Python_SetConstant(d, "tagId_t_CineRate_0018_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::CineRate_0018_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_InitialCineRunState_0018_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::InitialCineRunState_0018_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_SliceThickness_0018_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::SliceThickness_0018_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_KVP_0018_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::KVP_0018_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_CountsAccumulated_0018_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::CountsAccumulated_0018_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionTerminationCondition_0018_0071",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionTerminationCondition_0018_0071)));
  SWIG_Python_SetConstant(d, "tagId_t_EffectiveDuration_0018_0072",SWIG_From_int(static_cast< int >(imebra::tagId_t::EffectiveDuration_0018_0072)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionStartCondition_0018_0073",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionStartCondition_0018_0073)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionStartConditionData_0018_0074",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionStartConditionData_0018_0074)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionTerminationConditionData_0018_0075",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionTerminationConditionData_0018_0075)));
  SWIG_Python_SetConstant(d, "tagId_t_RepetitionTime_0018_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::RepetitionTime_0018_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_EchoTime_0018_0081",SWIG_From_int(static_cast< int >(imebra::tagId_t::EchoTime_0018_0081)));
  SWIG_Python_SetConstant(d, "tagId_t_InversionTime_0018_0082",SWIG_From_int(static_cast< int >(imebra::tagId_t::InversionTime_0018_0082)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfAverages_0018_0083",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfAverages_0018_0083)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagingFrequency_0018_0084",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagingFrequency_0018_0084)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagedNucleus_0018_0085",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagedNucleus_0018_0085)));
  SWIG_Python_SetConstant(d, "tagId_t_EchoNumbers_0018_0086",SWIG_From_int(static_cast< int >(imebra::tagId_t::EchoNumbers_0018_0086)));
  SWIG_Python_SetConstant(d, "tagId_t_MagneticFieldStrength_0018_0087",SWIG_From_int(static_cast< int >(imebra::tagId_t::MagneticFieldStrength_0018_0087)));
  SWIG_Python_SetConstant(d, "tagId_t_SpacingBetweenSlices_0018_0088",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpacingBetweenSlices_0018_0088)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfPhaseEncodingSteps_0018_0089",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfPhaseEncodingSteps_0018_0089)));
  SWIG_Python_SetConstant(d, "tagId_t_DataCollectionDiameter_0018_0090",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataCollectionDiameter_0018_0090)));
  SWIG_Python_SetConstant(d, "tagId_t_EchoTrainLength_0018_0091",SWIG_From_int(static_cast< int >(imebra::tagId_t::EchoTrainLength_0018_0091)));
  SWIG_Python_SetConstant(d, "tagId_t_PercentSampling_0018_0093",SWIG_From_int(static_cast< int >(imebra::tagId_t::PercentSampling_0018_0093)));
  SWIG_Python_SetConstant(d, "tagId_t_PercentPhaseFieldOfView_0018_0094",SWIG_From_int(static_cast< int >(imebra::tagId_t::PercentPhaseFieldOfView_0018_0094)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelBandwidth_0018_0095",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelBandwidth_0018_0095)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceSerialNumber_0018_1000",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceSerialNumber_0018_1000)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceUID_0018_1002",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceUID_0018_1002)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceID_0018_1003",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceID_0018_1003)));
  SWIG_Python_SetConstant(d, "tagId_t_PlateID_0018_1004",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlateID_0018_1004)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneratorID_0018_1005",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneratorID_0018_1005)));
  SWIG_Python_SetConstant(d, "tagId_t_GridID_0018_1006",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridID_0018_1006)));
  SWIG_Python_SetConstant(d, "tagId_t_CassetteID_0018_1007",SWIG_From_int(static_cast< int >(imebra::tagId_t::CassetteID_0018_1007)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryID_0018_1008",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryID_0018_1008)));
  SWIG_Python_SetConstant(d, "tagId_t_UniqueDeviceIdentifier_0018_1009",SWIG_From_int(static_cast< int >(imebra::tagId_t::UniqueDeviceIdentifier_0018_1009)));
  SWIG_Python_SetConstant(d, "tagId_t_UDISequence_0018_100A",SWIG_From_int(static_cast< int >(imebra::tagId_t::UDISequence_0018_100A)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryCaptureDeviceID_0018_1010",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryCaptureDeviceID_0018_1010)));
  SWIG_Python_SetConstant(d, "tagId_t_HardcopyCreationDeviceID_0018_1011",SWIG_From_int(static_cast< int >(imebra::tagId_t::HardcopyCreationDeviceID_0018_1011)));
  SWIG_Python_SetConstant(d, "tagId_t_DateOfSecondaryCapture_0018_1012",SWIG_From_int(static_cast< int >(imebra::tagId_t::DateOfSecondaryCapture_0018_1012)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeOfSecondaryCapture_0018_1014",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeOfSecondaryCapture_0018_1014)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryCaptureDeviceManufacturer_0018_1016",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryCaptureDeviceManufacturer_0018_1016)));
  SWIG_Python_SetConstant(d, "tagId_t_HardcopyDeviceManufacturer_0018_1017",SWIG_From_int(static_cast< int >(imebra::tagId_t::HardcopyDeviceManufacturer_0018_1017)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryCaptureDeviceManufacturerModelName_0018_1018",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryCaptureDeviceManufacturerModelName_0018_1018)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryCaptureDeviceSoftwareVersions_0018_1019",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryCaptureDeviceSoftwareVersions_0018_1019)));
  SWIG_Python_SetConstant(d, "tagId_t_HardcopyDeviceSoftwareVersion_0018_101A",SWIG_From_int(static_cast< int >(imebra::tagId_t::HardcopyDeviceSoftwareVersion_0018_101A)));
  SWIG_Python_SetConstant(d, "tagId_t_HardcopyDeviceManufacturerModelName_0018_101B",SWIG_From_int(static_cast< int >(imebra::tagId_t::HardcopyDeviceManufacturerModelName_0018_101B)));
  SWIG_Python_SetConstant(d, "tagId_t_SoftwareVersions_0018_1020",SWIG_From_int(static_cast< int >(imebra::tagId_t::SoftwareVersions_0018_1020)));
  SWIG_Python_SetConstant(d, "tagId_t_VideoImageFormatAcquired_0018_1022",SWIG_From_int(static_cast< int >(imebra::tagId_t::VideoImageFormatAcquired_0018_1022)));
  SWIG_Python_SetConstant(d, "tagId_t_DigitalImageFormatAcquired_0018_1023",SWIG_From_int(static_cast< int >(imebra::tagId_t::DigitalImageFormatAcquired_0018_1023)));
  SWIG_Python_SetConstant(d, "tagId_t_ProtocolName_0018_1030",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProtocolName_0018_1030)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusRoute_0018_1040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusRoute_0018_1040)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusVolume_0018_1041",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusVolume_0018_1041)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusStartTime_0018_1042",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusStartTime_0018_1042)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusStopTime_0018_1043",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusStopTime_0018_1043)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusTotalDose_0018_1044",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusTotalDose_0018_1044)));
  SWIG_Python_SetConstant(d, "tagId_t_SyringeCounts_0018_1045",SWIG_From_int(static_cast< int >(imebra::tagId_t::SyringeCounts_0018_1045)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastFlowRate_0018_1046",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastFlowRate_0018_1046)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastFlowDuration_0018_1047",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastFlowDuration_0018_1047)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusIngredient_0018_1048",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusIngredient_0018_1048)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusIngredientConcentration_0018_1049",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusIngredientConcentration_0018_1049)));
  SWIG_Python_SetConstant(d, "tagId_t_SpatialResolution_0018_1050",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpatialResolution_0018_1050)));
  SWIG_Python_SetConstant(d, "tagId_t_TriggerTime_0018_1060",SWIG_From_int(static_cast< int >(imebra::tagId_t::TriggerTime_0018_1060)));
  SWIG_Python_SetConstant(d, "tagId_t_TriggerSourceOrType_0018_1061",SWIG_From_int(static_cast< int >(imebra::tagId_t::TriggerSourceOrType_0018_1061)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalInterval_0018_1062",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalInterval_0018_1062)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameTime_0018_1063",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameTime_0018_1063)));
  SWIG_Python_SetConstant(d, "tagId_t_CardiacFramingType_0018_1064",SWIG_From_int(static_cast< int >(imebra::tagId_t::CardiacFramingType_0018_1064)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameTimeVector_0018_1065",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameTimeVector_0018_1065)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameDelay_0018_1066",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameDelay_0018_1066)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageTriggerDelay_0018_1067",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageTriggerDelay_0018_1067)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiplexGroupTimeOffset_0018_1068",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiplexGroupTimeOffset_0018_1068)));
  SWIG_Python_SetConstant(d, "tagId_t_TriggerTimeOffset_0018_1069",SWIG_From_int(static_cast< int >(imebra::tagId_t::TriggerTimeOffset_0018_1069)));
  SWIG_Python_SetConstant(d, "tagId_t_SynchronizationTrigger_0018_106A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SynchronizationTrigger_0018_106A)));
  SWIG_Python_SetConstant(d, "tagId_t_SynchronizationChannel_0018_106C",SWIG_From_int(static_cast< int >(imebra::tagId_t::SynchronizationChannel_0018_106C)));
  SWIG_Python_SetConstant(d, "tagId_t_TriggerSamplePosition_0018_106E",SWIG_From_int(static_cast< int >(imebra::tagId_t::TriggerSamplePosition_0018_106E)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalRoute_0018_1070",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalRoute_0018_1070)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalVolume_0018_1071",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalVolume_0018_1071)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalStartTime_0018_1072",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalStartTime_0018_1072)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalStopTime_0018_1073",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalStopTime_0018_1073)));
  SWIG_Python_SetConstant(d, "tagId_t_RadionuclideTotalDose_0018_1074",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadionuclideTotalDose_0018_1074)));
  SWIG_Python_SetConstant(d, "tagId_t_RadionuclideHalfLife_0018_1075",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadionuclideHalfLife_0018_1075)));
  SWIG_Python_SetConstant(d, "tagId_t_RadionuclidePositronFraction_0018_1076",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadionuclidePositronFraction_0018_1076)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalSpecificActivity_0018_1077",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalSpecificActivity_0018_1077)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalStartDateTime_0018_1078",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalStartDateTime_0018_1078)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalStopDateTime_0018_1079",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalStopDateTime_0018_1079)));
  SWIG_Python_SetConstant(d, "tagId_t_BeatRejectionFlag_0018_1080",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeatRejectionFlag_0018_1080)));
  SWIG_Python_SetConstant(d, "tagId_t_LowRRValue_0018_1081",SWIG_From_int(static_cast< int >(imebra::tagId_t::LowRRValue_0018_1081)));
  SWIG_Python_SetConstant(d, "tagId_t_HighRRValue_0018_1082",SWIG_From_int(static_cast< int >(imebra::tagId_t::HighRRValue_0018_1082)));
  SWIG_Python_SetConstant(d, "tagId_t_IntervalsAcquired_0018_1083",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntervalsAcquired_0018_1083)));
  SWIG_Python_SetConstant(d, "tagId_t_IntervalsRejected_0018_1084",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntervalsRejected_0018_1084)));
  SWIG_Python_SetConstant(d, "tagId_t_PVCRejection_0018_1085",SWIG_From_int(static_cast< int >(imebra::tagId_t::PVCRejection_0018_1085)));
  SWIG_Python_SetConstant(d, "tagId_t_SkipBeats_0018_1086",SWIG_From_int(static_cast< int >(imebra::tagId_t::SkipBeats_0018_1086)));
  SWIG_Python_SetConstant(d, "tagId_t_HeartRate_0018_1088",SWIG_From_int(static_cast< int >(imebra::tagId_t::HeartRate_0018_1088)));
  SWIG_Python_SetConstant(d, "tagId_t_CardiacNumberOfImages_0018_1090",SWIG_From_int(static_cast< int >(imebra::tagId_t::CardiacNumberOfImages_0018_1090)));
  SWIG_Python_SetConstant(d, "tagId_t_TriggerWindow_0018_1094",SWIG_From_int(static_cast< int >(imebra::tagId_t::TriggerWindow_0018_1094)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionDiameter_0018_1100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionDiameter_0018_1100)));
  SWIG_Python_SetConstant(d, "tagId_t_DistanceSourceToDetector_0018_1110",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistanceSourceToDetector_0018_1110)));
  SWIG_Python_SetConstant(d, "tagId_t_DistanceSourceToPatient_0018_1111",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistanceSourceToPatient_0018_1111)));
  SWIG_Python_SetConstant(d, "tagId_t_EstimatedRadiographicMagnificationFactor_0018_1114",SWIG_From_int(static_cast< int >(imebra::tagId_t::EstimatedRadiographicMagnificationFactor_0018_1114)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryDetectorTilt_0018_1120",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryDetectorTilt_0018_1120)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryDetectorSlew_0018_1121",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryDetectorSlew_0018_1121)));
  SWIG_Python_SetConstant(d, "tagId_t_TableHeight_0018_1130",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableHeight_0018_1130)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTraverse_0018_1131",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTraverse_0018_1131)));
  SWIG_Python_SetConstant(d, "tagId_t_TableMotion_0018_1134",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableMotion_0018_1134)));
  SWIG_Python_SetConstant(d, "tagId_t_TableVerticalIncrement_0018_1135",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableVerticalIncrement_0018_1135)));
  SWIG_Python_SetConstant(d, "tagId_t_TableLateralIncrement_0018_1136",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableLateralIncrement_0018_1136)));
  SWIG_Python_SetConstant(d, "tagId_t_TableLongitudinalIncrement_0018_1137",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableLongitudinalIncrement_0018_1137)));
  SWIG_Python_SetConstant(d, "tagId_t_TableAngle_0018_1138",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableAngle_0018_1138)));
  SWIG_Python_SetConstant(d, "tagId_t_TableType_0018_113A",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableType_0018_113A)));
  SWIG_Python_SetConstant(d, "tagId_t_RotationDirection_0018_1140",SWIG_From_int(static_cast< int >(imebra::tagId_t::RotationDirection_0018_1140)));
  SWIG_Python_SetConstant(d, "tagId_t_AngularPosition_0018_1141",SWIG_From_int(static_cast< int >(imebra::tagId_t::AngularPosition_0018_1141)));
  SWIG_Python_SetConstant(d, "tagId_t_RadialPosition_0018_1142",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadialPosition_0018_1142)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanArc_0018_1143",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanArc_0018_1143)));
  SWIG_Python_SetConstant(d, "tagId_t_AngularStep_0018_1144",SWIG_From_int(static_cast< int >(imebra::tagId_t::AngularStep_0018_1144)));
  SWIG_Python_SetConstant(d, "tagId_t_CenterOfRotationOffset_0018_1145",SWIG_From_int(static_cast< int >(imebra::tagId_t::CenterOfRotationOffset_0018_1145)));
  SWIG_Python_SetConstant(d, "tagId_t_RotationOffset_0018_1146",SWIG_From_int(static_cast< int >(imebra::tagId_t::RotationOffset_0018_1146)));
  SWIG_Python_SetConstant(d, "tagId_t_FieldOfViewShape_0018_1147",SWIG_From_int(static_cast< int >(imebra::tagId_t::FieldOfViewShape_0018_1147)));
  SWIG_Python_SetConstant(d, "tagId_t_FieldOfViewDimensions_0018_1149",SWIG_From_int(static_cast< int >(imebra::tagId_t::FieldOfViewDimensions_0018_1149)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureTime_0018_1150",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureTime_0018_1150)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayTubeCurrent_0018_1151",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayTubeCurrent_0018_1151)));
  SWIG_Python_SetConstant(d, "tagId_t_Exposure_0018_1152",SWIG_From_int(static_cast< int >(imebra::tagId_t::Exposure_0018_1152)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureInuAs_0018_1153",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureInuAs_0018_1153)));
  SWIG_Python_SetConstant(d, "tagId_t_AveragePulseWidth_0018_1154",SWIG_From_int(static_cast< int >(imebra::tagId_t::AveragePulseWidth_0018_1154)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiationSetting_0018_1155",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiationSetting_0018_1155)));
  SWIG_Python_SetConstant(d, "tagId_t_RectificationType_0018_1156",SWIG_From_int(static_cast< int >(imebra::tagId_t::RectificationType_0018_1156)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiationMode_0018_115A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiationMode_0018_115A)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageAndFluoroscopyAreaDoseProduct_0018_115E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageAndFluoroscopyAreaDoseProduct_0018_115E)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterType_0018_1160",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterType_0018_1160)));
  SWIG_Python_SetConstant(d, "tagId_t_TypeOfFilters_0018_1161",SWIG_From_int(static_cast< int >(imebra::tagId_t::TypeOfFilters_0018_1161)));
  SWIG_Python_SetConstant(d, "tagId_t_IntensifierSize_0018_1162",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntensifierSize_0018_1162)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagerPixelSpacing_0018_1164",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagerPixelSpacing_0018_1164)));
  SWIG_Python_SetConstant(d, "tagId_t_Grid_0018_1166",SWIG_From_int(static_cast< int >(imebra::tagId_t::Grid_0018_1166)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneratorPower_0018_1170",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneratorPower_0018_1170)));
  SWIG_Python_SetConstant(d, "tagId_t_CollimatorGridName_0018_1180",SWIG_From_int(static_cast< int >(imebra::tagId_t::CollimatorGridName_0018_1180)));
  SWIG_Python_SetConstant(d, "tagId_t_CollimatorType_0018_1181",SWIG_From_int(static_cast< int >(imebra::tagId_t::CollimatorType_0018_1181)));
  SWIG_Python_SetConstant(d, "tagId_t_FocalDistance_0018_1182",SWIG_From_int(static_cast< int >(imebra::tagId_t::FocalDistance_0018_1182)));
  SWIG_Python_SetConstant(d, "tagId_t_XFocusCenter_0018_1183",SWIG_From_int(static_cast< int >(imebra::tagId_t::XFocusCenter_0018_1183)));
  SWIG_Python_SetConstant(d, "tagId_t_YFocusCenter_0018_1184",SWIG_From_int(static_cast< int >(imebra::tagId_t::YFocusCenter_0018_1184)));
  SWIG_Python_SetConstant(d, "tagId_t_FocalSpots_0018_1190",SWIG_From_int(static_cast< int >(imebra::tagId_t::FocalSpots_0018_1190)));
  SWIG_Python_SetConstant(d, "tagId_t_AnodeTargetMaterial_0018_1191",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnodeTargetMaterial_0018_1191)));
  SWIG_Python_SetConstant(d, "tagId_t_BodyPartThickness_0018_11A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::BodyPartThickness_0018_11A0)));
  SWIG_Python_SetConstant(d, "tagId_t_CompressionForce_0018_11A2",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompressionForce_0018_11A2)));
  SWIG_Python_SetConstant(d, "tagId_t_CompressionPressure_0018_11A3",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompressionPressure_0018_11A3)));
  SWIG_Python_SetConstant(d, "tagId_t_PaddleDescription_0018_11A4",SWIG_From_int(static_cast< int >(imebra::tagId_t::PaddleDescription_0018_11A4)));
  SWIG_Python_SetConstant(d, "tagId_t_CompressionContactArea_0018_11A5",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompressionContactArea_0018_11A5)));
  SWIG_Python_SetConstant(d, "tagId_t_DateOfLastCalibration_0018_1200",SWIG_From_int(static_cast< int >(imebra::tagId_t::DateOfLastCalibration_0018_1200)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeOfLastCalibration_0018_1201",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeOfLastCalibration_0018_1201)));
  SWIG_Python_SetConstant(d, "tagId_t_DateTimeOfLastCalibration_0018_1202",SWIG_From_int(static_cast< int >(imebra::tagId_t::DateTimeOfLastCalibration_0018_1202)));
  SWIG_Python_SetConstant(d, "tagId_t_ConvolutionKernel_0018_1210",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConvolutionKernel_0018_1210)));
  SWIG_Python_SetConstant(d, "tagId_t_UpperLowerPixelValues_0018_1240",SWIG_From_int(static_cast< int >(imebra::tagId_t::UpperLowerPixelValues_0018_1240)));
  SWIG_Python_SetConstant(d, "tagId_t_ActualFrameDuration_0018_1242",SWIG_From_int(static_cast< int >(imebra::tagId_t::ActualFrameDuration_0018_1242)));
  SWIG_Python_SetConstant(d, "tagId_t_CountRate_0018_1243",SWIG_From_int(static_cast< int >(imebra::tagId_t::CountRate_0018_1243)));
  SWIG_Python_SetConstant(d, "tagId_t_PreferredPlaybackSequencing_0018_1244",SWIG_From_int(static_cast< int >(imebra::tagId_t::PreferredPlaybackSequencing_0018_1244)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceiveCoilName_0018_1250",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceiveCoilName_0018_1250)));
  SWIG_Python_SetConstant(d, "tagId_t_TransmitCoilName_0018_1251",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransmitCoilName_0018_1251)));
  SWIG_Python_SetConstant(d, "tagId_t_PlateType_0018_1260",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlateType_0018_1260)));
  SWIG_Python_SetConstant(d, "tagId_t_PhosphorType_0018_1261",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhosphorType_0018_1261)));
  SWIG_Python_SetConstant(d, "tagId_t_WaterEquivalentDiameter_0018_1271",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaterEquivalentDiameter_0018_1271)));
  SWIG_Python_SetConstant(d, "tagId_t_WaterEquivalentDiameterCalculationMethodCodeSequence_0018_1272",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaterEquivalentDiameterCalculationMethodCodeSequence_0018_1272)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanVelocity_0018_1300",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanVelocity_0018_1300)));
  SWIG_Python_SetConstant(d, "tagId_t_WholeBodyTechnique_0018_1301",SWIG_From_int(static_cast< int >(imebra::tagId_t::WholeBodyTechnique_0018_1301)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanLength_0018_1302",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanLength_0018_1302)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionMatrix_0018_1310",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionMatrix_0018_1310)));
  SWIG_Python_SetConstant(d, "tagId_t_InPlanePhaseEncodingDirection_0018_1312",SWIG_From_int(static_cast< int >(imebra::tagId_t::InPlanePhaseEncodingDirection_0018_1312)));
  SWIG_Python_SetConstant(d, "tagId_t_FlipAngle_0018_1314",SWIG_From_int(static_cast< int >(imebra::tagId_t::FlipAngle_0018_1314)));
  SWIG_Python_SetConstant(d, "tagId_t_VariableFlipAngleFlag_0018_1315",SWIG_From_int(static_cast< int >(imebra::tagId_t::VariableFlipAngleFlag_0018_1315)));
  SWIG_Python_SetConstant(d, "tagId_t_SAR_0018_1316",SWIG_From_int(static_cast< int >(imebra::tagId_t::SAR_0018_1316)));
  SWIG_Python_SetConstant(d, "tagId_t_dBdt_0018_1318",SWIG_From_int(static_cast< int >(imebra::tagId_t::dBdt_0018_1318)));
  SWIG_Python_SetConstant(d, "tagId_t_B1rms_0018_1320",SWIG_From_int(static_cast< int >(imebra::tagId_t::B1rms_0018_1320)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionDeviceProcessingDescription_0018_1400",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionDeviceProcessingDescription_0018_1400)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionDeviceProcessingCode_0018_1401",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionDeviceProcessingCode_0018_1401)));
  SWIG_Python_SetConstant(d, "tagId_t_CassetteOrientation_0018_1402",SWIG_From_int(static_cast< int >(imebra::tagId_t::CassetteOrientation_0018_1402)));
  SWIG_Python_SetConstant(d, "tagId_t_CassetteSize_0018_1403",SWIG_From_int(static_cast< int >(imebra::tagId_t::CassetteSize_0018_1403)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposuresOnPlate_0018_1404",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposuresOnPlate_0018_1404)));
  SWIG_Python_SetConstant(d, "tagId_t_RelativeXRayExposure_0018_1405",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelativeXRayExposure_0018_1405)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureIndex_0018_1411",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureIndex_0018_1411)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetExposureIndex_0018_1412",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetExposureIndex_0018_1412)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviationIndex_0018_1413",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviationIndex_0018_1413)));
  SWIG_Python_SetConstant(d, "tagId_t_ColumnAngulation_0018_1450",SWIG_From_int(static_cast< int >(imebra::tagId_t::ColumnAngulation_0018_1450)));
  SWIG_Python_SetConstant(d, "tagId_t_TomoLayerHeight_0018_1460",SWIG_From_int(static_cast< int >(imebra::tagId_t::TomoLayerHeight_0018_1460)));
  SWIG_Python_SetConstant(d, "tagId_t_TomoAngle_0018_1470",SWIG_From_int(static_cast< int >(imebra::tagId_t::TomoAngle_0018_1470)));
  SWIG_Python_SetConstant(d, "tagId_t_TomoTime_0018_1480",SWIG_From_int(static_cast< int >(imebra::tagId_t::TomoTime_0018_1480)));
  SWIG_Python_SetConstant(d, "tagId_t_TomoType_0018_1490",SWIG_From_int(static_cast< int >(imebra::tagId_t::TomoType_0018_1490)));
  SWIG_Python_SetConstant(d, "tagId_t_TomoClass_0018_1491",SWIG_From_int(static_cast< int >(imebra::tagId_t::TomoClass_0018_1491)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfTomosynthesisSourceImages_0018_1495",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfTomosynthesisSourceImages_0018_1495)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerMotion_0018_1500",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerMotion_0018_1500)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerType_0018_1508",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerType_0018_1508)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerPrimaryAngle_0018_1510",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerPrimaryAngle_0018_1510)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerSecondaryAngle_0018_1511",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerSecondaryAngle_0018_1511)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerPrimaryAngleIncrement_0018_1520",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerPrimaryAngleIncrement_0018_1520)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerSecondaryAngleIncrement_0018_1521",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerSecondaryAngleIncrement_0018_1521)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorPrimaryAngle_0018_1530",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorPrimaryAngle_0018_1530)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorSecondaryAngle_0018_1531",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorSecondaryAngle_0018_1531)));
  SWIG_Python_SetConstant(d, "tagId_t_ShutterShape_0018_1600",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShutterShape_0018_1600)));
  SWIG_Python_SetConstant(d, "tagId_t_ShutterLeftVerticalEdge_0018_1602",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShutterLeftVerticalEdge_0018_1602)));
  SWIG_Python_SetConstant(d, "tagId_t_ShutterRightVerticalEdge_0018_1604",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShutterRightVerticalEdge_0018_1604)));
  SWIG_Python_SetConstant(d, "tagId_t_ShutterUpperHorizontalEdge_0018_1606",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShutterUpperHorizontalEdge_0018_1606)));
  SWIG_Python_SetConstant(d, "tagId_t_ShutterLowerHorizontalEdge_0018_1608",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShutterLowerHorizontalEdge_0018_1608)));
  SWIG_Python_SetConstant(d, "tagId_t_CenterOfCircularShutter_0018_1610",SWIG_From_int(static_cast< int >(imebra::tagId_t::CenterOfCircularShutter_0018_1610)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiusOfCircularShutter_0018_1612",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiusOfCircularShutter_0018_1612)));
  SWIG_Python_SetConstant(d, "tagId_t_VerticesOfThePolygonalShutter_0018_1620",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerticesOfThePolygonalShutter_0018_1620)));
  SWIG_Python_SetConstant(d, "tagId_t_ShutterPresentationValue_0018_1622",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShutterPresentationValue_0018_1622)));
  SWIG_Python_SetConstant(d, "tagId_t_ShutterOverlayGroup_0018_1623",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShutterOverlayGroup_0018_1623)));
  SWIG_Python_SetConstant(d, "tagId_t_ShutterPresentationColorCIELabValue_0018_1624",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShutterPresentationColorCIELabValue_0018_1624)));
  SWIG_Python_SetConstant(d, "tagId_t_CollimatorShape_0018_1700",SWIG_From_int(static_cast< int >(imebra::tagId_t::CollimatorShape_0018_1700)));
  SWIG_Python_SetConstant(d, "tagId_t_CollimatorLeftVerticalEdge_0018_1702",SWIG_From_int(static_cast< int >(imebra::tagId_t::CollimatorLeftVerticalEdge_0018_1702)));
  SWIG_Python_SetConstant(d, "tagId_t_CollimatorRightVerticalEdge_0018_1704",SWIG_From_int(static_cast< int >(imebra::tagId_t::CollimatorRightVerticalEdge_0018_1704)));
  SWIG_Python_SetConstant(d, "tagId_t_CollimatorUpperHorizontalEdge_0018_1706",SWIG_From_int(static_cast< int >(imebra::tagId_t::CollimatorUpperHorizontalEdge_0018_1706)));
  SWIG_Python_SetConstant(d, "tagId_t_CollimatorLowerHorizontalEdge_0018_1708",SWIG_From_int(static_cast< int >(imebra::tagId_t::CollimatorLowerHorizontalEdge_0018_1708)));
  SWIG_Python_SetConstant(d, "tagId_t_CenterOfCircularCollimator_0018_1710",SWIG_From_int(static_cast< int >(imebra::tagId_t::CenterOfCircularCollimator_0018_1710)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiusOfCircularCollimator_0018_1712",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiusOfCircularCollimator_0018_1712)));
  SWIG_Python_SetConstant(d, "tagId_t_VerticesOfThePolygonalCollimator_0018_1720",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerticesOfThePolygonalCollimator_0018_1720)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionTimeSynchronized_0018_1800",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionTimeSynchronized_0018_1800)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeSource_0018_1801",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeSource_0018_1801)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeDistributionProtocol_0018_1802",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeDistributionProtocol_0018_1802)));
  SWIG_Python_SetConstant(d, "tagId_t_NTPSourceAddress_0018_1803",SWIG_From_int(static_cast< int >(imebra::tagId_t::NTPSourceAddress_0018_1803)));
  SWIG_Python_SetConstant(d, "tagId_t_PageNumberVector_0018_2001",SWIG_From_int(static_cast< int >(imebra::tagId_t::PageNumberVector_0018_2001)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameLabelVector_0018_2002",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameLabelVector_0018_2002)));
  SWIG_Python_SetConstant(d, "tagId_t_FramePrimaryAngleVector_0018_2003",SWIG_From_int(static_cast< int >(imebra::tagId_t::FramePrimaryAngleVector_0018_2003)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameSecondaryAngleVector_0018_2004",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameSecondaryAngleVector_0018_2004)));
  SWIG_Python_SetConstant(d, "tagId_t_SliceLocationVector_0018_2005",SWIG_From_int(static_cast< int >(imebra::tagId_t::SliceLocationVector_0018_2005)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayWindowLabelVector_0018_2006",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayWindowLabelVector_0018_2006)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalScannedPixelSpacing_0018_2010",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalScannedPixelSpacing_0018_2010)));
  SWIG_Python_SetConstant(d, "tagId_t_DigitizingDeviceTransportDirection_0018_2020",SWIG_From_int(static_cast< int >(imebra::tagId_t::DigitizingDeviceTransportDirection_0018_2020)));
  SWIG_Python_SetConstant(d, "tagId_t_RotationOfScannedFilm_0018_2030",SWIG_From_int(static_cast< int >(imebra::tagId_t::RotationOfScannedFilm_0018_2030)));
  SWIG_Python_SetConstant(d, "tagId_t_BiopsyTargetSequence_0018_2041",SWIG_From_int(static_cast< int >(imebra::tagId_t::BiopsyTargetSequence_0018_2041)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetUID_0018_2042",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetUID_0018_2042)));
  SWIG_Python_SetConstant(d, "tagId_t_LocalizingCursorPosition_0018_2043",SWIG_From_int(static_cast< int >(imebra::tagId_t::LocalizingCursorPosition_0018_2043)));
  SWIG_Python_SetConstant(d, "tagId_t_CalculatedTargetPosition_0018_2044",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalculatedTargetPosition_0018_2044)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetLabel_0018_2045",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetLabel_0018_2045)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayedZValue_0018_2046",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayedZValue_0018_2046)));
  SWIG_Python_SetConstant(d, "tagId_t_IVUSAcquisition_0018_3100",SWIG_From_int(static_cast< int >(imebra::tagId_t::IVUSAcquisition_0018_3100)));
  SWIG_Python_SetConstant(d, "tagId_t_IVUSPullbackRate_0018_3101",SWIG_From_int(static_cast< int >(imebra::tagId_t::IVUSPullbackRate_0018_3101)));
  SWIG_Python_SetConstant(d, "tagId_t_IVUSGatedRate_0018_3102",SWIG_From_int(static_cast< int >(imebra::tagId_t::IVUSGatedRate_0018_3102)));
  SWIG_Python_SetConstant(d, "tagId_t_IVUSPullbackStartFrameNumber_0018_3103",SWIG_From_int(static_cast< int >(imebra::tagId_t::IVUSPullbackStartFrameNumber_0018_3103)));
  SWIG_Python_SetConstant(d, "tagId_t_IVUSPullbackStopFrameNumber_0018_3104",SWIG_From_int(static_cast< int >(imebra::tagId_t::IVUSPullbackStopFrameNumber_0018_3104)));
  SWIG_Python_SetConstant(d, "tagId_t_LesionNumber_0018_3105",SWIG_From_int(static_cast< int >(imebra::tagId_t::LesionNumber_0018_3105)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionComments_0018_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionComments_0018_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_OutputPower_0018_5000",SWIG_From_int(static_cast< int >(imebra::tagId_t::OutputPower_0018_5000)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerData_0018_5010",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerData_0018_5010)));
  SWIG_Python_SetConstant(d, "tagId_t_FocusDepth_0018_5012",SWIG_From_int(static_cast< int >(imebra::tagId_t::FocusDepth_0018_5012)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcessingFunction_0018_5020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcessingFunction_0018_5020)));
  SWIG_Python_SetConstant(d, "tagId_t_PostprocessingFunction_0018_5021",SWIG_From_int(static_cast< int >(imebra::tagId_t::PostprocessingFunction_0018_5021)));
  SWIG_Python_SetConstant(d, "tagId_t_MechanicalIndex_0018_5022",SWIG_From_int(static_cast< int >(imebra::tagId_t::MechanicalIndex_0018_5022)));
  SWIG_Python_SetConstant(d, "tagId_t_BoneThermalIndex_0018_5024",SWIG_From_int(static_cast< int >(imebra::tagId_t::BoneThermalIndex_0018_5024)));
  SWIG_Python_SetConstant(d, "tagId_t_CranialThermalIndex_0018_5026",SWIG_From_int(static_cast< int >(imebra::tagId_t::CranialThermalIndex_0018_5026)));
  SWIG_Python_SetConstant(d, "tagId_t_SoftTissueThermalIndex_0018_5027",SWIG_From_int(static_cast< int >(imebra::tagId_t::SoftTissueThermalIndex_0018_5027)));
  SWIG_Python_SetConstant(d, "tagId_t_SoftTissueFocusThermalIndex_0018_5028",SWIG_From_int(static_cast< int >(imebra::tagId_t::SoftTissueFocusThermalIndex_0018_5028)));
  SWIG_Python_SetConstant(d, "tagId_t_SoftTissueSurfaceThermalIndex_0018_5029",SWIG_From_int(static_cast< int >(imebra::tagId_t::SoftTissueSurfaceThermalIndex_0018_5029)));
  SWIG_Python_SetConstant(d, "tagId_t_DynamicRange_0018_5030",SWIG_From_int(static_cast< int >(imebra::tagId_t::DynamicRange_0018_5030)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalGain_0018_5040",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalGain_0018_5040)));
  SWIG_Python_SetConstant(d, "tagId_t_DepthOfScanField_0018_5050",SWIG_From_int(static_cast< int >(imebra::tagId_t::DepthOfScanField_0018_5050)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientPosition_0018_5100",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientPosition_0018_5100)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewPosition_0018_5101",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewPosition_0018_5101)));
  SWIG_Python_SetConstant(d, "tagId_t_ProjectionEponymousNameCodeSequence_0018_5104",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProjectionEponymousNameCodeSequence_0018_5104)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageTransformationMatrix_0018_5210",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageTransformationMatrix_0018_5210)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageTranslationVector_0018_5212",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageTranslationVector_0018_5212)));
  SWIG_Python_SetConstant(d, "tagId_t_Sensitivity_0018_6000",SWIG_From_int(static_cast< int >(imebra::tagId_t::Sensitivity_0018_6000)));
  SWIG_Python_SetConstant(d, "tagId_t_SequenceOfUltrasoundRegions_0018_6011",SWIG_From_int(static_cast< int >(imebra::tagId_t::SequenceOfUltrasoundRegions_0018_6011)));
  SWIG_Python_SetConstant(d, "tagId_t_RegionSpatialFormat_0018_6012",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegionSpatialFormat_0018_6012)));
  SWIG_Python_SetConstant(d, "tagId_t_RegionDataType_0018_6014",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegionDataType_0018_6014)));
  SWIG_Python_SetConstant(d, "tagId_t_RegionFlags_0018_6016",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegionFlags_0018_6016)));
  SWIG_Python_SetConstant(d, "tagId_t_RegionLocationMinX0_0018_6018",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegionLocationMinX0_0018_6018)));
  SWIG_Python_SetConstant(d, "tagId_t_RegionLocationMinY0_0018_601A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegionLocationMinY0_0018_601A)));
  SWIG_Python_SetConstant(d, "tagId_t_RegionLocationMaxX1_0018_601C",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegionLocationMaxX1_0018_601C)));
  SWIG_Python_SetConstant(d, "tagId_t_RegionLocationMaxY1_0018_601E",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegionLocationMaxY1_0018_601E)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencePixelX0_0018_6020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencePixelX0_0018_6020)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencePixelY0_0018_6022",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencePixelY0_0018_6022)));
  SWIG_Python_SetConstant(d, "tagId_t_PhysicalUnitsXDirection_0018_6024",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhysicalUnitsXDirection_0018_6024)));
  SWIG_Python_SetConstant(d, "tagId_t_PhysicalUnitsYDirection_0018_6026",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhysicalUnitsYDirection_0018_6026)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencePixelPhysicalValueX_0018_6028",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencePixelPhysicalValueX_0018_6028)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencePixelPhysicalValueY_0018_602A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencePixelPhysicalValueY_0018_602A)));
  SWIG_Python_SetConstant(d, "tagId_t_PhysicalDeltaX_0018_602C",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhysicalDeltaX_0018_602C)));
  SWIG_Python_SetConstant(d, "tagId_t_PhysicalDeltaY_0018_602E",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhysicalDeltaY_0018_602E)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerFrequency_0018_6030",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerFrequency_0018_6030)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerType_0018_6031",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerType_0018_6031)));
  SWIG_Python_SetConstant(d, "tagId_t_PulseRepetitionFrequency_0018_6032",SWIG_From_int(static_cast< int >(imebra::tagId_t::PulseRepetitionFrequency_0018_6032)));
  SWIG_Python_SetConstant(d, "tagId_t_DopplerCorrectionAngle_0018_6034",SWIG_From_int(static_cast< int >(imebra::tagId_t::DopplerCorrectionAngle_0018_6034)));
  SWIG_Python_SetConstant(d, "tagId_t_SteeringAngle_0018_6036",SWIG_From_int(static_cast< int >(imebra::tagId_t::SteeringAngle_0018_6036)));
  SWIG_Python_SetConstant(d, "tagId_t_DopplerSampleVolumeXPositionRetired_0018_6038",SWIG_From_int(static_cast< int >(imebra::tagId_t::DopplerSampleVolumeXPositionRetired_0018_6038)));
  SWIG_Python_SetConstant(d, "tagId_t_DopplerSampleVolumeXPosition_0018_6039",SWIG_From_int(static_cast< int >(imebra::tagId_t::DopplerSampleVolumeXPosition_0018_6039)));
  SWIG_Python_SetConstant(d, "tagId_t_DopplerSampleVolumeYPositionRetired_0018_603A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DopplerSampleVolumeYPositionRetired_0018_603A)));
  SWIG_Python_SetConstant(d, "tagId_t_DopplerSampleVolumeYPosition_0018_603B",SWIG_From_int(static_cast< int >(imebra::tagId_t::DopplerSampleVolumeYPosition_0018_603B)));
  SWIG_Python_SetConstant(d, "tagId_t_TMLinePositionX0Retired_0018_603C",SWIG_From_int(static_cast< int >(imebra::tagId_t::TMLinePositionX0Retired_0018_603C)));
  SWIG_Python_SetConstant(d, "tagId_t_TMLinePositionX0_0018_603D",SWIG_From_int(static_cast< int >(imebra::tagId_t::TMLinePositionX0_0018_603D)));
  SWIG_Python_SetConstant(d, "tagId_t_TMLinePositionY0Retired_0018_603E",SWIG_From_int(static_cast< int >(imebra::tagId_t::TMLinePositionY0Retired_0018_603E)));
  SWIG_Python_SetConstant(d, "tagId_t_TMLinePositionY0_0018_603F",SWIG_From_int(static_cast< int >(imebra::tagId_t::TMLinePositionY0_0018_603F)));
  SWIG_Python_SetConstant(d, "tagId_t_TMLinePositionX1Retired_0018_6040",SWIG_From_int(static_cast< int >(imebra::tagId_t::TMLinePositionX1Retired_0018_6040)));
  SWIG_Python_SetConstant(d, "tagId_t_TMLinePositionX1_0018_6041",SWIG_From_int(static_cast< int >(imebra::tagId_t::TMLinePositionX1_0018_6041)));
  SWIG_Python_SetConstant(d, "tagId_t_TMLinePositionY1Retired_0018_6042",SWIG_From_int(static_cast< int >(imebra::tagId_t::TMLinePositionY1Retired_0018_6042)));
  SWIG_Python_SetConstant(d, "tagId_t_TMLinePositionY1_0018_6043",SWIG_From_int(static_cast< int >(imebra::tagId_t::TMLinePositionY1_0018_6043)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelComponentOrganization_0018_6044",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelComponentOrganization_0018_6044)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelComponentMask_0018_6046",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelComponentMask_0018_6046)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelComponentRangeStart_0018_6048",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelComponentRangeStart_0018_6048)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelComponentRangeStop_0018_604A",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelComponentRangeStop_0018_604A)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelComponentPhysicalUnits_0018_604C",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelComponentPhysicalUnits_0018_604C)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelComponentDataType_0018_604E",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelComponentDataType_0018_604E)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfTableBreakPoints_0018_6050",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfTableBreakPoints_0018_6050)));
  SWIG_Python_SetConstant(d, "tagId_t_TableOfXBreakPoints_0018_6052",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableOfXBreakPoints_0018_6052)));
  SWIG_Python_SetConstant(d, "tagId_t_TableOfYBreakPoints_0018_6054",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableOfYBreakPoints_0018_6054)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfTableEntries_0018_6056",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfTableEntries_0018_6056)));
  SWIG_Python_SetConstant(d, "tagId_t_TableOfPixelValues_0018_6058",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableOfPixelValues_0018_6058)));
  SWIG_Python_SetConstant(d, "tagId_t_TableOfParameterValues_0018_605A",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableOfParameterValues_0018_605A)));
  SWIG_Python_SetConstant(d, "tagId_t_RWaveTimeVector_0018_6060",SWIG_From_int(static_cast< int >(imebra::tagId_t::RWaveTimeVector_0018_6060)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorConditionsNominalFlag_0018_7000",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorConditionsNominalFlag_0018_7000)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorTemperature_0018_7001",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorTemperature_0018_7001)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorType_0018_7004",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorType_0018_7004)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorConfiguration_0018_7005",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorConfiguration_0018_7005)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorDescription_0018_7006",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorDescription_0018_7006)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorMode_0018_7008",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorMode_0018_7008)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorID_0018_700A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorID_0018_700A)));
  SWIG_Python_SetConstant(d, "tagId_t_DateOfLastDetectorCalibration_0018_700C",SWIG_From_int(static_cast< int >(imebra::tagId_t::DateOfLastDetectorCalibration_0018_700C)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeOfLastDetectorCalibration_0018_700E",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeOfLastDetectorCalibration_0018_700E)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposuresOnDetectorSinceLastCalibration_0018_7010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposuresOnDetectorSinceLastCalibration_0018_7010)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposuresOnDetectorSinceManufactured_0018_7011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposuresOnDetectorSinceManufactured_0018_7011)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorTimeSinceLastExposure_0018_7012",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorTimeSinceLastExposure_0018_7012)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorActiveTime_0018_7014",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorActiveTime_0018_7014)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorActivationOffsetFromExposure_0018_7016",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorActivationOffsetFromExposure_0018_7016)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorBinning_0018_701A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorBinning_0018_701A)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorElementPhysicalSize_0018_7020",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorElementPhysicalSize_0018_7020)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorElementSpacing_0018_7022",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorElementSpacing_0018_7022)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorActiveShape_0018_7024",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorActiveShape_0018_7024)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorActiveDimensions_0018_7026",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorActiveDimensions_0018_7026)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorActiveOrigin_0018_7028",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorActiveOrigin_0018_7028)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorManufacturerName_0018_702A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorManufacturerName_0018_702A)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorManufacturerModelName_0018_702B",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorManufacturerModelName_0018_702B)));
  SWIG_Python_SetConstant(d, "tagId_t_FieldOfViewOrigin_0018_7030",SWIG_From_int(static_cast< int >(imebra::tagId_t::FieldOfViewOrigin_0018_7030)));
  SWIG_Python_SetConstant(d, "tagId_t_FieldOfViewRotation_0018_7032",SWIG_From_int(static_cast< int >(imebra::tagId_t::FieldOfViewRotation_0018_7032)));
  SWIG_Python_SetConstant(d, "tagId_t_FieldOfViewHorizontalFlip_0018_7034",SWIG_From_int(static_cast< int >(imebra::tagId_t::FieldOfViewHorizontalFlip_0018_7034)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelDataAreaOriginRelativeToFOV_0018_7036",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelDataAreaOriginRelativeToFOV_0018_7036)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelDataAreaRotationAngleRelativeToFOV_0018_7038",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelDataAreaRotationAngleRelativeToFOV_0018_7038)));
  SWIG_Python_SetConstant(d, "tagId_t_GridAbsorbingMaterial_0018_7040",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridAbsorbingMaterial_0018_7040)));
  SWIG_Python_SetConstant(d, "tagId_t_GridSpacingMaterial_0018_7041",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridSpacingMaterial_0018_7041)));
  SWIG_Python_SetConstant(d, "tagId_t_GridThickness_0018_7042",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridThickness_0018_7042)));
  SWIG_Python_SetConstant(d, "tagId_t_GridPitch_0018_7044",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridPitch_0018_7044)));
  SWIG_Python_SetConstant(d, "tagId_t_GridAspectRatio_0018_7046",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridAspectRatio_0018_7046)));
  SWIG_Python_SetConstant(d, "tagId_t_GridPeriod_0018_7048",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridPeriod_0018_7048)));
  SWIG_Python_SetConstant(d, "tagId_t_GridFocalDistance_0018_704C",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridFocalDistance_0018_704C)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterMaterial_0018_7050",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterMaterial_0018_7050)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterThicknessMinimum_0018_7052",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterThicknessMinimum_0018_7052)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterThicknessMaximum_0018_7054",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterThicknessMaximum_0018_7054)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterBeamPathLengthMinimum_0018_7056",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterBeamPathLengthMinimum_0018_7056)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterBeamPathLengthMaximum_0018_7058",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterBeamPathLengthMaximum_0018_7058)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureControlMode_0018_7060",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureControlMode_0018_7060)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureControlModeDescription_0018_7062",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureControlModeDescription_0018_7062)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureStatus_0018_7064",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureStatus_0018_7064)));
  SWIG_Python_SetConstant(d, "tagId_t_PhototimerSetting_0018_7065",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhototimerSetting_0018_7065)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureTimeInuS_0018_8150",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureTimeInuS_0018_8150)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayTubeCurrentInuA_0018_8151",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayTubeCurrentInuA_0018_8151)));
  SWIG_Python_SetConstant(d, "tagId_t_ContentQualification_0018_9004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContentQualification_0018_9004)));
  SWIG_Python_SetConstant(d, "tagId_t_PulseSequenceName_0018_9005",SWIG_From_int(static_cast< int >(imebra::tagId_t::PulseSequenceName_0018_9005)));
  SWIG_Python_SetConstant(d, "tagId_t_MRImagingModifierSequence_0018_9006",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRImagingModifierSequence_0018_9006)));
  SWIG_Python_SetConstant(d, "tagId_t_EchoPulseSequence_0018_9008",SWIG_From_int(static_cast< int >(imebra::tagId_t::EchoPulseSequence_0018_9008)));
  SWIG_Python_SetConstant(d, "tagId_t_InversionRecovery_0018_9009",SWIG_From_int(static_cast< int >(imebra::tagId_t::InversionRecovery_0018_9009)));
  SWIG_Python_SetConstant(d, "tagId_t_FlowCompensation_0018_9010",SWIG_From_int(static_cast< int >(imebra::tagId_t::FlowCompensation_0018_9010)));
  SWIG_Python_SetConstant(d, "tagId_t_MultipleSpinEcho_0018_9011",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultipleSpinEcho_0018_9011)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiPlanarExcitation_0018_9012",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiPlanarExcitation_0018_9012)));
  SWIG_Python_SetConstant(d, "tagId_t_PhaseContrast_0018_9014",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhaseContrast_0018_9014)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeOfFlightContrast_0018_9015",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeOfFlightContrast_0018_9015)));
  SWIG_Python_SetConstant(d, "tagId_t_Spoiling_0018_9016",SWIG_From_int(static_cast< int >(imebra::tagId_t::Spoiling_0018_9016)));
  SWIG_Python_SetConstant(d, "tagId_t_SteadyStatePulseSequence_0018_9017",SWIG_From_int(static_cast< int >(imebra::tagId_t::SteadyStatePulseSequence_0018_9017)));
  SWIG_Python_SetConstant(d, "tagId_t_EchoPlanarPulseSequence_0018_9018",SWIG_From_int(static_cast< int >(imebra::tagId_t::EchoPlanarPulseSequence_0018_9018)));
  SWIG_Python_SetConstant(d, "tagId_t_TagAngleFirstAxis_0018_9019",SWIG_From_int(static_cast< int >(imebra::tagId_t::TagAngleFirstAxis_0018_9019)));
  SWIG_Python_SetConstant(d, "tagId_t_MagnetizationTransfer_0018_9020",SWIG_From_int(static_cast< int >(imebra::tagId_t::MagnetizationTransfer_0018_9020)));
  SWIG_Python_SetConstant(d, "tagId_t_T2Preparation_0018_9021",SWIG_From_int(static_cast< int >(imebra::tagId_t::T2Preparation_0018_9021)));
  SWIG_Python_SetConstant(d, "tagId_t_BloodSignalNulling_0018_9022",SWIG_From_int(static_cast< int >(imebra::tagId_t::BloodSignalNulling_0018_9022)));
  SWIG_Python_SetConstant(d, "tagId_t_SaturationRecovery_0018_9024",SWIG_From_int(static_cast< int >(imebra::tagId_t::SaturationRecovery_0018_9024)));
  SWIG_Python_SetConstant(d, "tagId_t_SpectrallySelectedSuppression_0018_9025",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpectrallySelectedSuppression_0018_9025)));
  SWIG_Python_SetConstant(d, "tagId_t_SpectrallySelectedExcitation_0018_9026",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpectrallySelectedExcitation_0018_9026)));
  SWIG_Python_SetConstant(d, "tagId_t_SpatialPresaturation_0018_9027",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpatialPresaturation_0018_9027)));
  SWIG_Python_SetConstant(d, "tagId_t_Tagging_0018_9028",SWIG_From_int(static_cast< int >(imebra::tagId_t::Tagging_0018_9028)));
  SWIG_Python_SetConstant(d, "tagId_t_OversamplingPhase_0018_9029",SWIG_From_int(static_cast< int >(imebra::tagId_t::OversamplingPhase_0018_9029)));
  SWIG_Python_SetConstant(d, "tagId_t_TagSpacingFirstDimension_0018_9030",SWIG_From_int(static_cast< int >(imebra::tagId_t::TagSpacingFirstDimension_0018_9030)));
  SWIG_Python_SetConstant(d, "tagId_t_GeometryOfKSpaceTraversal_0018_9032",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeometryOfKSpaceTraversal_0018_9032)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentedKSpaceTraversal_0018_9033",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentedKSpaceTraversal_0018_9033)));
  SWIG_Python_SetConstant(d, "tagId_t_RectilinearPhaseEncodeReordering_0018_9034",SWIG_From_int(static_cast< int >(imebra::tagId_t::RectilinearPhaseEncodeReordering_0018_9034)));
  SWIG_Python_SetConstant(d, "tagId_t_TagThickness_0018_9035",SWIG_From_int(static_cast< int >(imebra::tagId_t::TagThickness_0018_9035)));
  SWIG_Python_SetConstant(d, "tagId_t_PartialFourierDirection_0018_9036",SWIG_From_int(static_cast< int >(imebra::tagId_t::PartialFourierDirection_0018_9036)));
  SWIG_Python_SetConstant(d, "tagId_t_CardiacSynchronizationTechnique_0018_9037",SWIG_From_int(static_cast< int >(imebra::tagId_t::CardiacSynchronizationTechnique_0018_9037)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceiveCoilManufacturerName_0018_9041",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceiveCoilManufacturerName_0018_9041)));
  SWIG_Python_SetConstant(d, "tagId_t_MRReceiveCoilSequence_0018_9042",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRReceiveCoilSequence_0018_9042)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceiveCoilType_0018_9043",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceiveCoilType_0018_9043)));
  SWIG_Python_SetConstant(d, "tagId_t_QuadratureReceiveCoil_0018_9044",SWIG_From_int(static_cast< int >(imebra::tagId_t::QuadratureReceiveCoil_0018_9044)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiCoilDefinitionSequence_0018_9045",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiCoilDefinitionSequence_0018_9045)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiCoilConfiguration_0018_9046",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiCoilConfiguration_0018_9046)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiCoilElementName_0018_9047",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiCoilElementName_0018_9047)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiCoilElementUsed_0018_9048",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiCoilElementUsed_0018_9048)));
  SWIG_Python_SetConstant(d, "tagId_t_MRTransmitCoilSequence_0018_9049",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRTransmitCoilSequence_0018_9049)));
  SWIG_Python_SetConstant(d, "tagId_t_TransmitCoilManufacturerName_0018_9050",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransmitCoilManufacturerName_0018_9050)));
  SWIG_Python_SetConstant(d, "tagId_t_TransmitCoilType_0018_9051",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransmitCoilType_0018_9051)));
  SWIG_Python_SetConstant(d, "tagId_t_SpectralWidth_0018_9052",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpectralWidth_0018_9052)));
  SWIG_Python_SetConstant(d, "tagId_t_ChemicalShiftReference_0018_9053",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChemicalShiftReference_0018_9053)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeLocalizationTechnique_0018_9054",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeLocalizationTechnique_0018_9054)));
  SWIG_Python_SetConstant(d, "tagId_t_MRAcquisitionFrequencyEncodingSteps_0018_9058",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRAcquisitionFrequencyEncodingSteps_0018_9058)));
  SWIG_Python_SetConstant(d, "tagId_t_Decoupling_0018_9059",SWIG_From_int(static_cast< int >(imebra::tagId_t::Decoupling_0018_9059)));
  SWIG_Python_SetConstant(d, "tagId_t_DecoupledNucleus_0018_9060",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecoupledNucleus_0018_9060)));
  SWIG_Python_SetConstant(d, "tagId_t_DecouplingFrequency_0018_9061",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecouplingFrequency_0018_9061)));
  SWIG_Python_SetConstant(d, "tagId_t_DecouplingMethod_0018_9062",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecouplingMethod_0018_9062)));
  SWIG_Python_SetConstant(d, "tagId_t_DecouplingChemicalShiftReference_0018_9063",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecouplingChemicalShiftReference_0018_9063)));
  SWIG_Python_SetConstant(d, "tagId_t_KSpaceFiltering_0018_9064",SWIG_From_int(static_cast< int >(imebra::tagId_t::KSpaceFiltering_0018_9064)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeDomainFiltering_0018_9065",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeDomainFiltering_0018_9065)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfZeroFills_0018_9066",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfZeroFills_0018_9066)));
  SWIG_Python_SetConstant(d, "tagId_t_BaselineCorrection_0018_9067",SWIG_From_int(static_cast< int >(imebra::tagId_t::BaselineCorrection_0018_9067)));
  SWIG_Python_SetConstant(d, "tagId_t_ParallelReductionFactorInPlane_0018_9069",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParallelReductionFactorInPlane_0018_9069)));
  SWIG_Python_SetConstant(d, "tagId_t_CardiacRRIntervalSpecified_0018_9070",SWIG_From_int(static_cast< int >(imebra::tagId_t::CardiacRRIntervalSpecified_0018_9070)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionDuration_0018_9073",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionDuration_0018_9073)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameAcquisitionDateTime_0018_9074",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameAcquisitionDateTime_0018_9074)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionDirectionality_0018_9075",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionDirectionality_0018_9075)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionGradientDirectionSequence_0018_9076",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionGradientDirectionSequence_0018_9076)));
  SWIG_Python_SetConstant(d, "tagId_t_ParallelAcquisition_0018_9077",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParallelAcquisition_0018_9077)));
  SWIG_Python_SetConstant(d, "tagId_t_ParallelAcquisitionTechnique_0018_9078",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParallelAcquisitionTechnique_0018_9078)));
  SWIG_Python_SetConstant(d, "tagId_t_InversionTimes_0018_9079",SWIG_From_int(static_cast< int >(imebra::tagId_t::InversionTimes_0018_9079)));
  SWIG_Python_SetConstant(d, "tagId_t_MetaboliteMapDescription_0018_9080",SWIG_From_int(static_cast< int >(imebra::tagId_t::MetaboliteMapDescription_0018_9080)));
  SWIG_Python_SetConstant(d, "tagId_t_PartialFourier_0018_9081",SWIG_From_int(static_cast< int >(imebra::tagId_t::PartialFourier_0018_9081)));
  SWIG_Python_SetConstant(d, "tagId_t_EffectiveEchoTime_0018_9082",SWIG_From_int(static_cast< int >(imebra::tagId_t::EffectiveEchoTime_0018_9082)));
  SWIG_Python_SetConstant(d, "tagId_t_MetaboliteMapCodeSequence_0018_9083",SWIG_From_int(static_cast< int >(imebra::tagId_t::MetaboliteMapCodeSequence_0018_9083)));
  SWIG_Python_SetConstant(d, "tagId_t_ChemicalShiftSequence_0018_9084",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChemicalShiftSequence_0018_9084)));
  SWIG_Python_SetConstant(d, "tagId_t_CardiacSignalSource_0018_9085",SWIG_From_int(static_cast< int >(imebra::tagId_t::CardiacSignalSource_0018_9085)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionBValue_0018_9087",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionBValue_0018_9087)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionGradientOrientation_0018_9089",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionGradientOrientation_0018_9089)));
  SWIG_Python_SetConstant(d, "tagId_t_VelocityEncodingDirection_0018_9090",SWIG_From_int(static_cast< int >(imebra::tagId_t::VelocityEncodingDirection_0018_9090)));
  SWIG_Python_SetConstant(d, "tagId_t_VelocityEncodingMinimumValue_0018_9091",SWIG_From_int(static_cast< int >(imebra::tagId_t::VelocityEncodingMinimumValue_0018_9091)));
  SWIG_Python_SetConstant(d, "tagId_t_VelocityEncodingAcquisitionSequence_0018_9092",SWIG_From_int(static_cast< int >(imebra::tagId_t::VelocityEncodingAcquisitionSequence_0018_9092)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfKSpaceTrajectories_0018_9093",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfKSpaceTrajectories_0018_9093)));
  SWIG_Python_SetConstant(d, "tagId_t_CoverageOfKSpace_0018_9094",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoverageOfKSpace_0018_9094)));
  SWIG_Python_SetConstant(d, "tagId_t_SpectroscopyAcquisitionPhaseRows_0018_9095",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpectroscopyAcquisitionPhaseRows_0018_9095)));
  SWIG_Python_SetConstant(d, "tagId_t_ParallelReductionFactorInPlaneRetired_0018_9096",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParallelReductionFactorInPlaneRetired_0018_9096)));
  SWIG_Python_SetConstant(d, "tagId_t_TransmitterFrequency_0018_9098",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransmitterFrequency_0018_9098)));
  SWIG_Python_SetConstant(d, "tagId_t_ResonantNucleus_0018_9100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResonantNucleus_0018_9100)));
  SWIG_Python_SetConstant(d, "tagId_t_FrequencyCorrection_0018_9101",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrequencyCorrection_0018_9101)));
  SWIG_Python_SetConstant(d, "tagId_t_MRSpectroscopyFOVGeometrySequence_0018_9103",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRSpectroscopyFOVGeometrySequence_0018_9103)));
  SWIG_Python_SetConstant(d, "tagId_t_SlabThickness_0018_9104",SWIG_From_int(static_cast< int >(imebra::tagId_t::SlabThickness_0018_9104)));
  SWIG_Python_SetConstant(d, "tagId_t_SlabOrientation_0018_9105",SWIG_From_int(static_cast< int >(imebra::tagId_t::SlabOrientation_0018_9105)));
  SWIG_Python_SetConstant(d, "tagId_t_MidSlabPosition_0018_9106",SWIG_From_int(static_cast< int >(imebra::tagId_t::MidSlabPosition_0018_9106)));
  SWIG_Python_SetConstant(d, "tagId_t_MRSpatialSaturationSequence_0018_9107",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRSpatialSaturationSequence_0018_9107)));
  SWIG_Python_SetConstant(d, "tagId_t_MRTimingAndRelatedParametersSequence_0018_9112",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRTimingAndRelatedParametersSequence_0018_9112)));
  SWIG_Python_SetConstant(d, "tagId_t_MREchoSequence_0018_9114",SWIG_From_int(static_cast< int >(imebra::tagId_t::MREchoSequence_0018_9114)));
  SWIG_Python_SetConstant(d, "tagId_t_MRModifierSequence_0018_9115",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRModifierSequence_0018_9115)));
  SWIG_Python_SetConstant(d, "tagId_t_MRDiffusionSequence_0018_9117",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRDiffusionSequence_0018_9117)));
  SWIG_Python_SetConstant(d, "tagId_t_CardiacSynchronizationSequence_0018_9118",SWIG_From_int(static_cast< int >(imebra::tagId_t::CardiacSynchronizationSequence_0018_9118)));
  SWIG_Python_SetConstant(d, "tagId_t_MRAveragesSequence_0018_9119",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRAveragesSequence_0018_9119)));
  SWIG_Python_SetConstant(d, "tagId_t_MRFOVGeometrySequence_0018_9125",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRFOVGeometrySequence_0018_9125)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeLocalizationSequence_0018_9126",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeLocalizationSequence_0018_9126)));
  SWIG_Python_SetConstant(d, "tagId_t_SpectroscopyAcquisitionDataColumns_0018_9127",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpectroscopyAcquisitionDataColumns_0018_9127)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionAnisotropyType_0018_9147",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionAnisotropyType_0018_9147)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameReferenceDateTime_0018_9151",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameReferenceDateTime_0018_9151)));
  SWIG_Python_SetConstant(d, "tagId_t_MRMetaboliteMapSequence_0018_9152",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRMetaboliteMapSequence_0018_9152)));
  SWIG_Python_SetConstant(d, "tagId_t_ParallelReductionFactorOutOfPlane_0018_9155",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParallelReductionFactorOutOfPlane_0018_9155)));
  SWIG_Python_SetConstant(d, "tagId_t_SpectroscopyAcquisitionOutOfPlanePhaseSteps_0018_9159",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpectroscopyAcquisitionOutOfPlanePhaseSteps_0018_9159)));
  SWIG_Python_SetConstant(d, "tagId_t_BulkMotionStatus_0018_9166",SWIG_From_int(static_cast< int >(imebra::tagId_t::BulkMotionStatus_0018_9166)));
  SWIG_Python_SetConstant(d, "tagId_t_ParallelReductionFactorSecondInPlane_0018_9168",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParallelReductionFactorSecondInPlane_0018_9168)));
  SWIG_Python_SetConstant(d, "tagId_t_CardiacBeatRejectionTechnique_0018_9169",SWIG_From_int(static_cast< int >(imebra::tagId_t::CardiacBeatRejectionTechnique_0018_9169)));
  SWIG_Python_SetConstant(d, "tagId_t_RespiratoryMotionCompensationTechnique_0018_9170",SWIG_From_int(static_cast< int >(imebra::tagId_t::RespiratoryMotionCompensationTechnique_0018_9170)));
  SWIG_Python_SetConstant(d, "tagId_t_RespiratorySignalSource_0018_9171",SWIG_From_int(static_cast< int >(imebra::tagId_t::RespiratorySignalSource_0018_9171)));
  SWIG_Python_SetConstant(d, "tagId_t_BulkMotionCompensationTechnique_0018_9172",SWIG_From_int(static_cast< int >(imebra::tagId_t::BulkMotionCompensationTechnique_0018_9172)));
  SWIG_Python_SetConstant(d, "tagId_t_BulkMotionSignalSource_0018_9173",SWIG_From_int(static_cast< int >(imebra::tagId_t::BulkMotionSignalSource_0018_9173)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicableSafetyStandardAgency_0018_9174",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicableSafetyStandardAgency_0018_9174)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicableSafetyStandardDescription_0018_9175",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicableSafetyStandardDescription_0018_9175)));
  SWIG_Python_SetConstant(d, "tagId_t_OperatingModeSequence_0018_9176",SWIG_From_int(static_cast< int >(imebra::tagId_t::OperatingModeSequence_0018_9176)));
  SWIG_Python_SetConstant(d, "tagId_t_OperatingModeType_0018_9177",SWIG_From_int(static_cast< int >(imebra::tagId_t::OperatingModeType_0018_9177)));
  SWIG_Python_SetConstant(d, "tagId_t_OperatingMode_0018_9178",SWIG_From_int(static_cast< int >(imebra::tagId_t::OperatingMode_0018_9178)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecificAbsorptionRateDefinition_0018_9179",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecificAbsorptionRateDefinition_0018_9179)));
  SWIG_Python_SetConstant(d, "tagId_t_GradientOutputType_0018_9180",SWIG_From_int(static_cast< int >(imebra::tagId_t::GradientOutputType_0018_9180)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecificAbsorptionRateValue_0018_9181",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecificAbsorptionRateValue_0018_9181)));
  SWIG_Python_SetConstant(d, "tagId_t_GradientOutput_0018_9182",SWIG_From_int(static_cast< int >(imebra::tagId_t::GradientOutput_0018_9182)));
  SWIG_Python_SetConstant(d, "tagId_t_FlowCompensationDirection_0018_9183",SWIG_From_int(static_cast< int >(imebra::tagId_t::FlowCompensationDirection_0018_9183)));
  SWIG_Python_SetConstant(d, "tagId_t_TaggingDelay_0018_9184",SWIG_From_int(static_cast< int >(imebra::tagId_t::TaggingDelay_0018_9184)));
  SWIG_Python_SetConstant(d, "tagId_t_RespiratoryMotionCompensationTechniqueDescription_0018_9185",SWIG_From_int(static_cast< int >(imebra::tagId_t::RespiratoryMotionCompensationTechniqueDescription_0018_9185)));
  SWIG_Python_SetConstant(d, "tagId_t_RespiratorySignalSourceID_0018_9186",SWIG_From_int(static_cast< int >(imebra::tagId_t::RespiratorySignalSourceID_0018_9186)));
  SWIG_Python_SetConstant(d, "tagId_t_ChemicalShiftMinimumIntegrationLimitInHz_0018_9195",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChemicalShiftMinimumIntegrationLimitInHz_0018_9195)));
  SWIG_Python_SetConstant(d, "tagId_t_ChemicalShiftMaximumIntegrationLimitInHz_0018_9196",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChemicalShiftMaximumIntegrationLimitInHz_0018_9196)));
  SWIG_Python_SetConstant(d, "tagId_t_MRVelocityEncodingSequence_0018_9197",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRVelocityEncodingSequence_0018_9197)));
  SWIG_Python_SetConstant(d, "tagId_t_FirstOrderPhaseCorrection_0018_9198",SWIG_From_int(static_cast< int >(imebra::tagId_t::FirstOrderPhaseCorrection_0018_9198)));
  SWIG_Python_SetConstant(d, "tagId_t_WaterReferencedPhaseCorrection_0018_9199",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaterReferencedPhaseCorrection_0018_9199)));
  SWIG_Python_SetConstant(d, "tagId_t_MRSpectroscopyAcquisitionType_0018_9200",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRSpectroscopyAcquisitionType_0018_9200)));
  SWIG_Python_SetConstant(d, "tagId_t_RespiratoryCyclePosition_0018_9214",SWIG_From_int(static_cast< int >(imebra::tagId_t::RespiratoryCyclePosition_0018_9214)));
  SWIG_Python_SetConstant(d, "tagId_t_VelocityEncodingMaximumValue_0018_9217",SWIG_From_int(static_cast< int >(imebra::tagId_t::VelocityEncodingMaximumValue_0018_9217)));
  SWIG_Python_SetConstant(d, "tagId_t_TagSpacingSecondDimension_0018_9218",SWIG_From_int(static_cast< int >(imebra::tagId_t::TagSpacingSecondDimension_0018_9218)));
  SWIG_Python_SetConstant(d, "tagId_t_TagAngleSecondAxis_0018_9219",SWIG_From_int(static_cast< int >(imebra::tagId_t::TagAngleSecondAxis_0018_9219)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameAcquisitionDuration_0018_9220",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameAcquisitionDuration_0018_9220)));
  SWIG_Python_SetConstant(d, "tagId_t_MRImageFrameTypeSequence_0018_9226",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRImageFrameTypeSequence_0018_9226)));
  SWIG_Python_SetConstant(d, "tagId_t_MRSpectroscopyFrameTypeSequence_0018_9227",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRSpectroscopyFrameTypeSequence_0018_9227)));
  SWIG_Python_SetConstant(d, "tagId_t_MRAcquisitionPhaseEncodingStepsInPlane_0018_9231",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRAcquisitionPhaseEncodingStepsInPlane_0018_9231)));
  SWIG_Python_SetConstant(d, "tagId_t_MRAcquisitionPhaseEncodingStepsOutOfPlane_0018_9232",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRAcquisitionPhaseEncodingStepsOutOfPlane_0018_9232)));
  SWIG_Python_SetConstant(d, "tagId_t_SpectroscopyAcquisitionPhaseColumns_0018_9234",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpectroscopyAcquisitionPhaseColumns_0018_9234)));
  SWIG_Python_SetConstant(d, "tagId_t_CardiacCyclePosition_0018_9236",SWIG_From_int(static_cast< int >(imebra::tagId_t::CardiacCyclePosition_0018_9236)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecificAbsorptionRateSequence_0018_9239",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecificAbsorptionRateSequence_0018_9239)));
  SWIG_Python_SetConstant(d, "tagId_t_RFEchoTrainLength_0018_9240",SWIG_From_int(static_cast< int >(imebra::tagId_t::RFEchoTrainLength_0018_9240)));
  SWIG_Python_SetConstant(d, "tagId_t_GradientEchoTrainLength_0018_9241",SWIG_From_int(static_cast< int >(imebra::tagId_t::GradientEchoTrainLength_0018_9241)));
  SWIG_Python_SetConstant(d, "tagId_t_ArterialSpinLabelingContrast_0018_9250",SWIG_From_int(static_cast< int >(imebra::tagId_t::ArterialSpinLabelingContrast_0018_9250)));
  SWIG_Python_SetConstant(d, "tagId_t_MRArterialSpinLabelingSequence_0018_9251",SWIG_From_int(static_cast< int >(imebra::tagId_t::MRArterialSpinLabelingSequence_0018_9251)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLTechniqueDescription_0018_9252",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLTechniqueDescription_0018_9252)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLSlabNumber_0018_9253",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLSlabNumber_0018_9253)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLSlabThickness_0018_9254",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLSlabThickness_0018_9254)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLSlabOrientation_0018_9255",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLSlabOrientation_0018_9255)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLMidSlabPosition_0018_9256",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLMidSlabPosition_0018_9256)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLContext_0018_9257",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLContext_0018_9257)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLPulseTrainDuration_0018_9258",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLPulseTrainDuration_0018_9258)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLCrusherFlag_0018_9259",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLCrusherFlag_0018_9259)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLCrusherFlowLimit_0018_925A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLCrusherFlowLimit_0018_925A)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLCrusherDescription_0018_925B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLCrusherDescription_0018_925B)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLBolusCutoffFlag_0018_925C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLBolusCutoffFlag_0018_925C)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLBolusCutoffTimingSequence_0018_925D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLBolusCutoffTimingSequence_0018_925D)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLBolusCutoffTechnique_0018_925E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLBolusCutoffTechnique_0018_925E)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLBolusCutoffDelayTime_0018_925F",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLBolusCutoffDelayTime_0018_925F)));
  SWIG_Python_SetConstant(d, "tagId_t_ASLSlabSequence_0018_9260",SWIG_From_int(static_cast< int >(imebra::tagId_t::ASLSlabSequence_0018_9260)));
  SWIG_Python_SetConstant(d, "tagId_t_ChemicalShiftMinimumIntegrationLimitInppm_0018_9295",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChemicalShiftMinimumIntegrationLimitInppm_0018_9295)));
  SWIG_Python_SetConstant(d, "tagId_t_ChemicalShiftMaximumIntegrationLimitInppm_0018_9296",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChemicalShiftMaximumIntegrationLimitInppm_0018_9296)));
  SWIG_Python_SetConstant(d, "tagId_t_WaterReferenceAcquisition_0018_9297",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaterReferenceAcquisition_0018_9297)));
  SWIG_Python_SetConstant(d, "tagId_t_EchoPeakPosition_0018_9298",SWIG_From_int(static_cast< int >(imebra::tagId_t::EchoPeakPosition_0018_9298)));
  SWIG_Python_SetConstant(d, "tagId_t_CTAcquisitionTypeSequence_0018_9301",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTAcquisitionTypeSequence_0018_9301)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionType_0018_9302",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionType_0018_9302)));
  SWIG_Python_SetConstant(d, "tagId_t_TubeAngle_0018_9303",SWIG_From_int(static_cast< int >(imebra::tagId_t::TubeAngle_0018_9303)));
  SWIG_Python_SetConstant(d, "tagId_t_CTAcquisitionDetailsSequence_0018_9304",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTAcquisitionDetailsSequence_0018_9304)));
  SWIG_Python_SetConstant(d, "tagId_t_RevolutionTime_0018_9305",SWIG_From_int(static_cast< int >(imebra::tagId_t::RevolutionTime_0018_9305)));
  SWIG_Python_SetConstant(d, "tagId_t_SingleCollimationWidth_0018_9306",SWIG_From_int(static_cast< int >(imebra::tagId_t::SingleCollimationWidth_0018_9306)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalCollimationWidth_0018_9307",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalCollimationWidth_0018_9307)));
  SWIG_Python_SetConstant(d, "tagId_t_CTTableDynamicsSequence_0018_9308",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTTableDynamicsSequence_0018_9308)));
  SWIG_Python_SetConstant(d, "tagId_t_TableSpeed_0018_9309",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableSpeed_0018_9309)));
  SWIG_Python_SetConstant(d, "tagId_t_TableFeedPerRotation_0018_9310",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableFeedPerRotation_0018_9310)));
  SWIG_Python_SetConstant(d, "tagId_t_SpiralPitchFactor_0018_9311",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpiralPitchFactor_0018_9311)));
  SWIG_Python_SetConstant(d, "tagId_t_CTGeometrySequence_0018_9312",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTGeometrySequence_0018_9312)));
  SWIG_Python_SetConstant(d, "tagId_t_DataCollectionCenterPatient_0018_9313",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataCollectionCenterPatient_0018_9313)));
  SWIG_Python_SetConstant(d, "tagId_t_CTReconstructionSequence_0018_9314",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTReconstructionSequence_0018_9314)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionAlgorithm_0018_9315",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionAlgorithm_0018_9315)));
  SWIG_Python_SetConstant(d, "tagId_t_ConvolutionKernelGroup_0018_9316",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConvolutionKernelGroup_0018_9316)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionFieldOfView_0018_9317",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionFieldOfView_0018_9317)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionTargetCenterPatient_0018_9318",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionTargetCenterPatient_0018_9318)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionAngle_0018_9319",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionAngle_0018_9319)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageFilter_0018_9320",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageFilter_0018_9320)));
  SWIG_Python_SetConstant(d, "tagId_t_CTExposureSequence_0018_9321",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTExposureSequence_0018_9321)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionPixelSpacing_0018_9322",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionPixelSpacing_0018_9322)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureModulationType_0018_9323",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureModulationType_0018_9323)));
  SWIG_Python_SetConstant(d, "tagId_t_EstimatedDoseSaving_0018_9324",SWIG_From_int(static_cast< int >(imebra::tagId_t::EstimatedDoseSaving_0018_9324)));
  SWIG_Python_SetConstant(d, "tagId_t_CTXRayDetailsSequence_0018_9325",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTXRayDetailsSequence_0018_9325)));
  SWIG_Python_SetConstant(d, "tagId_t_CTPositionSequence_0018_9326",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTPositionSequence_0018_9326)));
  SWIG_Python_SetConstant(d, "tagId_t_TablePosition_0018_9327",SWIG_From_int(static_cast< int >(imebra::tagId_t::TablePosition_0018_9327)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureTimeInms_0018_9328",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureTimeInms_0018_9328)));
  SWIG_Python_SetConstant(d, "tagId_t_CTImageFrameTypeSequence_0018_9329",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTImageFrameTypeSequence_0018_9329)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayTubeCurrentInmA_0018_9330",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayTubeCurrentInmA_0018_9330)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureInmAs_0018_9332",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureInmAs_0018_9332)));
  SWIG_Python_SetConstant(d, "tagId_t_ConstantVolumeFlag_0018_9333",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConstantVolumeFlag_0018_9333)));
  SWIG_Python_SetConstant(d, "tagId_t_FluoroscopyFlag_0018_9334",SWIG_From_int(static_cast< int >(imebra::tagId_t::FluoroscopyFlag_0018_9334)));
  SWIG_Python_SetConstant(d, "tagId_t_DistanceSourceToDataCollectionCenter_0018_9335",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistanceSourceToDataCollectionCenter_0018_9335)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusAgentNumber_0018_9337",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusAgentNumber_0018_9337)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusIngredientCodeSequence_0018_9338",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusIngredientCodeSequence_0018_9338)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastAdministrationProfileSequence_0018_9340",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastAdministrationProfileSequence_0018_9340)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusUsageSequence_0018_9341",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusUsageSequence_0018_9341)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusAgentAdministered_0018_9342",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusAgentAdministered_0018_9342)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusAgentDetected_0018_9343",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusAgentDetected_0018_9343)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusAgentPhase_0018_9344",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusAgentPhase_0018_9344)));
  SWIG_Python_SetConstant(d, "tagId_t_CTDIvol_0018_9345",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTDIvol_0018_9345)));
  SWIG_Python_SetConstant(d, "tagId_t_CTDIPhantomTypeCodeSequence_0018_9346",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTDIPhantomTypeCodeSequence_0018_9346)));
  SWIG_Python_SetConstant(d, "tagId_t_CalciumScoringMassFactorPatient_0018_9351",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalciumScoringMassFactorPatient_0018_9351)));
  SWIG_Python_SetConstant(d, "tagId_t_CalciumScoringMassFactorDevice_0018_9352",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalciumScoringMassFactorDevice_0018_9352)));
  SWIG_Python_SetConstant(d, "tagId_t_EnergyWeightingFactor_0018_9353",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnergyWeightingFactor_0018_9353)));
  SWIG_Python_SetConstant(d, "tagId_t_CTAdditionalXRaySourceSequence_0018_9360",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTAdditionalXRaySourceSequence_0018_9360)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergyCTAcquisition_0018_9361",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergyCTAcquisition_0018_9361)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergyCTAcquisitionSequence_0018_9362",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergyCTAcquisitionSequence_0018_9362)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergyCTProcessingSequence_0018_9363",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergyCTProcessingSequence_0018_9363)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergyCTCharacteristicsSequence_0018_9364",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergyCTCharacteristicsSequence_0018_9364)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergyCTXRaySourceSequence_0018_9365",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergyCTXRaySourceSequence_0018_9365)));
  SWIG_Python_SetConstant(d, "tagId_t_XRaySourceIndex_0018_9366",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRaySourceIndex_0018_9366)));
  SWIG_Python_SetConstant(d, "tagId_t_XRaySourceID_0018_9367",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRaySourceID_0018_9367)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergySourceTechnique_0018_9368",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergySourceTechnique_0018_9368)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceStartDateTime_0018_9369",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceStartDateTime_0018_9369)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceEndDateTime_0018_936A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceEndDateTime_0018_936A)));
  SWIG_Python_SetConstant(d, "tagId_t_SwitchingPhaseNumber_0018_936B",SWIG_From_int(static_cast< int >(imebra::tagId_t::SwitchingPhaseNumber_0018_936B)));
  SWIG_Python_SetConstant(d, "tagId_t_SwitchingPhaseNominalDuration_0018_936C",SWIG_From_int(static_cast< int >(imebra::tagId_t::SwitchingPhaseNominalDuration_0018_936C)));
  SWIG_Python_SetConstant(d, "tagId_t_SwitchingPhaseTransitionDuration_0018_936D",SWIG_From_int(static_cast< int >(imebra::tagId_t::SwitchingPhaseTransitionDuration_0018_936D)));
  SWIG_Python_SetConstant(d, "tagId_t_EffectiveBinEnergy_0018_936E",SWIG_From_int(static_cast< int >(imebra::tagId_t::EffectiveBinEnergy_0018_936E)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergyCTXRayDetectorSequence_0018_936F",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergyCTXRayDetectorSequence_0018_936F)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayDetectorIndex_0018_9370",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayDetectorIndex_0018_9370)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayDetectorID_0018_9371",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayDetectorID_0018_9371)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergyDetectorType_0018_9372",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergyDetectorType_0018_9372)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayDetectorLabel_0018_9373",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayDetectorLabel_0018_9373)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalMaxEnergy_0018_9374",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalMaxEnergy_0018_9374)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalMinEnergy_0018_9375",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalMinEnergy_0018_9375)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedXRayDetectorIndex_0018_9376",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedXRayDetectorIndex_0018_9376)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedXRaySourceIndex_0018_9377",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedXRaySourceIndex_0018_9377)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPathIndex_0018_9378",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPathIndex_0018_9378)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergyCTPathSequence_0018_9379",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergyCTPathSequence_0018_9379)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergyCTPathIndex_0018_937A",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergyCTPathIndex_0018_937A)));
  SWIG_Python_SetConstant(d, "tagId_t_MultienergyAcquisitionDescription_0018_937B",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultienergyAcquisitionDescription_0018_937B)));
  SWIG_Python_SetConstant(d, "tagId_t_MonoenergeticEnergyEquivalent_0018_937C",SWIG_From_int(static_cast< int >(imebra::tagId_t::MonoenergeticEnergyEquivalent_0018_937C)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialCodeSequence_0018_937D",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialCodeSequence_0018_937D)));
  SWIG_Python_SetConstant(d, "tagId_t_DecompositionMethod_0018_937E",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecompositionMethod_0018_937E)));
  SWIG_Python_SetConstant(d, "tagId_t_DecompositionDescription_0018_937F",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecompositionDescription_0018_937F)));
  SWIG_Python_SetConstant(d, "tagId_t_DecompositionAlgorithmIdentificationSequence_0018_9380",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecompositionAlgorithmIdentificationSequence_0018_9380)));
  SWIG_Python_SetConstant(d, "tagId_t_DecompositionMaterialSequence_0018_9381",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecompositionMaterialSequence_0018_9381)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialAttenuationSequence_0018_9382",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialAttenuationSequence_0018_9382)));
  SWIG_Python_SetConstant(d, "tagId_t_PhotonEnergy_0018_9383",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhotonEnergy_0018_9383)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayMassAttenuationCoefficient_0018_9384",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayMassAttenuationCoefficient_0018_9384)));
  SWIG_Python_SetConstant(d, "tagId_t_ProjectionPixelCalibrationSequence_0018_9401",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProjectionPixelCalibrationSequence_0018_9401)));
  SWIG_Python_SetConstant(d, "tagId_t_DistanceSourceToIsocenter_0018_9402",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistanceSourceToIsocenter_0018_9402)));
  SWIG_Python_SetConstant(d, "tagId_t_DistanceObjectToTableTop_0018_9403",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistanceObjectToTableTop_0018_9403)));
  SWIG_Python_SetConstant(d, "tagId_t_ObjectPixelSpacingInCenterOfBeam_0018_9404",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObjectPixelSpacingInCenterOfBeam_0018_9404)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerPositionSequence_0018_9405",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerPositionSequence_0018_9405)));
  SWIG_Python_SetConstant(d, "tagId_t_TablePositionSequence_0018_9406",SWIG_From_int(static_cast< int >(imebra::tagId_t::TablePositionSequence_0018_9406)));
  SWIG_Python_SetConstant(d, "tagId_t_CollimatorShapeSequence_0018_9407",SWIG_From_int(static_cast< int >(imebra::tagId_t::CollimatorShapeSequence_0018_9407)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanesInAcquisition_0018_9410",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanesInAcquisition_0018_9410)));
  SWIG_Python_SetConstant(d, "tagId_t_XAXRFFrameCharacteristicsSequence_0018_9412",SWIG_From_int(static_cast< int >(imebra::tagId_t::XAXRFFrameCharacteristicsSequence_0018_9412)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameAcquisitionSequence_0018_9417",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameAcquisitionSequence_0018_9417)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayReceptorType_0018_9420",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayReceptorType_0018_9420)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionProtocolName_0018_9423",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionProtocolName_0018_9423)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionProtocolDescription_0018_9424",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionProtocolDescription_0018_9424)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusIngredientOpaque_0018_9425",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusIngredientOpaque_0018_9425)));
  SWIG_Python_SetConstant(d, "tagId_t_DistanceReceptorPlaneToDetectorHousing_0018_9426",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistanceReceptorPlaneToDetectorHousing_0018_9426)));
  SWIG_Python_SetConstant(d, "tagId_t_IntensifierActiveShape_0018_9427",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntensifierActiveShape_0018_9427)));
  SWIG_Python_SetConstant(d, "tagId_t_IntensifierActiveDimensions_0018_9428",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntensifierActiveDimensions_0018_9428)));
  SWIG_Python_SetConstant(d, "tagId_t_PhysicalDetectorSize_0018_9429",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhysicalDetectorSize_0018_9429)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionOfIsocenterProjection_0018_9430",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionOfIsocenterProjection_0018_9430)));
  SWIG_Python_SetConstant(d, "tagId_t_FieldOfViewSequence_0018_9432",SWIG_From_int(static_cast< int >(imebra::tagId_t::FieldOfViewSequence_0018_9432)));
  SWIG_Python_SetConstant(d, "tagId_t_FieldOfViewDescription_0018_9433",SWIG_From_int(static_cast< int >(imebra::tagId_t::FieldOfViewDescription_0018_9433)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureControlSensingRegionsSequence_0018_9434",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureControlSensingRegionsSequence_0018_9434)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureControlSensingRegionShape_0018_9435",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureControlSensingRegionShape_0018_9435)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureControlSensingRegionLeftVerticalEdge_0018_9436",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureControlSensingRegionLeftVerticalEdge_0018_9436)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureControlSensingRegionRightVerticalEdge_0018_9437",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureControlSensingRegionRightVerticalEdge_0018_9437)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureControlSensingRegionUpperHorizontalEdge_0018_9438",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureControlSensingRegionUpperHorizontalEdge_0018_9438)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureControlSensingRegionLowerHorizontalEdge_0018_9439",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureControlSensingRegionLowerHorizontalEdge_0018_9439)));
  SWIG_Python_SetConstant(d, "tagId_t_CenterOfCircularExposureControlSensingRegion_0018_9440",SWIG_From_int(static_cast< int >(imebra::tagId_t::CenterOfCircularExposureControlSensingRegion_0018_9440)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiusOfCircularExposureControlSensingRegion_0018_9441",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiusOfCircularExposureControlSensingRegion_0018_9441)));
  SWIG_Python_SetConstant(d, "tagId_t_VerticesOfThePolygonalExposureControlSensingRegion_0018_9442",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerticesOfThePolygonalExposureControlSensingRegion_0018_9442)));
  SWIG_Python_SetConstant(d, "tagId_t_ColumnAngulationPatient_0018_9447",SWIG_From_int(static_cast< int >(imebra::tagId_t::ColumnAngulationPatient_0018_9447)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamAngle_0018_9449",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamAngle_0018_9449)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameDetectorParametersSequence_0018_9451",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameDetectorParametersSequence_0018_9451)));
  SWIG_Python_SetConstant(d, "tagId_t_CalculatedAnatomyThickness_0018_9452",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalculatedAnatomyThickness_0018_9452)));
  SWIG_Python_SetConstant(d, "tagId_t_CalibrationSequence_0018_9455",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalibrationSequence_0018_9455)));
  SWIG_Python_SetConstant(d, "tagId_t_ObjectThicknessSequence_0018_9456",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObjectThicknessSequence_0018_9456)));
  SWIG_Python_SetConstant(d, "tagId_t_PlaneIdentification_0018_9457",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlaneIdentification_0018_9457)));
  SWIG_Python_SetConstant(d, "tagId_t_FieldOfViewDimensionsInFloat_0018_9461",SWIG_From_int(static_cast< int >(imebra::tagId_t::FieldOfViewDimensionsInFloat_0018_9461)));
  SWIG_Python_SetConstant(d, "tagId_t_IsocenterReferenceSystemSequence_0018_9462",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsocenterReferenceSystemSequence_0018_9462)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerIsocenterPrimaryAngle_0018_9463",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerIsocenterPrimaryAngle_0018_9463)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerIsocenterSecondaryAngle_0018_9464",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerIsocenterSecondaryAngle_0018_9464)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerIsocenterDetectorRotationAngle_0018_9465",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerIsocenterDetectorRotationAngle_0018_9465)));
  SWIG_Python_SetConstant(d, "tagId_t_TableXPositionToIsocenter_0018_9466",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableXPositionToIsocenter_0018_9466)));
  SWIG_Python_SetConstant(d, "tagId_t_TableYPositionToIsocenter_0018_9467",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableYPositionToIsocenter_0018_9467)));
  SWIG_Python_SetConstant(d, "tagId_t_TableZPositionToIsocenter_0018_9468",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableZPositionToIsocenter_0018_9468)));
  SWIG_Python_SetConstant(d, "tagId_t_TableHorizontalRotationAngle_0018_9469",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableHorizontalRotationAngle_0018_9469)));
  SWIG_Python_SetConstant(d, "tagId_t_TableHeadTiltAngle_0018_9470",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableHeadTiltAngle_0018_9470)));
  SWIG_Python_SetConstant(d, "tagId_t_TableCradleTiltAngle_0018_9471",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableCradleTiltAngle_0018_9471)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameDisplayShutterSequence_0018_9472",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameDisplayShutterSequence_0018_9472)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquiredImageAreaDoseProduct_0018_9473",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquiredImageAreaDoseProduct_0018_9473)));
  SWIG_Python_SetConstant(d, "tagId_t_CArmPositionerTabletopRelationship_0018_9474",SWIG_From_int(static_cast< int >(imebra::tagId_t::CArmPositionerTabletopRelationship_0018_9474)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayGeometrySequence_0018_9476",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayGeometrySequence_0018_9476)));
  SWIG_Python_SetConstant(d, "tagId_t_IrradiationEventIdentificationSequence_0018_9477",SWIG_From_int(static_cast< int >(imebra::tagId_t::IrradiationEventIdentificationSequence_0018_9477)));
  SWIG_Python_SetConstant(d, "tagId_t_XRay3DFrameTypeSequence_0018_9504",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRay3DFrameTypeSequence_0018_9504)));
  SWIG_Python_SetConstant(d, "tagId_t_ContributingSourcesSequence_0018_9506",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContributingSourcesSequence_0018_9506)));
  SWIG_Python_SetConstant(d, "tagId_t_XRay3DAcquisitionSequence_0018_9507",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRay3DAcquisitionSequence_0018_9507)));
  SWIG_Python_SetConstant(d, "tagId_t_PrimaryPositionerScanArc_0018_9508",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrimaryPositionerScanArc_0018_9508)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryPositionerScanArc_0018_9509",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryPositionerScanArc_0018_9509)));
  SWIG_Python_SetConstant(d, "tagId_t_PrimaryPositionerScanStartAngle_0018_9510",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrimaryPositionerScanStartAngle_0018_9510)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryPositionerScanStartAngle_0018_9511",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryPositionerScanStartAngle_0018_9511)));
  SWIG_Python_SetConstant(d, "tagId_t_PrimaryPositionerIncrement_0018_9514",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrimaryPositionerIncrement_0018_9514)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryPositionerIncrement_0018_9515",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryPositionerIncrement_0018_9515)));
  SWIG_Python_SetConstant(d, "tagId_t_StartAcquisitionDateTime_0018_9516",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartAcquisitionDateTime_0018_9516)));
  SWIG_Python_SetConstant(d, "tagId_t_EndAcquisitionDateTime_0018_9517",SWIG_From_int(static_cast< int >(imebra::tagId_t::EndAcquisitionDateTime_0018_9517)));
  SWIG_Python_SetConstant(d, "tagId_t_PrimaryPositionerIncrementSign_0018_9518",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrimaryPositionerIncrementSign_0018_9518)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryPositionerIncrementSign_0018_9519",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryPositionerIncrementSign_0018_9519)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicationName_0018_9524",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicationName_0018_9524)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicationVersion_0018_9525",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicationVersion_0018_9525)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicationManufacturer_0018_9526",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicationManufacturer_0018_9526)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmType_0018_9527",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmType_0018_9527)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmDescription_0018_9528",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmDescription_0018_9528)));
  SWIG_Python_SetConstant(d, "tagId_t_XRay3DReconstructionSequence_0018_9530",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRay3DReconstructionSequence_0018_9530)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionDescription_0018_9531",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionDescription_0018_9531)));
  SWIG_Python_SetConstant(d, "tagId_t_PerProjectionAcquisitionSequence_0018_9538",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerProjectionAcquisitionSequence_0018_9538)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorPositionSequence_0018_9541",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorPositionSequence_0018_9541)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayAcquisitionDoseSequence_0018_9542",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayAcquisitionDoseSequence_0018_9542)));
  SWIG_Python_SetConstant(d, "tagId_t_XRaySourceIsocenterPrimaryAngle_0018_9543",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRaySourceIsocenterPrimaryAngle_0018_9543)));
  SWIG_Python_SetConstant(d, "tagId_t_XRaySourceIsocenterSecondaryAngle_0018_9544",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRaySourceIsocenterSecondaryAngle_0018_9544)));
  SWIG_Python_SetConstant(d, "tagId_t_BreastSupportIsocenterPrimaryAngle_0018_9545",SWIG_From_int(static_cast< int >(imebra::tagId_t::BreastSupportIsocenterPrimaryAngle_0018_9545)));
  SWIG_Python_SetConstant(d, "tagId_t_BreastSupportIsocenterSecondaryAngle_0018_9546",SWIG_From_int(static_cast< int >(imebra::tagId_t::BreastSupportIsocenterSecondaryAngle_0018_9546)));
  SWIG_Python_SetConstant(d, "tagId_t_BreastSupportXPositionToIsocenter_0018_9547",SWIG_From_int(static_cast< int >(imebra::tagId_t::BreastSupportXPositionToIsocenter_0018_9547)));
  SWIG_Python_SetConstant(d, "tagId_t_BreastSupportYPositionToIsocenter_0018_9548",SWIG_From_int(static_cast< int >(imebra::tagId_t::BreastSupportYPositionToIsocenter_0018_9548)));
  SWIG_Python_SetConstant(d, "tagId_t_BreastSupportZPositionToIsocenter_0018_9549",SWIG_From_int(static_cast< int >(imebra::tagId_t::BreastSupportZPositionToIsocenter_0018_9549)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorIsocenterPrimaryAngle_0018_9550",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorIsocenterPrimaryAngle_0018_9550)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorIsocenterSecondaryAngle_0018_9551",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorIsocenterSecondaryAngle_0018_9551)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorXPositionToIsocenter_0018_9552",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorXPositionToIsocenter_0018_9552)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorYPositionToIsocenter_0018_9553",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorYPositionToIsocenter_0018_9553)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorZPositionToIsocenter_0018_9554",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorZPositionToIsocenter_0018_9554)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayGridSequence_0018_9555",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayGridSequence_0018_9555)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayFilterSequence_0018_9556",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayFilterSequence_0018_9556)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorActiveAreaTLHCPosition_0018_9557",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorActiveAreaTLHCPosition_0018_9557)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorActiveAreaOrientation_0018_9558",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorActiveAreaOrientation_0018_9558)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionerPrimaryAngleDirection_0018_9559",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionerPrimaryAngleDirection_0018_9559)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionBMatrixSequence_0018_9601",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionBMatrixSequence_0018_9601)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionBValueXX_0018_9602",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionBValueXX_0018_9602)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionBValueXY_0018_9603",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionBValueXY_0018_9603)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionBValueXZ_0018_9604",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionBValueXZ_0018_9604)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionBValueYY_0018_9605",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionBValueYY_0018_9605)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionBValueYZ_0018_9606",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionBValueYZ_0018_9606)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionBValueZZ_0018_9607",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionBValueZZ_0018_9607)));
  SWIG_Python_SetConstant(d, "tagId_t_FunctionalMRSequence_0018_9621",SWIG_From_int(static_cast< int >(imebra::tagId_t::FunctionalMRSequence_0018_9621)));
  SWIG_Python_SetConstant(d, "tagId_t_FunctionalSettlingPhaseFramesPresent_0018_9622",SWIG_From_int(static_cast< int >(imebra::tagId_t::FunctionalSettlingPhaseFramesPresent_0018_9622)));
  SWIG_Python_SetConstant(d, "tagId_t_FunctionalSyncPulse_0018_9623",SWIG_From_int(static_cast< int >(imebra::tagId_t::FunctionalSyncPulse_0018_9623)));
  SWIG_Python_SetConstant(d, "tagId_t_SettlingPhaseFrame_0018_9624",SWIG_From_int(static_cast< int >(imebra::tagId_t::SettlingPhaseFrame_0018_9624)));
  SWIG_Python_SetConstant(d, "tagId_t_DecayCorrectionDateTime_0018_9701",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecayCorrectionDateTime_0018_9701)));
  SWIG_Python_SetConstant(d, "tagId_t_StartDensityThreshold_0018_9715",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartDensityThreshold_0018_9715)));
  SWIG_Python_SetConstant(d, "tagId_t_StartRelativeDensityDifferenceThreshold_0018_9716",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartRelativeDensityDifferenceThreshold_0018_9716)));
  SWIG_Python_SetConstant(d, "tagId_t_StartCardiacTriggerCountThreshold_0018_9717",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartCardiacTriggerCountThreshold_0018_9717)));
  SWIG_Python_SetConstant(d, "tagId_t_StartRespiratoryTriggerCountThreshold_0018_9718",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartRespiratoryTriggerCountThreshold_0018_9718)));
  SWIG_Python_SetConstant(d, "tagId_t_TerminationCountsThreshold_0018_9719",SWIG_From_int(static_cast< int >(imebra::tagId_t::TerminationCountsThreshold_0018_9719)));
  SWIG_Python_SetConstant(d, "tagId_t_TerminationDensityThreshold_0018_9720",SWIG_From_int(static_cast< int >(imebra::tagId_t::TerminationDensityThreshold_0018_9720)));
  SWIG_Python_SetConstant(d, "tagId_t_TerminationRelativeDensityThreshold_0018_9721",SWIG_From_int(static_cast< int >(imebra::tagId_t::TerminationRelativeDensityThreshold_0018_9721)));
  SWIG_Python_SetConstant(d, "tagId_t_TerminationTimeThreshold_0018_9722",SWIG_From_int(static_cast< int >(imebra::tagId_t::TerminationTimeThreshold_0018_9722)));
  SWIG_Python_SetConstant(d, "tagId_t_TerminationCardiacTriggerCountThreshold_0018_9723",SWIG_From_int(static_cast< int >(imebra::tagId_t::TerminationCardiacTriggerCountThreshold_0018_9723)));
  SWIG_Python_SetConstant(d, "tagId_t_TerminationRespiratoryTriggerCountThreshold_0018_9724",SWIG_From_int(static_cast< int >(imebra::tagId_t::TerminationRespiratoryTriggerCountThreshold_0018_9724)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorGeometry_0018_9725",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorGeometry_0018_9725)));
  SWIG_Python_SetConstant(d, "tagId_t_TransverseDetectorSeparation_0018_9726",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransverseDetectorSeparation_0018_9726)));
  SWIG_Python_SetConstant(d, "tagId_t_AxialDetectorDimension_0018_9727",SWIG_From_int(static_cast< int >(imebra::tagId_t::AxialDetectorDimension_0018_9727)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalAgentNumber_0018_9729",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalAgentNumber_0018_9729)));
  SWIG_Python_SetConstant(d, "tagId_t_PETFrameAcquisitionSequence_0018_9732",SWIG_From_int(static_cast< int >(imebra::tagId_t::PETFrameAcquisitionSequence_0018_9732)));
  SWIG_Python_SetConstant(d, "tagId_t_PETDetectorMotionDetailsSequence_0018_9733",SWIG_From_int(static_cast< int >(imebra::tagId_t::PETDetectorMotionDetailsSequence_0018_9733)));
  SWIG_Python_SetConstant(d, "tagId_t_PETTableDynamicsSequence_0018_9734",SWIG_From_int(static_cast< int >(imebra::tagId_t::PETTableDynamicsSequence_0018_9734)));
  SWIG_Python_SetConstant(d, "tagId_t_PETPositionSequence_0018_9735",SWIG_From_int(static_cast< int >(imebra::tagId_t::PETPositionSequence_0018_9735)));
  SWIG_Python_SetConstant(d, "tagId_t_PETFrameCorrectionFactorsSequence_0018_9736",SWIG_From_int(static_cast< int >(imebra::tagId_t::PETFrameCorrectionFactorsSequence_0018_9736)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalUsageSequence_0018_9737",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalUsageSequence_0018_9737)));
  SWIG_Python_SetConstant(d, "tagId_t_AttenuationCorrectionSource_0018_9738",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttenuationCorrectionSource_0018_9738)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfIterations_0018_9739",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfIterations_0018_9739)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfSubsets_0018_9740",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfSubsets_0018_9740)));
  SWIG_Python_SetConstant(d, "tagId_t_PETReconstructionSequence_0018_9749",SWIG_From_int(static_cast< int >(imebra::tagId_t::PETReconstructionSequence_0018_9749)));
  SWIG_Python_SetConstant(d, "tagId_t_PETFrameTypeSequence_0018_9751",SWIG_From_int(static_cast< int >(imebra::tagId_t::PETFrameTypeSequence_0018_9751)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeOfFlightInformationUsed_0018_9755",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeOfFlightInformationUsed_0018_9755)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionType_0018_9756",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionType_0018_9756)));
  SWIG_Python_SetConstant(d, "tagId_t_DecayCorrected_0018_9758",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecayCorrected_0018_9758)));
  SWIG_Python_SetConstant(d, "tagId_t_AttenuationCorrected_0018_9759",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttenuationCorrected_0018_9759)));
  SWIG_Python_SetConstant(d, "tagId_t_ScatterCorrected_0018_9760",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScatterCorrected_0018_9760)));
  SWIG_Python_SetConstant(d, "tagId_t_DeadTimeCorrected_0018_9761",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeadTimeCorrected_0018_9761)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryMotionCorrected_0018_9762",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryMotionCorrected_0018_9762)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientMotionCorrected_0018_9763",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientMotionCorrected_0018_9763)));
  SWIG_Python_SetConstant(d, "tagId_t_CountLossNormalizationCorrected_0018_9764",SWIG_From_int(static_cast< int >(imebra::tagId_t::CountLossNormalizationCorrected_0018_9764)));
  SWIG_Python_SetConstant(d, "tagId_t_RandomsCorrected_0018_9765",SWIG_From_int(static_cast< int >(imebra::tagId_t::RandomsCorrected_0018_9765)));
  SWIG_Python_SetConstant(d, "tagId_t_NonUniformRadialSamplingCorrected_0018_9766",SWIG_From_int(static_cast< int >(imebra::tagId_t::NonUniformRadialSamplingCorrected_0018_9766)));
  SWIG_Python_SetConstant(d, "tagId_t_SensitivityCalibrated_0018_9767",SWIG_From_int(static_cast< int >(imebra::tagId_t::SensitivityCalibrated_0018_9767)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorNormalizationCorrection_0018_9768",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorNormalizationCorrection_0018_9768)));
  SWIG_Python_SetConstant(d, "tagId_t_IterativeReconstructionMethod_0018_9769",SWIG_From_int(static_cast< int >(imebra::tagId_t::IterativeReconstructionMethod_0018_9769)));
  SWIG_Python_SetConstant(d, "tagId_t_AttenuationCorrectionTemporalRelationship_0018_9770",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttenuationCorrectionTemporalRelationship_0018_9770)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientPhysiologicalStateSequence_0018_9771",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientPhysiologicalStateSequence_0018_9771)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientPhysiologicalStateCodeSequence_0018_9772",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientPhysiologicalStateCodeSequence_0018_9772)));
  SWIG_Python_SetConstant(d, "tagId_t_DepthsOfFocus_0018_9801",SWIG_From_int(static_cast< int >(imebra::tagId_t::DepthsOfFocus_0018_9801)));
  SWIG_Python_SetConstant(d, "tagId_t_ExcludedIntervalsSequence_0018_9803",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExcludedIntervalsSequence_0018_9803)));
  SWIG_Python_SetConstant(d, "tagId_t_ExclusionStartDateTime_0018_9804",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExclusionStartDateTime_0018_9804)));
  SWIG_Python_SetConstant(d, "tagId_t_ExclusionDuration_0018_9805",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExclusionDuration_0018_9805)));
  SWIG_Python_SetConstant(d, "tagId_t_USImageDescriptionSequence_0018_9806",SWIG_From_int(static_cast< int >(imebra::tagId_t::USImageDescriptionSequence_0018_9806)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageDataTypeSequence_0018_9807",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageDataTypeSequence_0018_9807)));
  SWIG_Python_SetConstant(d, "tagId_t_DataType_0018_9808",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataType_0018_9808)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerScanPatternCodeSequence_0018_9809",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerScanPatternCodeSequence_0018_9809)));
  SWIG_Python_SetConstant(d, "tagId_t_AliasedDataType_0018_980B",SWIG_From_int(static_cast< int >(imebra::tagId_t::AliasedDataType_0018_980B)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionMeasuringDeviceUsed_0018_980C",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionMeasuringDeviceUsed_0018_980C)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerGeometryCodeSequence_0018_980D",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerGeometryCodeSequence_0018_980D)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerBeamSteeringCodeSequence_0018_980E",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerBeamSteeringCodeSequence_0018_980E)));
  SWIG_Python_SetConstant(d, "tagId_t_TransducerApplicationCodeSequence_0018_980F",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransducerApplicationCodeSequence_0018_980F)));
  SWIG_Python_SetConstant(d, "tagId_t_ZeroVelocityPixelValue_0018_9810",SWIG_From_int(static_cast< int >(imebra::tagId_t::ZeroVelocityPixelValue_0018_9810)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferenceLocationLabel_0018_9900",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferenceLocationLabel_0018_9900)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferenceLocationDescription_0018_9901",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferenceLocationDescription_0018_9901)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferenceBasisCodeSequence_0018_9902",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferenceBasisCodeSequence_0018_9902)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferenceGeometryCodeSequence_0018_9903",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferenceGeometryCodeSequence_0018_9903)));
  SWIG_Python_SetConstant(d, "tagId_t_OffsetDistance_0018_9904",SWIG_From_int(static_cast< int >(imebra::tagId_t::OffsetDistance_0018_9904)));
  SWIG_Python_SetConstant(d, "tagId_t_OffsetDirection_0018_9905",SWIG_From_int(static_cast< int >(imebra::tagId_t::OffsetDirection_0018_9905)));
  SWIG_Python_SetConstant(d, "tagId_t_PotentialScheduledProtocolCodeSequence_0018_9906",SWIG_From_int(static_cast< int >(imebra::tagId_t::PotentialScheduledProtocolCodeSequence_0018_9906)));
  SWIG_Python_SetConstant(d, "tagId_t_PotentialRequestedProcedureCodeSequence_0018_9907",SWIG_From_int(static_cast< int >(imebra::tagId_t::PotentialRequestedProcedureCodeSequence_0018_9907)));
  SWIG_Python_SetConstant(d, "tagId_t_PotentialReasonsForProcedure_0018_9908",SWIG_From_int(static_cast< int >(imebra::tagId_t::PotentialReasonsForProcedure_0018_9908)));
  SWIG_Python_SetConstant(d, "tagId_t_PotentialReasonsForProcedureCodeSequence_0018_9909",SWIG_From_int(static_cast< int >(imebra::tagId_t::PotentialReasonsForProcedureCodeSequence_0018_9909)));
  SWIG_Python_SetConstant(d, "tagId_t_PotentialDiagnosticTasks_0018_990A",SWIG_From_int(static_cast< int >(imebra::tagId_t::PotentialDiagnosticTasks_0018_990A)));
  SWIG_Python_SetConstant(d, "tagId_t_ContraindicationsCodeSequence_0018_990B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContraindicationsCodeSequence_0018_990B)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedDefinedProtocolSequence_0018_990C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedDefinedProtocolSequence_0018_990C)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPerformedProtocolSequence_0018_990D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPerformedProtocolSequence_0018_990D)));
  SWIG_Python_SetConstant(d, "tagId_t_PredecessorProtocolSequence_0018_990E",SWIG_From_int(static_cast< int >(imebra::tagId_t::PredecessorProtocolSequence_0018_990E)));
  SWIG_Python_SetConstant(d, "tagId_t_ProtocolPlanningInformation_0018_990F",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProtocolPlanningInformation_0018_990F)));
  SWIG_Python_SetConstant(d, "tagId_t_ProtocolDesignRationale_0018_9910",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProtocolDesignRationale_0018_9910)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSpecificationSequence_0018_9911",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSpecificationSequence_0018_9911)));
  SWIG_Python_SetConstant(d, "tagId_t_ModelSpecificationSequence_0018_9912",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModelSpecificationSequence_0018_9912)));
  SWIG_Python_SetConstant(d, "tagId_t_ParametersSpecificationSequence_0018_9913",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParametersSpecificationSequence_0018_9913)));
  SWIG_Python_SetConstant(d, "tagId_t_InstructionSequence_0018_9914",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstructionSequence_0018_9914)));
  SWIG_Python_SetConstant(d, "tagId_t_InstructionIndex_0018_9915",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstructionIndex_0018_9915)));
  SWIG_Python_SetConstant(d, "tagId_t_InstructionText_0018_9916",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstructionText_0018_9916)));
  SWIG_Python_SetConstant(d, "tagId_t_InstructionDescription_0018_9917",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstructionDescription_0018_9917)));
  SWIG_Python_SetConstant(d, "tagId_t_InstructionPerformedFlag_0018_9918",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstructionPerformedFlag_0018_9918)));
  SWIG_Python_SetConstant(d, "tagId_t_InstructionPerformedDateTime_0018_9919",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstructionPerformedDateTime_0018_9919)));
  SWIG_Python_SetConstant(d, "tagId_t_InstructionPerformanceComment_0018_991A",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstructionPerformanceComment_0018_991A)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientPositioningInstructionSequence_0018_991B",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientPositioningInstructionSequence_0018_991B)));
  SWIG_Python_SetConstant(d, "tagId_t_PositioningMethodCodeSequence_0018_991C",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositioningMethodCodeSequence_0018_991C)));
  SWIG_Python_SetConstant(d, "tagId_t_PositioningLandmarkSequence_0018_991D",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositioningLandmarkSequence_0018_991D)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetFrameOfReferenceUID_0018_991E",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetFrameOfReferenceUID_0018_991E)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionProtocolElementSpecificationSequence_0018_991F",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionProtocolElementSpecificationSequence_0018_991F)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionProtocolElementSequence_0018_9920",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionProtocolElementSequence_0018_9920)));
  SWIG_Python_SetConstant(d, "tagId_t_ProtocolElementNumber_0018_9921",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProtocolElementNumber_0018_9921)));
  SWIG_Python_SetConstant(d, "tagId_t_ProtocolElementName_0018_9922",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProtocolElementName_0018_9922)));
  SWIG_Python_SetConstant(d, "tagId_t_ProtocolElementCharacteristicsSummary_0018_9923",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProtocolElementCharacteristicsSummary_0018_9923)));
  SWIG_Python_SetConstant(d, "tagId_t_ProtocolElementPurpose_0018_9924",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProtocolElementPurpose_0018_9924)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionMotion_0018_9930",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionMotion_0018_9930)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionStartLocationSequence_0018_9931",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionStartLocationSequence_0018_9931)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionEndLocationSequence_0018_9932",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionEndLocationSequence_0018_9932)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionProtocolElementSpecificationSequence_0018_9933",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionProtocolElementSpecificationSequence_0018_9933)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionProtocolElementSequence_0018_9934",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionProtocolElementSequence_0018_9934)));
  SWIG_Python_SetConstant(d, "tagId_t_StorageProtocolElementSpecificationSequence_0018_9935",SWIG_From_int(static_cast< int >(imebra::tagId_t::StorageProtocolElementSpecificationSequence_0018_9935)));
  SWIG_Python_SetConstant(d, "tagId_t_StorageProtocolElementSequence_0018_9936",SWIG_From_int(static_cast< int >(imebra::tagId_t::StorageProtocolElementSequence_0018_9936)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedSeriesDescription_0018_9937",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedSeriesDescription_0018_9937)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceAcquisitionProtocolElementNumber_0018_9938",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceAcquisitionProtocolElementNumber_0018_9938)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceAcquisitionBeamNumber_0018_9939",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceAcquisitionBeamNumber_0018_9939)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceReconstructionProtocolElementNumber_0018_993A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceReconstructionProtocolElementNumber_0018_993A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionStartLocationSequence_0018_993B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionStartLocationSequence_0018_993B)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionEndLocationSequence_0018_993C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionEndLocationSequence_0018_993C)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionAlgorithmSequence_0018_993D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionAlgorithmSequence_0018_993D)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionTargetCenterLocationSequence_0018_993E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionTargetCenterLocationSequence_0018_993E)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageFilterDescription_0018_9941",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageFilterDescription_0018_9941)));
  SWIG_Python_SetConstant(d, "tagId_t_CTDIvolNotificationTrigger_0018_9942",SWIG_From_int(static_cast< int >(imebra::tagId_t::CTDIvolNotificationTrigger_0018_9942)));
  SWIG_Python_SetConstant(d, "tagId_t_DLPNotificationTrigger_0018_9943",SWIG_From_int(static_cast< int >(imebra::tagId_t::DLPNotificationTrigger_0018_9943)));
  SWIG_Python_SetConstant(d, "tagId_t_AutoKVPSelectionType_0018_9944",SWIG_From_int(static_cast< int >(imebra::tagId_t::AutoKVPSelectionType_0018_9944)));
  SWIG_Python_SetConstant(d, "tagId_t_AutoKVPUpperBound_0018_9945",SWIG_From_int(static_cast< int >(imebra::tagId_t::AutoKVPUpperBound_0018_9945)));
  SWIG_Python_SetConstant(d, "tagId_t_AutoKVPLowerBound_0018_9946",SWIG_From_int(static_cast< int >(imebra::tagId_t::AutoKVPLowerBound_0018_9946)));
  SWIG_Python_SetConstant(d, "tagId_t_ProtocolDefinedPatientPosition_0018_9947",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProtocolDefinedPatientPosition_0018_9947)));
  SWIG_Python_SetConstant(d, "tagId_t_ContributingEquipmentSequence_0018_A001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContributingEquipmentSequence_0018_A001)));
  SWIG_Python_SetConstant(d, "tagId_t_ContributionDateTime_0018_A002",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContributionDateTime_0018_A002)));
  SWIG_Python_SetConstant(d, "tagId_t_ContributionDescription_0018_A003",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContributionDescription_0018_A003)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyInstanceUID_0020_000D",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyInstanceUID_0020_000D)));
  SWIG_Python_SetConstant(d, "tagId_t_SeriesInstanceUID_0020_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::SeriesInstanceUID_0020_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyID_0020_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyID_0020_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_SeriesNumber_0020_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::SeriesNumber_0020_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionNumber_0020_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionNumber_0020_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_InstanceNumber_0020_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstanceNumber_0020_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_IsotopeNumber_0020_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsotopeNumber_0020_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_PhaseNumber_0020_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhaseNumber_0020_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_IntervalNumber_0020_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntervalNumber_0020_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeSlotNumber_0020_0017",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeSlotNumber_0020_0017)));
  SWIG_Python_SetConstant(d, "tagId_t_AngleNumber_0020_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::AngleNumber_0020_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_ItemNumber_0020_0019",SWIG_From_int(static_cast< int >(imebra::tagId_t::ItemNumber_0020_0019)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientOrientation_0020_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientOrientation_0020_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayNumber_0020_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayNumber_0020_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveNumber_0020_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveNumber_0020_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_LUTNumber_0020_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::LUTNumber_0020_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagePosition_0020_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagePosition_0020_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagePositionPatient_0020_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagePositionPatient_0020_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageOrientation_0020_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageOrientation_0020_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageOrientationPatient_0020_0037",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageOrientationPatient_0020_0037)));
  SWIG_Python_SetConstant(d, "tagId_t_Location_0020_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::Location_0020_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameOfReferenceUID_0020_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameOfReferenceUID_0020_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_Laterality_0020_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::Laterality_0020_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageLaterality_0020_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageLaterality_0020_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageGeometryType_0020_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageGeometryType_0020_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_MaskingImage_0020_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaskingImage_0020_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_ReportNumber_0020_00AA",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReportNumber_0020_00AA)));
  SWIG_Python_SetConstant(d, "tagId_t_TemporalPositionIdentifier_0020_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemporalPositionIdentifier_0020_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfTemporalPositions_0020_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfTemporalPositions_0020_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_TemporalResolution_0020_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemporalResolution_0020_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_SynchronizationFrameOfReferenceUID_0020_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::SynchronizationFrameOfReferenceUID_0020_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_SOPInstanceUIDOfConcatenationSource_0020_0242",SWIG_From_int(static_cast< int >(imebra::tagId_t::SOPInstanceUIDOfConcatenationSource_0020_0242)));
  SWIG_Python_SetConstant(d, "tagId_t_SeriesInStudy_0020_1000",SWIG_From_int(static_cast< int >(imebra::tagId_t::SeriesInStudy_0020_1000)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionsInSeries_0020_1001",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionsInSeries_0020_1001)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagesInAcquisition_0020_1002",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagesInAcquisition_0020_1002)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagesInSeries_0020_1003",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagesInSeries_0020_1003)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionsInStudy_0020_1004",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionsInStudy_0020_1004)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagesInStudy_0020_1005",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagesInStudy_0020_1005)));
  SWIG_Python_SetConstant(d, "tagId_t_Reference_0020_1020",SWIG_From_int(static_cast< int >(imebra::tagId_t::Reference_0020_1020)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetPositionReferenceIndicator_0020_103F",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetPositionReferenceIndicator_0020_103F)));
  SWIG_Python_SetConstant(d, "tagId_t_PositionReferenceIndicator_0020_1040",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositionReferenceIndicator_0020_1040)));
  SWIG_Python_SetConstant(d, "tagId_t_SliceLocation_0020_1041",SWIG_From_int(static_cast< int >(imebra::tagId_t::SliceLocation_0020_1041)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherStudyNumbers_0020_1070",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherStudyNumbers_0020_1070)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfPatientRelatedStudies_0020_1200",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfPatientRelatedStudies_0020_1200)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfPatientRelatedSeries_0020_1202",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfPatientRelatedSeries_0020_1202)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfPatientRelatedInstances_0020_1204",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfPatientRelatedInstances_0020_1204)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfStudyRelatedSeries_0020_1206",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfStudyRelatedSeries_0020_1206)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfStudyRelatedInstances_0020_1208",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfStudyRelatedInstances_0020_1208)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfSeriesRelatedInstances_0020_1209",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfSeriesRelatedInstances_0020_1209)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceImageIDs_0020_3100",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceImageIDs_0020_3100)));
  SWIG_Python_SetConstant(d, "tagId_t_ModifyingDeviceID_0020_3401",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModifyingDeviceID_0020_3401)));
  SWIG_Python_SetConstant(d, "tagId_t_ModifiedImageID_0020_3402",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModifiedImageID_0020_3402)));
  SWIG_Python_SetConstant(d, "tagId_t_ModifiedImageDate_0020_3403",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModifiedImageDate_0020_3403)));
  SWIG_Python_SetConstant(d, "tagId_t_ModifyingDeviceManufacturer_0020_3404",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModifyingDeviceManufacturer_0020_3404)));
  SWIG_Python_SetConstant(d, "tagId_t_ModifiedImageTime_0020_3405",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModifiedImageTime_0020_3405)));
  SWIG_Python_SetConstant(d, "tagId_t_ModifiedImageDescription_0020_3406",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModifiedImageDescription_0020_3406)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageComments_0020_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageComments_0020_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_OriginalImageIdentification_0020_5000",SWIG_From_int(static_cast< int >(imebra::tagId_t::OriginalImageIdentification_0020_5000)));
  SWIG_Python_SetConstant(d, "tagId_t_OriginalImageIdentificationNomenclature_0020_5002",SWIG_From_int(static_cast< int >(imebra::tagId_t::OriginalImageIdentificationNomenclature_0020_5002)));
  SWIG_Python_SetConstant(d, "tagId_t_StackID_0020_9056",SWIG_From_int(static_cast< int >(imebra::tagId_t::StackID_0020_9056)));
  SWIG_Python_SetConstant(d, "tagId_t_InStackPositionNumber_0020_9057",SWIG_From_int(static_cast< int >(imebra::tagId_t::InStackPositionNumber_0020_9057)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameAnatomySequence_0020_9071",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameAnatomySequence_0020_9071)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameLaterality_0020_9072",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameLaterality_0020_9072)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameContentSequence_0020_9111",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameContentSequence_0020_9111)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanePositionSequence_0020_9113",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanePositionSequence_0020_9113)));
  SWIG_Python_SetConstant(d, "tagId_t_PlaneOrientationSequence_0020_9116",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlaneOrientationSequence_0020_9116)));
  SWIG_Python_SetConstant(d, "tagId_t_TemporalPositionIndex_0020_9128",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemporalPositionIndex_0020_9128)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalCardiacTriggerDelayTime_0020_9153",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalCardiacTriggerDelayTime_0020_9153)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalCardiacTriggerTimePriorToRPeak_0020_9154",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalCardiacTriggerTimePriorToRPeak_0020_9154)));
  SWIG_Python_SetConstant(d, "tagId_t_ActualCardiacTriggerTimePriorToRPeak_0020_9155",SWIG_From_int(static_cast< int >(imebra::tagId_t::ActualCardiacTriggerTimePriorToRPeak_0020_9155)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameAcquisitionNumber_0020_9156",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameAcquisitionNumber_0020_9156)));
  SWIG_Python_SetConstant(d, "tagId_t_DimensionIndexValues_0020_9157",SWIG_From_int(static_cast< int >(imebra::tagId_t::DimensionIndexValues_0020_9157)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameComments_0020_9158",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameComments_0020_9158)));
  SWIG_Python_SetConstant(d, "tagId_t_ConcatenationUID_0020_9161",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConcatenationUID_0020_9161)));
  SWIG_Python_SetConstant(d, "tagId_t_InConcatenationNumber_0020_9162",SWIG_From_int(static_cast< int >(imebra::tagId_t::InConcatenationNumber_0020_9162)));
  SWIG_Python_SetConstant(d, "tagId_t_InConcatenationTotalNumber_0020_9163",SWIG_From_int(static_cast< int >(imebra::tagId_t::InConcatenationTotalNumber_0020_9163)));
  SWIG_Python_SetConstant(d, "tagId_t_DimensionOrganizationUID_0020_9164",SWIG_From_int(static_cast< int >(imebra::tagId_t::DimensionOrganizationUID_0020_9164)));
  SWIG_Python_SetConstant(d, "tagId_t_DimensionIndexPointer_0020_9165",SWIG_From_int(static_cast< int >(imebra::tagId_t::DimensionIndexPointer_0020_9165)));
  SWIG_Python_SetConstant(d, "tagId_t_FunctionalGroupPointer_0020_9167",SWIG_From_int(static_cast< int >(imebra::tagId_t::FunctionalGroupPointer_0020_9167)));
  SWIG_Python_SetConstant(d, "tagId_t_UnassignedSharedConvertedAttributesSequence_0020_9170",SWIG_From_int(static_cast< int >(imebra::tagId_t::UnassignedSharedConvertedAttributesSequence_0020_9170)));
  SWIG_Python_SetConstant(d, "tagId_t_UnassignedPerFrameConvertedAttributesSequence_0020_9171",SWIG_From_int(static_cast< int >(imebra::tagId_t::UnassignedPerFrameConvertedAttributesSequence_0020_9171)));
  SWIG_Python_SetConstant(d, "tagId_t_ConversionSourceAttributesSequence_0020_9172",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConversionSourceAttributesSequence_0020_9172)));
  SWIG_Python_SetConstant(d, "tagId_t_DimensionIndexPrivateCreator_0020_9213",SWIG_From_int(static_cast< int >(imebra::tagId_t::DimensionIndexPrivateCreator_0020_9213)));
  SWIG_Python_SetConstant(d, "tagId_t_DimensionOrganizationSequence_0020_9221",SWIG_From_int(static_cast< int >(imebra::tagId_t::DimensionOrganizationSequence_0020_9221)));
  SWIG_Python_SetConstant(d, "tagId_t_DimensionIndexSequence_0020_9222",SWIG_From_int(static_cast< int >(imebra::tagId_t::DimensionIndexSequence_0020_9222)));
  SWIG_Python_SetConstant(d, "tagId_t_ConcatenationFrameOffsetNumber_0020_9228",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConcatenationFrameOffsetNumber_0020_9228)));
  SWIG_Python_SetConstant(d, "tagId_t_FunctionalGroupPrivateCreator_0020_9238",SWIG_From_int(static_cast< int >(imebra::tagId_t::FunctionalGroupPrivateCreator_0020_9238)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalPercentageOfCardiacPhase_0020_9241",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalPercentageOfCardiacPhase_0020_9241)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalPercentageOfRespiratoryPhase_0020_9245",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalPercentageOfRespiratoryPhase_0020_9245)));
  SWIG_Python_SetConstant(d, "tagId_t_StartingRespiratoryAmplitude_0020_9246",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartingRespiratoryAmplitude_0020_9246)));
  SWIG_Python_SetConstant(d, "tagId_t_StartingRespiratoryPhase_0020_9247",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartingRespiratoryPhase_0020_9247)));
  SWIG_Python_SetConstant(d, "tagId_t_EndingRespiratoryAmplitude_0020_9248",SWIG_From_int(static_cast< int >(imebra::tagId_t::EndingRespiratoryAmplitude_0020_9248)));
  SWIG_Python_SetConstant(d, "tagId_t_EndingRespiratoryPhase_0020_9249",SWIG_From_int(static_cast< int >(imebra::tagId_t::EndingRespiratoryPhase_0020_9249)));
  SWIG_Python_SetConstant(d, "tagId_t_RespiratoryTriggerType_0020_9250",SWIG_From_int(static_cast< int >(imebra::tagId_t::RespiratoryTriggerType_0020_9250)));
  SWIG_Python_SetConstant(d, "tagId_t_RRIntervalTimeNominal_0020_9251",SWIG_From_int(static_cast< int >(imebra::tagId_t::RRIntervalTimeNominal_0020_9251)));
  SWIG_Python_SetConstant(d, "tagId_t_ActualCardiacTriggerDelayTime_0020_9252",SWIG_From_int(static_cast< int >(imebra::tagId_t::ActualCardiacTriggerDelayTime_0020_9252)));
  SWIG_Python_SetConstant(d, "tagId_t_RespiratorySynchronizationSequence_0020_9253",SWIG_From_int(static_cast< int >(imebra::tagId_t::RespiratorySynchronizationSequence_0020_9253)));
  SWIG_Python_SetConstant(d, "tagId_t_RespiratoryIntervalTime_0020_9254",SWIG_From_int(static_cast< int >(imebra::tagId_t::RespiratoryIntervalTime_0020_9254)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalRespiratoryTriggerDelayTime_0020_9255",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalRespiratoryTriggerDelayTime_0020_9255)));
  SWIG_Python_SetConstant(d, "tagId_t_RespiratoryTriggerDelayThreshold_0020_9256",SWIG_From_int(static_cast< int >(imebra::tagId_t::RespiratoryTriggerDelayThreshold_0020_9256)));
  SWIG_Python_SetConstant(d, "tagId_t_ActualRespiratoryTriggerDelayTime_0020_9257",SWIG_From_int(static_cast< int >(imebra::tagId_t::ActualRespiratoryTriggerDelayTime_0020_9257)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagePositionVolume_0020_9301",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagePositionVolume_0020_9301)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageOrientationVolume_0020_9302",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageOrientationVolume_0020_9302)));
  SWIG_Python_SetConstant(d, "tagId_t_UltrasoundAcquisitionGeometry_0020_9307",SWIG_From_int(static_cast< int >(imebra::tagId_t::UltrasoundAcquisitionGeometry_0020_9307)));
  SWIG_Python_SetConstant(d, "tagId_t_ApexPosition_0020_9308",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApexPosition_0020_9308)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeToTransducerMappingMatrix_0020_9309",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeToTransducerMappingMatrix_0020_9309)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeToTableMappingMatrix_0020_930A",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeToTableMappingMatrix_0020_930A)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeToTransducerRelationship_0020_930B",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeToTransducerRelationship_0020_930B)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientFrameOfReferenceSource_0020_930C",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientFrameOfReferenceSource_0020_930C)));
  SWIG_Python_SetConstant(d, "tagId_t_TemporalPositionTimeOffset_0020_930D",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemporalPositionTimeOffset_0020_930D)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanePositionVolumeSequence_0020_930E",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanePositionVolumeSequence_0020_930E)));
  SWIG_Python_SetConstant(d, "tagId_t_PlaneOrientationVolumeSequence_0020_930F",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlaneOrientationVolumeSequence_0020_930F)));
  SWIG_Python_SetConstant(d, "tagId_t_TemporalPositionSequence_0020_9310",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemporalPositionSequence_0020_9310)));
  SWIG_Python_SetConstant(d, "tagId_t_DimensionOrganizationType_0020_9311",SWIG_From_int(static_cast< int >(imebra::tagId_t::DimensionOrganizationType_0020_9311)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeFrameOfReferenceUID_0020_9312",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeFrameOfReferenceUID_0020_9312)));
  SWIG_Python_SetConstant(d, "tagId_t_TableFrameOfReferenceUID_0020_9313",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableFrameOfReferenceUID_0020_9313)));
  SWIG_Python_SetConstant(d, "tagId_t_DimensionDescriptionLabel_0020_9421",SWIG_From_int(static_cast< int >(imebra::tagId_t::DimensionDescriptionLabel_0020_9421)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientOrientationInFrameSequence_0020_9450",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientOrientationInFrameSequence_0020_9450)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameLabel_0020_9453",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameLabel_0020_9453)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionIndex_0020_9518",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionIndex_0020_9518)));
  SWIG_Python_SetConstant(d, "tagId_t_ContributingSOPInstancesReferenceSequence_0020_9529",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContributingSOPInstancesReferenceSequence_0020_9529)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionIndex_0020_9536",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionIndex_0020_9536)));
  SWIG_Python_SetConstant(d, "tagId_t_LightPathFilterPassThroughWavelength_0022_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::LightPathFilterPassThroughWavelength_0022_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_LightPathFilterPassBand_0022_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::LightPathFilterPassBand_0022_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagePathFilterPassThroughWavelength_0022_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagePathFilterPassThroughWavelength_0022_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagePathFilterPassBand_0022_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagePathFilterPassBand_0022_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientEyeMovementCommanded_0022_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientEyeMovementCommanded_0022_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientEyeMovementCommandCodeSequence_0022_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientEyeMovementCommandCodeSequence_0022_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_SphericalLensPower_0022_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::SphericalLensPower_0022_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_CylinderLensPower_0022_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::CylinderLensPower_0022_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_CylinderAxis_0022_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::CylinderAxis_0022_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_EmmetropicMagnification_0022_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::EmmetropicMagnification_0022_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_IntraOcularPressure_0022_000B",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntraOcularPressure_0022_000B)));
  SWIG_Python_SetConstant(d, "tagId_t_HorizontalFieldOfView_0022_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::HorizontalFieldOfView_0022_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_PupilDilated_0022_000D",SWIG_From_int(static_cast< int >(imebra::tagId_t::PupilDilated_0022_000D)));
  SWIG_Python_SetConstant(d, "tagId_t_DegreeOfDilation_0022_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::DegreeOfDilation_0022_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_StereoBaselineAngle_0022_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::StereoBaselineAngle_0022_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_StereoBaselineDisplacement_0022_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::StereoBaselineDisplacement_0022_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_StereoHorizontalPixelOffset_0022_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::StereoHorizontalPixelOffset_0022_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_StereoVerticalPixelOffset_0022_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::StereoVerticalPixelOffset_0022_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_StereoRotation_0022_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::StereoRotation_0022_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionDeviceTypeCodeSequence_0022_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionDeviceTypeCodeSequence_0022_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_IlluminationTypeCodeSequence_0022_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::IlluminationTypeCodeSequence_0022_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_LightPathFilterTypeStackCodeSequence_0022_0017",SWIG_From_int(static_cast< int >(imebra::tagId_t::LightPathFilterTypeStackCodeSequence_0022_0017)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagePathFilterTypeStackCodeSequence_0022_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagePathFilterTypeStackCodeSequence_0022_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_LensesCodeSequence_0022_0019",SWIG_From_int(static_cast< int >(imebra::tagId_t::LensesCodeSequence_0022_0019)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelDescriptionCodeSequence_0022_001A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelDescriptionCodeSequence_0022_001A)));
  SWIG_Python_SetConstant(d, "tagId_t_RefractiveStateSequence_0022_001B",SWIG_From_int(static_cast< int >(imebra::tagId_t::RefractiveStateSequence_0022_001B)));
  SWIG_Python_SetConstant(d, "tagId_t_MydriaticAgentCodeSequence_0022_001C",SWIG_From_int(static_cast< int >(imebra::tagId_t::MydriaticAgentCodeSequence_0022_001C)));
  SWIG_Python_SetConstant(d, "tagId_t_RelativeImagePositionCodeSequence_0022_001D",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelativeImagePositionCodeSequence_0022_001D)));
  SWIG_Python_SetConstant(d, "tagId_t_CameraAngleOfView_0022_001E",SWIG_From_int(static_cast< int >(imebra::tagId_t::CameraAngleOfView_0022_001E)));
  SWIG_Python_SetConstant(d, "tagId_t_StereoPairsSequence_0022_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::StereoPairsSequence_0022_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_LeftImageSequence_0022_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::LeftImageSequence_0022_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_RightImageSequence_0022_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::RightImageSequence_0022_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_StereoPairsPresent_0022_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::StereoPairsPresent_0022_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_AxialLengthOfTheEye_0022_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::AxialLengthOfTheEye_0022_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicFrameLocationSequence_0022_0031",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicFrameLocationSequence_0022_0031)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferenceCoordinates_0022_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferenceCoordinates_0022_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_DepthSpatialResolution_0022_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::DepthSpatialResolution_0022_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumDepthDistortion_0022_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumDepthDistortion_0022_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_AlongScanSpatialResolution_0022_0037",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlongScanSpatialResolution_0022_0037)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumAlongScanDistortion_0022_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumAlongScanDistortion_0022_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicImageOrientation_0022_0039",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicImageOrientation_0022_0039)));
  SWIG_Python_SetConstant(d, "tagId_t_DepthOfTransverseImage_0022_0041",SWIG_From_int(static_cast< int >(imebra::tagId_t::DepthOfTransverseImage_0022_0041)));
  SWIG_Python_SetConstant(d, "tagId_t_MydriaticAgentConcentrationUnitsSequence_0022_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::MydriaticAgentConcentrationUnitsSequence_0022_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_AcrossScanSpatialResolution_0022_0048",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcrossScanSpatialResolution_0022_0048)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumAcrossScanDistortion_0022_0049",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumAcrossScanDistortion_0022_0049)));
  SWIG_Python_SetConstant(d, "tagId_t_MydriaticAgentConcentration_0022_004E",SWIG_From_int(static_cast< int >(imebra::tagId_t::MydriaticAgentConcentration_0022_004E)));
  SWIG_Python_SetConstant(d, "tagId_t_IlluminationWaveLength_0022_0055",SWIG_From_int(static_cast< int >(imebra::tagId_t::IlluminationWaveLength_0022_0055)));
  SWIG_Python_SetConstant(d, "tagId_t_IlluminationPower_0022_0056",SWIG_From_int(static_cast< int >(imebra::tagId_t::IlluminationPower_0022_0056)));
  SWIG_Python_SetConstant(d, "tagId_t_IlluminationBandwidth_0022_0057",SWIG_From_int(static_cast< int >(imebra::tagId_t::IlluminationBandwidth_0022_0057)));
  SWIG_Python_SetConstant(d, "tagId_t_MydriaticAgentSequence_0022_0058",SWIG_From_int(static_cast< int >(imebra::tagId_t::MydriaticAgentSequence_0022_0058)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialMeasurementsRightEyeSequence_0022_1007",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialMeasurementsRightEyeSequence_0022_1007)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialMeasurementsLeftEyeSequence_0022_1008",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialMeasurementsLeftEyeSequence_0022_1008)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialMeasurementsDeviceType_0022_1009",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialMeasurementsDeviceType_0022_1009)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthMeasurementsType_0022_1010",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthMeasurementsType_0022_1010)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthSequence_0022_1012",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthSequence_0022_1012)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLength_0022_1019",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLength_0022_1019)));
  SWIG_Python_SetConstant(d, "tagId_t_LensStatusCodeSequence_0022_1024",SWIG_From_int(static_cast< int >(imebra::tagId_t::LensStatusCodeSequence_0022_1024)));
  SWIG_Python_SetConstant(d, "tagId_t_VitreousStatusCodeSequence_0022_1025",SWIG_From_int(static_cast< int >(imebra::tagId_t::VitreousStatusCodeSequence_0022_1025)));
  SWIG_Python_SetConstant(d, "tagId_t_IOLFormulaCodeSequence_0022_1028",SWIG_From_int(static_cast< int >(imebra::tagId_t::IOLFormulaCodeSequence_0022_1028)));
  SWIG_Python_SetConstant(d, "tagId_t_IOLFormulaDetail_0022_1029",SWIG_From_int(static_cast< int >(imebra::tagId_t::IOLFormulaDetail_0022_1029)));
  SWIG_Python_SetConstant(d, "tagId_t_KeratometerIndex_0022_1033",SWIG_From_int(static_cast< int >(imebra::tagId_t::KeratometerIndex_0022_1033)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceOfOphthalmicAxialLengthCodeSequence_0022_1035",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceOfOphthalmicAxialLengthCodeSequence_0022_1035)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceOfCornealSizeDataCodeSequence_0022_1036",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceOfCornealSizeDataCodeSequence_0022_1036)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetRefraction_0022_1037",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetRefraction_0022_1037)));
  SWIG_Python_SetConstant(d, "tagId_t_RefractiveProcedureOccurred_0022_1039",SWIG_From_int(static_cast< int >(imebra::tagId_t::RefractiveProcedureOccurred_0022_1039)));
  SWIG_Python_SetConstant(d, "tagId_t_RefractiveSurgeryTypeCodeSequence_0022_1040",SWIG_From_int(static_cast< int >(imebra::tagId_t::RefractiveSurgeryTypeCodeSequence_0022_1040)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicUltrasoundMethodCodeSequence_0022_1044",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicUltrasoundMethodCodeSequence_0022_1044)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthMeasurementsSequence_0022_1050",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthMeasurementsSequence_0022_1050)));
  SWIG_Python_SetConstant(d, "tagId_t_IOLPower_0022_1053",SWIG_From_int(static_cast< int >(imebra::tagId_t::IOLPower_0022_1053)));
  SWIG_Python_SetConstant(d, "tagId_t_PredictedRefractiveError_0022_1054",SWIG_From_int(static_cast< int >(imebra::tagId_t::PredictedRefractiveError_0022_1054)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthVelocity_0022_1059",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthVelocity_0022_1059)));
  SWIG_Python_SetConstant(d, "tagId_t_LensStatusDescription_0022_1065",SWIG_From_int(static_cast< int >(imebra::tagId_t::LensStatusDescription_0022_1065)));
  SWIG_Python_SetConstant(d, "tagId_t_VitreousStatusDescription_0022_1066",SWIG_From_int(static_cast< int >(imebra::tagId_t::VitreousStatusDescription_0022_1066)));
  SWIG_Python_SetConstant(d, "tagId_t_IOLPowerSequence_0022_1090",SWIG_From_int(static_cast< int >(imebra::tagId_t::IOLPowerSequence_0022_1090)));
  SWIG_Python_SetConstant(d, "tagId_t_LensConstantSequence_0022_1092",SWIG_From_int(static_cast< int >(imebra::tagId_t::LensConstantSequence_0022_1092)));
  SWIG_Python_SetConstant(d, "tagId_t_IOLManufacturer_0022_1093",SWIG_From_int(static_cast< int >(imebra::tagId_t::IOLManufacturer_0022_1093)));
  SWIG_Python_SetConstant(d, "tagId_t_LensConstantDescription_0022_1094",SWIG_From_int(static_cast< int >(imebra::tagId_t::LensConstantDescription_0022_1094)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantName_0022_1095",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantName_0022_1095)));
  SWIG_Python_SetConstant(d, "tagId_t_KeratometryMeasurementTypeCodeSequence_0022_1096",SWIG_From_int(static_cast< int >(imebra::tagId_t::KeratometryMeasurementTypeCodeSequence_0022_1096)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantPartNumber_0022_1097",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantPartNumber_0022_1097)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedOphthalmicAxialMeasurementsSequence_0022_1100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedOphthalmicAxialMeasurementsSequence_0022_1100)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_0022_1101",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_0022_1101)));
  SWIG_Python_SetConstant(d, "tagId_t_RefractiveErrorBeforeRefractiveSurgeryCodeSequence_0022_1103",SWIG_From_int(static_cast< int >(imebra::tagId_t::RefractiveErrorBeforeRefractiveSurgeryCodeSequence_0022_1103)));
  SWIG_Python_SetConstant(d, "tagId_t_IOLPowerForExactEmmetropia_0022_1121",SWIG_From_int(static_cast< int >(imebra::tagId_t::IOLPowerForExactEmmetropia_0022_1121)));
  SWIG_Python_SetConstant(d, "tagId_t_IOLPowerForExactTargetRefraction_0022_1122",SWIG_From_int(static_cast< int >(imebra::tagId_t::IOLPowerForExactTargetRefraction_0022_1122)));
  SWIG_Python_SetConstant(d, "tagId_t_AnteriorChamberDepthDefinitionCodeSequence_0022_1125",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnteriorChamberDepthDefinitionCodeSequence_0022_1125)));
  SWIG_Python_SetConstant(d, "tagId_t_LensThicknessSequence_0022_1127",SWIG_From_int(static_cast< int >(imebra::tagId_t::LensThicknessSequence_0022_1127)));
  SWIG_Python_SetConstant(d, "tagId_t_AnteriorChamberDepthSequence_0022_1128",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnteriorChamberDepthSequence_0022_1128)));
  SWIG_Python_SetConstant(d, "tagId_t_LensThickness_0022_1130",SWIG_From_int(static_cast< int >(imebra::tagId_t::LensThickness_0022_1130)));
  SWIG_Python_SetConstant(d, "tagId_t_AnteriorChamberDepth_0022_1131",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnteriorChamberDepth_0022_1131)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceOfLensThicknessDataCodeSequence_0022_1132",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceOfLensThicknessDataCodeSequence_0022_1132)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceOfAnteriorChamberDepthDataCodeSequence_0022_1133",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceOfAnteriorChamberDepthDataCodeSequence_0022_1133)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceOfRefractiveMeasurementsSequence_0022_1134",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceOfRefractiveMeasurementsSequence_0022_1134)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceOfRefractiveMeasurementsCodeSequence_0022_1135",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceOfRefractiveMeasurementsCodeSequence_0022_1135)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthMeasurementModified_0022_1140",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthMeasurementModified_0022_1140)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthDataSourceCodeSequence_0022_1150",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthDataSourceCodeSequence_0022_1150)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthAcquisitionMethodCodeSequence_0022_1153",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthAcquisitionMethodCodeSequence_0022_1153)));
  SWIG_Python_SetConstant(d, "tagId_t_SignalToNoiseRatio_0022_1155",SWIG_From_int(static_cast< int >(imebra::tagId_t::SignalToNoiseRatio_0022_1155)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthDataSourceDescription_0022_1159",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthDataSourceDescription_0022_1159)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthMeasurementsTotalLengthSequence_0022_1210",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthMeasurementsTotalLengthSequence_0022_1210)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthMeasurementsSegmentalLengthSequence_0022_1211",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthMeasurementsSegmentalLengthSequence_0022_1211)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthMeasurementsLengthSummationSequence_0022_1212",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthMeasurementsLengthSummationSequence_0022_1212)));
  SWIG_Python_SetConstant(d, "tagId_t_UltrasoundOphthalmicAxialLengthMeasurementsSequence_0022_1220",SWIG_From_int(static_cast< int >(imebra::tagId_t::UltrasoundOphthalmicAxialLengthMeasurementsSequence_0022_1220)));
  SWIG_Python_SetConstant(d, "tagId_t_OpticalOphthalmicAxialLengthMeasurementsSequence_0022_1225",SWIG_From_int(static_cast< int >(imebra::tagId_t::OpticalOphthalmicAxialLengthMeasurementsSequence_0022_1225)));
  SWIG_Python_SetConstant(d, "tagId_t_UltrasoundSelectedOphthalmicAxialLengthSequence_0022_1230",SWIG_From_int(static_cast< int >(imebra::tagId_t::UltrasoundSelectedOphthalmicAxialLengthSequence_0022_1230)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthSelectionMethodCodeSequence_0022_1250",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthSelectionMethodCodeSequence_0022_1250)));
  SWIG_Python_SetConstant(d, "tagId_t_OpticalSelectedOphthalmicAxialLengthSequence_0022_1255",SWIG_From_int(static_cast< int >(imebra::tagId_t::OpticalSelectedOphthalmicAxialLengthSequence_0022_1255)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectedSegmentalOphthalmicAxialLengthSequence_0022_1257",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectedSegmentalOphthalmicAxialLengthSequence_0022_1257)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectedTotalOphthalmicAxialLengthSequence_0022_1260",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectedTotalOphthalmicAxialLengthSequence_0022_1260)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthQualityMetricSequence_0022_1262",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthQualityMetricSequence_0022_1262)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthQualityMetricTypeCodeSequence_0022_1265",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthQualityMetricTypeCodeSequence_0022_1265)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthQualityMetricTypeDescription_0022_1273",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthQualityMetricTypeDescription_0022_1273)));
  SWIG_Python_SetConstant(d, "tagId_t_IntraocularLensCalculationsRightEyeSequence_0022_1300",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntraocularLensCalculationsRightEyeSequence_0022_1300)));
  SWIG_Python_SetConstant(d, "tagId_t_IntraocularLensCalculationsLeftEyeSequence_0022_1310",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntraocularLensCalculationsLeftEyeSequence_0022_1310)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_0022_1330",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_0022_1330)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicMappingDeviceType_0022_1415",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicMappingDeviceType_0022_1415)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionMethodCodeSequence_0022_1420",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionMethodCodeSequence_0022_1420)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionMethodAlgorithmSequence_0022_1423",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionMethodAlgorithmSequence_0022_1423)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicThicknessMapTypeCodeSequence_0022_1436",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicThicknessMapTypeCodeSequence_0022_1436)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicThicknessMappingNormalsSequence_0022_1443",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicThicknessMappingNormalsSequence_0022_1443)));
  SWIG_Python_SetConstant(d, "tagId_t_RetinalThicknessDefinitionCodeSequence_0022_1445",SWIG_From_int(static_cast< int >(imebra::tagId_t::RetinalThicknessDefinitionCodeSequence_0022_1445)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelValueMappingToCodedConceptSequence_0022_1450",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelValueMappingToCodedConceptSequence_0022_1450)));
  SWIG_Python_SetConstant(d, "tagId_t_MappedPixelValue_0022_1452",SWIG_From_int(static_cast< int >(imebra::tagId_t::MappedPixelValue_0022_1452)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelValueMappingExplanation_0022_1454",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelValueMappingExplanation_0022_1454)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicThicknessMapQualityThresholdSequence_0022_1458",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicThicknessMapQualityThresholdSequence_0022_1458)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicThicknessMapThresholdQualityRating_0022_1460",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicThicknessMapThresholdQualityRating_0022_1460)));
  SWIG_Python_SetConstant(d, "tagId_t_AnatomicStructureReferencePoint_0022_1463",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnatomicStructureReferencePoint_0022_1463)));
  SWIG_Python_SetConstant(d, "tagId_t_RegistrationToLocalizerSequence_0022_1465",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegistrationToLocalizerSequence_0022_1465)));
  SWIG_Python_SetConstant(d, "tagId_t_RegisteredLocalizerUnits_0022_1466",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegisteredLocalizerUnits_0022_1466)));
  SWIG_Python_SetConstant(d, "tagId_t_RegisteredLocalizerTopLeftHandCorner_0022_1467",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegisteredLocalizerTopLeftHandCorner_0022_1467)));
  SWIG_Python_SetConstant(d, "tagId_t_RegisteredLocalizerBottomRightHandCorner_0022_1468",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegisteredLocalizerBottomRightHandCorner_0022_1468)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicThicknessMapQualityRatingSequence_0022_1470",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicThicknessMapQualityRatingSequence_0022_1470)));
  SWIG_Python_SetConstant(d, "tagId_t_RelevantOPTAttributesSequence_0022_1472",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelevantOPTAttributesSequence_0022_1472)));
  SWIG_Python_SetConstant(d, "tagId_t_TransformationMethodCodeSequence_0022_1512",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransformationMethodCodeSequence_0022_1512)));
  SWIG_Python_SetConstant(d, "tagId_t_TransformationAlgorithmSequence_0022_1513",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransformationAlgorithmSequence_0022_1513)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAxialLengthMethod_0022_1515",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAxialLengthMethod_0022_1515)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicFOV_0022_1517",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicFOV_0022_1517)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDimensionalToThreeDimensionalMapSequence_0022_1518",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDimensionalToThreeDimensionalMapSequence_0022_1518)));
  SWIG_Python_SetConstant(d, "tagId_t_WideFieldOphthalmicPhotographyQualityRatingSequence_0022_1525",SWIG_From_int(static_cast< int >(imebra::tagId_t::WideFieldOphthalmicPhotographyQualityRatingSequence_0022_1525)));
  SWIG_Python_SetConstant(d, "tagId_t_WideFieldOphthalmicPhotographyQualityThresholdSequence_0022_1526",SWIG_From_int(static_cast< int >(imebra::tagId_t::WideFieldOphthalmicPhotographyQualityThresholdSequence_0022_1526)));
  SWIG_Python_SetConstant(d, "tagId_t_WideFieldOphthalmicPhotographyThresholdQualityRating_0022_1527",SWIG_From_int(static_cast< int >(imebra::tagId_t::WideFieldOphthalmicPhotographyThresholdQualityRating_0022_1527)));
  SWIG_Python_SetConstant(d, "tagId_t_XCoordinatesCenterPixelViewAngle_0022_1528",SWIG_From_int(static_cast< int >(imebra::tagId_t::XCoordinatesCenterPixelViewAngle_0022_1528)));
  SWIG_Python_SetConstant(d, "tagId_t_YCoordinatesCenterPixelViewAngle_0022_1529",SWIG_From_int(static_cast< int >(imebra::tagId_t::YCoordinatesCenterPixelViewAngle_0022_1529)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfMapPoints_0022_1530",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfMapPoints_0022_1530)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDimensionalToThreeDimensionalMapData_0022_1531",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDimensionalToThreeDimensionalMapData_0022_1531)));
  SWIG_Python_SetConstant(d, "tagId_t_DerivationAlgorithmSequence_0022_1612",SWIG_From_int(static_cast< int >(imebra::tagId_t::DerivationAlgorithmSequence_0022_1612)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicImageTypeCodeSequence_0022_1615",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicImageTypeCodeSequence_0022_1615)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicImageTypeDescription_0022_1616",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicImageTypeDescription_0022_1616)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanPatternTypeCodeSequence_0022_1618",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanPatternTypeCodeSequence_0022_1618)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSurfaceMeshIdentificationSequence_0022_1620",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSurfaceMeshIdentificationSequence_0022_1620)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicVolumetricPropertiesFlag_0022_1622",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicVolumetricPropertiesFlag_0022_1622)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAnatomicReferencePointXCoordinate_0022_1624",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAnatomicReferencePointXCoordinate_0022_1624)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicAnatomicReferencePointYCoordinate_0022_1626",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicAnatomicReferencePointYCoordinate_0022_1626)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicEnFaceImageQualityRatingSequence_0022_1628",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicEnFaceImageQualityRatingSequence_0022_1628)));
  SWIG_Python_SetConstant(d, "tagId_t_QualityThreshold_0022_1630",SWIG_From_int(static_cast< int >(imebra::tagId_t::QualityThreshold_0022_1630)));
  SWIG_Python_SetConstant(d, "tagId_t_OCTBscanAnalysisAcquisitionParametersSequence_0022_1640",SWIG_From_int(static_cast< int >(imebra::tagId_t::OCTBscanAnalysisAcquisitionParametersSequence_0022_1640)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberofBscansPerFrame_0022_1642",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberofBscansPerFrame_0022_1642)));
  SWIG_Python_SetConstant(d, "tagId_t_BscanSlabThickness_0022_1643",SWIG_From_int(static_cast< int >(imebra::tagId_t::BscanSlabThickness_0022_1643)));
  SWIG_Python_SetConstant(d, "tagId_t_DistanceBetweenBscanSlabs_0022_1644",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistanceBetweenBscanSlabs_0022_1644)));
  SWIG_Python_SetConstant(d, "tagId_t_BscanCycleTime_0022_1645",SWIG_From_int(static_cast< int >(imebra::tagId_t::BscanCycleTime_0022_1645)));
  SWIG_Python_SetConstant(d, "tagId_t_BscanCycleTimeVector_0022_1646",SWIG_From_int(static_cast< int >(imebra::tagId_t::BscanCycleTimeVector_0022_1646)));
  SWIG_Python_SetConstant(d, "tagId_t_AscanRate_0022_1649",SWIG_From_int(static_cast< int >(imebra::tagId_t::AscanRate_0022_1649)));
  SWIG_Python_SetConstant(d, "tagId_t_BscanRate_0022_1650",SWIG_From_int(static_cast< int >(imebra::tagId_t::BscanRate_0022_1650)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceMeshZPixelOffset_0022_1658",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceMeshZPixelOffset_0022_1658)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldHorizontalExtent_0024_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldHorizontalExtent_0024_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldVerticalExtent_0024_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldVerticalExtent_0024_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldShape_0024_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldShape_0024_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_ScreeningTestModeCodeSequence_0024_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScreeningTestModeCodeSequence_0024_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumStimulusLuminance_0024_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumStimulusLuminance_0024_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_BackgroundLuminance_0024_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::BackgroundLuminance_0024_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_StimulusColorCodeSequence_0024_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::StimulusColorCodeSequence_0024_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_BackgroundIlluminationColorCodeSequence_0024_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::BackgroundIlluminationColorCodeSequence_0024_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_StimulusArea_0024_0025",SWIG_From_int(static_cast< int >(imebra::tagId_t::StimulusArea_0024_0025)));
  SWIG_Python_SetConstant(d, "tagId_t_StimulusPresentationTime_0024_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::StimulusPresentationTime_0024_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationSequence_0024_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationSequence_0024_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationMonitoringCodeSequence_0024_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationMonitoringCodeSequence_0024_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldCatchTrialSequence_0024_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldCatchTrialSequence_0024_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationCheckedQuantity_0024_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationCheckedQuantity_0024_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientNotProperlyFixatedQuantity_0024_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientNotProperlyFixatedQuantity_0024_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentedVisualStimuliDataFlag_0024_0037",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentedVisualStimuliDataFlag_0024_0037)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfVisualStimuli_0024_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfVisualStimuli_0024_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_ExcessiveFixationLossesDataFlag_0024_0039",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExcessiveFixationLossesDataFlag_0024_0039)));
  SWIG_Python_SetConstant(d, "tagId_t_ExcessiveFixationLosses_0024_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExcessiveFixationLosses_0024_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_StimuliRetestingQuantity_0024_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::StimuliRetestingQuantity_0024_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_CommentsOnPatientPerformanceOfVisualField_0024_0044",SWIG_From_int(static_cast< int >(imebra::tagId_t::CommentsOnPatientPerformanceOfVisualField_0024_0044)));
  SWIG_Python_SetConstant(d, "tagId_t_FalseNegativesEstimateFlag_0024_0045",SWIG_From_int(static_cast< int >(imebra::tagId_t::FalseNegativesEstimateFlag_0024_0045)));
  SWIG_Python_SetConstant(d, "tagId_t_FalseNegativesEstimate_0024_0046",SWIG_From_int(static_cast< int >(imebra::tagId_t::FalseNegativesEstimate_0024_0046)));
  SWIG_Python_SetConstant(d, "tagId_t_NegativeCatchTrialsQuantity_0024_0048",SWIG_From_int(static_cast< int >(imebra::tagId_t::NegativeCatchTrialsQuantity_0024_0048)));
  SWIG_Python_SetConstant(d, "tagId_t_FalseNegativesQuantity_0024_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::FalseNegativesQuantity_0024_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_ExcessiveFalseNegativesDataFlag_0024_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExcessiveFalseNegativesDataFlag_0024_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_ExcessiveFalseNegatives_0024_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExcessiveFalseNegatives_0024_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_FalsePositivesEstimateFlag_0024_0053",SWIG_From_int(static_cast< int >(imebra::tagId_t::FalsePositivesEstimateFlag_0024_0053)));
  SWIG_Python_SetConstant(d, "tagId_t_FalsePositivesEstimate_0024_0054",SWIG_From_int(static_cast< int >(imebra::tagId_t::FalsePositivesEstimate_0024_0054)));
  SWIG_Python_SetConstant(d, "tagId_t_CatchTrialsDataFlag_0024_0055",SWIG_From_int(static_cast< int >(imebra::tagId_t::CatchTrialsDataFlag_0024_0055)));
  SWIG_Python_SetConstant(d, "tagId_t_PositiveCatchTrialsQuantity_0024_0056",SWIG_From_int(static_cast< int >(imebra::tagId_t::PositiveCatchTrialsQuantity_0024_0056)));
  SWIG_Python_SetConstant(d, "tagId_t_TestPointNormalsDataFlag_0024_0057",SWIG_From_int(static_cast< int >(imebra::tagId_t::TestPointNormalsDataFlag_0024_0057)));
  SWIG_Python_SetConstant(d, "tagId_t_TestPointNormalsSequence_0024_0058",SWIG_From_int(static_cast< int >(imebra::tagId_t::TestPointNormalsSequence_0024_0058)));
  SWIG_Python_SetConstant(d, "tagId_t_GlobalDeviationProbabilityNormalsFlag_0024_0059",SWIG_From_int(static_cast< int >(imebra::tagId_t::GlobalDeviationProbabilityNormalsFlag_0024_0059)));
  SWIG_Python_SetConstant(d, "tagId_t_FalsePositivesQuantity_0024_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::FalsePositivesQuantity_0024_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_ExcessiveFalsePositivesDataFlag_0024_0061",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExcessiveFalsePositivesDataFlag_0024_0061)));
  SWIG_Python_SetConstant(d, "tagId_t_ExcessiveFalsePositives_0024_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExcessiveFalsePositives_0024_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldTestNormalsFlag_0024_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldTestNormalsFlag_0024_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_ResultsNormalsSequence_0024_0064",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResultsNormalsSequence_0024_0064)));
  SWIG_Python_SetConstant(d, "tagId_t_AgeCorrectedSensitivityDeviationAlgorithmSequence_0024_0065",SWIG_From_int(static_cast< int >(imebra::tagId_t::AgeCorrectedSensitivityDeviationAlgorithmSequence_0024_0065)));
  SWIG_Python_SetConstant(d, "tagId_t_GlobalDeviationFromNormal_0024_0066",SWIG_From_int(static_cast< int >(imebra::tagId_t::GlobalDeviationFromNormal_0024_0066)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralizedDefectSensitivityDeviationAlgorithmSequence_0024_0067",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralizedDefectSensitivityDeviationAlgorithmSequence_0024_0067)));
  SWIG_Python_SetConstant(d, "tagId_t_LocalizedDeviationFromNormal_0024_0068",SWIG_From_int(static_cast< int >(imebra::tagId_t::LocalizedDeviationFromNormal_0024_0068)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientReliabilityIndicator_0024_0069",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientReliabilityIndicator_0024_0069)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldMeanSensitivity_0024_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldMeanSensitivity_0024_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_GlobalDeviationProbability_0024_0071",SWIG_From_int(static_cast< int >(imebra::tagId_t::GlobalDeviationProbability_0024_0071)));
  SWIG_Python_SetConstant(d, "tagId_t_LocalDeviationProbabilityNormalsFlag_0024_0072",SWIG_From_int(static_cast< int >(imebra::tagId_t::LocalDeviationProbabilityNormalsFlag_0024_0072)));
  SWIG_Python_SetConstant(d, "tagId_t_LocalizedDeviationProbability_0024_0073",SWIG_From_int(static_cast< int >(imebra::tagId_t::LocalizedDeviationProbability_0024_0073)));
  SWIG_Python_SetConstant(d, "tagId_t_ShortTermFluctuationCalculated_0024_0074",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShortTermFluctuationCalculated_0024_0074)));
  SWIG_Python_SetConstant(d, "tagId_t_ShortTermFluctuation_0024_0075",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShortTermFluctuation_0024_0075)));
  SWIG_Python_SetConstant(d, "tagId_t_ShortTermFluctuationProbabilityCalculated_0024_0076",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShortTermFluctuationProbabilityCalculated_0024_0076)));
  SWIG_Python_SetConstant(d, "tagId_t_ShortTermFluctuationProbability_0024_0077",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShortTermFluctuationProbability_0024_0077)));
  SWIG_Python_SetConstant(d, "tagId_t_CorrectedLocalizedDeviationFromNormalCalculated_0024_0078",SWIG_From_int(static_cast< int >(imebra::tagId_t::CorrectedLocalizedDeviationFromNormalCalculated_0024_0078)));
  SWIG_Python_SetConstant(d, "tagId_t_CorrectedLocalizedDeviationFromNormal_0024_0079",SWIG_From_int(static_cast< int >(imebra::tagId_t::CorrectedLocalizedDeviationFromNormal_0024_0079)));
  SWIG_Python_SetConstant(d, "tagId_t_CorrectedLocalizedDeviationFromNormalProbabilityCalculated_0024_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::CorrectedLocalizedDeviationFromNormalProbabilityCalculated_0024_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_CorrectedLocalizedDeviationFromNormalProbability_0024_0081",SWIG_From_int(static_cast< int >(imebra::tagId_t::CorrectedLocalizedDeviationFromNormalProbability_0024_0081)));
  SWIG_Python_SetConstant(d, "tagId_t_GlobalDeviationProbabilitySequence_0024_0083",SWIG_From_int(static_cast< int >(imebra::tagId_t::GlobalDeviationProbabilitySequence_0024_0083)));
  SWIG_Python_SetConstant(d, "tagId_t_LocalizedDeviationProbabilitySequence_0024_0085",SWIG_From_int(static_cast< int >(imebra::tagId_t::LocalizedDeviationProbabilitySequence_0024_0085)));
  SWIG_Python_SetConstant(d, "tagId_t_FovealSensitivityMeasured_0024_0086",SWIG_From_int(static_cast< int >(imebra::tagId_t::FovealSensitivityMeasured_0024_0086)));
  SWIG_Python_SetConstant(d, "tagId_t_FovealSensitivity_0024_0087",SWIG_From_int(static_cast< int >(imebra::tagId_t::FovealSensitivity_0024_0087)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldTestDuration_0024_0088",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldTestDuration_0024_0088)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldTestPointSequence_0024_0089",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldTestPointSequence_0024_0089)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldTestPointXCoordinate_0024_0090",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldTestPointXCoordinate_0024_0090)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldTestPointYCoordinate_0024_0091",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldTestPointYCoordinate_0024_0091)));
  SWIG_Python_SetConstant(d, "tagId_t_AgeCorrectedSensitivityDeviationValue_0024_0092",SWIG_From_int(static_cast< int >(imebra::tagId_t::AgeCorrectedSensitivityDeviationValue_0024_0092)));
  SWIG_Python_SetConstant(d, "tagId_t_StimulusResults_0024_0093",SWIG_From_int(static_cast< int >(imebra::tagId_t::StimulusResults_0024_0093)));
  SWIG_Python_SetConstant(d, "tagId_t_SensitivityValue_0024_0094",SWIG_From_int(static_cast< int >(imebra::tagId_t::SensitivityValue_0024_0094)));
  SWIG_Python_SetConstant(d, "tagId_t_RetestStimulusSeen_0024_0095",SWIG_From_int(static_cast< int >(imebra::tagId_t::RetestStimulusSeen_0024_0095)));
  SWIG_Python_SetConstant(d, "tagId_t_RetestSensitivityValue_0024_0096",SWIG_From_int(static_cast< int >(imebra::tagId_t::RetestSensitivityValue_0024_0096)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldTestPointNormalsSequence_0024_0097",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldTestPointNormalsSequence_0024_0097)));
  SWIG_Python_SetConstant(d, "tagId_t_QuantifiedDefect_0024_0098",SWIG_From_int(static_cast< int >(imebra::tagId_t::QuantifiedDefect_0024_0098)));
  SWIG_Python_SetConstant(d, "tagId_t_AgeCorrectedSensitivityDeviationProbabilityValue_0024_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::AgeCorrectedSensitivityDeviationProbabilityValue_0024_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralizedDefectCorrectedSensitivityDeviationFlag_0024_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralizedDefectCorrectedSensitivityDeviationFlag_0024_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralizedDefectCorrectedSensitivityDeviationValue_0024_0103",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralizedDefectCorrectedSensitivityDeviationValue_0024_0103)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue_0024_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue_0024_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_MinimumSensitivityValue_0024_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::MinimumSensitivityValue_0024_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_BlindSpotLocalized_0024_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlindSpotLocalized_0024_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_BlindSpotXCoordinate_0024_0107",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlindSpotXCoordinate_0024_0107)));
  SWIG_Python_SetConstant(d, "tagId_t_BlindSpotYCoordinate_0024_0108",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlindSpotYCoordinate_0024_0108)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualAcuityMeasurementSequence_0024_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualAcuityMeasurementSequence_0024_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_RefractiveParametersUsedOnPatientSequence_0024_0112",SWIG_From_int(static_cast< int >(imebra::tagId_t::RefractiveParametersUsedOnPatientSequence_0024_0112)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasurementLaterality_0024_0113",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasurementLaterality_0024_0113)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicPatientClinicalInformationLeftEyeSequence_0024_0114",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicPatientClinicalInformationLeftEyeSequence_0024_0114)));
  SWIG_Python_SetConstant(d, "tagId_t_OphthalmicPatientClinicalInformationRightEyeSequence_0024_0115",SWIG_From_int(static_cast< int >(imebra::tagId_t::OphthalmicPatientClinicalInformationRightEyeSequence_0024_0115)));
  SWIG_Python_SetConstant(d, "tagId_t_FovealPointNormativeDataFlag_0024_0117",SWIG_From_int(static_cast< int >(imebra::tagId_t::FovealPointNormativeDataFlag_0024_0117)));
  SWIG_Python_SetConstant(d, "tagId_t_FovealPointProbabilityValue_0024_0118",SWIG_From_int(static_cast< int >(imebra::tagId_t::FovealPointProbabilityValue_0024_0118)));
  SWIG_Python_SetConstant(d, "tagId_t_ScreeningBaselineMeasured_0024_0120",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScreeningBaselineMeasured_0024_0120)));
  SWIG_Python_SetConstant(d, "tagId_t_ScreeningBaselineMeasuredSequence_0024_0122",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScreeningBaselineMeasuredSequence_0024_0122)));
  SWIG_Python_SetConstant(d, "tagId_t_ScreeningBaselineType_0024_0124",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScreeningBaselineType_0024_0124)));
  SWIG_Python_SetConstant(d, "tagId_t_ScreeningBaselineValue_0024_0126",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScreeningBaselineValue_0024_0126)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmSource_0024_0202",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmSource_0024_0202)));
  SWIG_Python_SetConstant(d, "tagId_t_DataSetName_0024_0306",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataSetName_0024_0306)));
  SWIG_Python_SetConstant(d, "tagId_t_DataSetVersion_0024_0307",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataSetVersion_0024_0307)));
  SWIG_Python_SetConstant(d, "tagId_t_DataSetSource_0024_0308",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataSetSource_0024_0308)));
  SWIG_Python_SetConstant(d, "tagId_t_DataSetDescription_0024_0309",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataSetDescription_0024_0309)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldTestReliabilityGlobalIndexSequence_0024_0317",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldTestReliabilityGlobalIndexSequence_0024_0317)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualFieldGlobalResultsIndexSequence_0024_0320",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualFieldGlobalResultsIndexSequence_0024_0320)));
  SWIG_Python_SetConstant(d, "tagId_t_DataObservationSequence_0024_0325",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataObservationSequence_0024_0325)));
  SWIG_Python_SetConstant(d, "tagId_t_IndexNormalsFlag_0024_0338",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndexNormalsFlag_0024_0338)));
  SWIG_Python_SetConstant(d, "tagId_t_IndexProbability_0024_0341",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndexProbability_0024_0341)));
  SWIG_Python_SetConstant(d, "tagId_t_IndexProbabilitySequence_0024_0344",SWIG_From_int(static_cast< int >(imebra::tagId_t::IndexProbabilitySequence_0024_0344)));
  SWIG_Python_SetConstant(d, "tagId_t_SamplesPerPixel_0028_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::SamplesPerPixel_0028_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_SamplesPerPixelUsed_0028_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::SamplesPerPixelUsed_0028_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_PhotometricInterpretation_0028_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhotometricInterpretation_0028_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageDimensions_0028_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageDimensions_0028_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanarConfiguration_0028_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanarConfiguration_0028_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFrames_0028_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFrames_0028_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameIncrementPointer_0028_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameIncrementPointer_0028_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameDimensionPointer_0028_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameDimensionPointer_0028_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_Rows_0028_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::Rows_0028_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_Columns_0028_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::Columns_0028_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_Planes_0028_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::Planes_0028_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_UltrasoundColorDataPresent_0028_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::UltrasoundColorDataPresent_0028_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelSpacing_0028_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelSpacing_0028_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_ZoomFactor_0028_0031",SWIG_From_int(static_cast< int >(imebra::tagId_t::ZoomFactor_0028_0031)));
  SWIG_Python_SetConstant(d, "tagId_t_ZoomCenter_0028_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::ZoomCenter_0028_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelAspectRatio_0028_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelAspectRatio_0028_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageFormat_0028_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageFormat_0028_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_ManipulatedImage_0028_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::ManipulatedImage_0028_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_CorrectedImage_0028_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::CorrectedImage_0028_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_CompressionRecognitionCode_0028_005F",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompressionRecognitionCode_0028_005F)));
  SWIG_Python_SetConstant(d, "tagId_t_CompressionCode_0028_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompressionCode_0028_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_CompressionOriginator_0028_0061",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompressionOriginator_0028_0061)));
  SWIG_Python_SetConstant(d, "tagId_t_CompressionLabel_0028_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompressionLabel_0028_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_CompressionDescription_0028_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompressionDescription_0028_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_CompressionSequence_0028_0065",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompressionSequence_0028_0065)));
  SWIG_Python_SetConstant(d, "tagId_t_CompressionStepPointers_0028_0066",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompressionStepPointers_0028_0066)));
  SWIG_Python_SetConstant(d, "tagId_t_RepeatInterval_0028_0068",SWIG_From_int(static_cast< int >(imebra::tagId_t::RepeatInterval_0028_0068)));
  SWIG_Python_SetConstant(d, "tagId_t_BitsGrouped_0028_0069",SWIG_From_int(static_cast< int >(imebra::tagId_t::BitsGrouped_0028_0069)));
  SWIG_Python_SetConstant(d, "tagId_t_PerimeterTable_0028_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerimeterTable_0028_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_PerimeterValue_0028_0071",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerimeterValue_0028_0071)));
  SWIG_Python_SetConstant(d, "tagId_t_PredictorRows_0028_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::PredictorRows_0028_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_PredictorColumns_0028_0081",SWIG_From_int(static_cast< int >(imebra::tagId_t::PredictorColumns_0028_0081)));
  SWIG_Python_SetConstant(d, "tagId_t_PredictorConstants_0028_0082",SWIG_From_int(static_cast< int >(imebra::tagId_t::PredictorConstants_0028_0082)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockedPixels_0028_0090",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockedPixels_0028_0090)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockRows_0028_0091",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockRows_0028_0091)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockColumns_0028_0092",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockColumns_0028_0092)));
  SWIG_Python_SetConstant(d, "tagId_t_RowOverlap_0028_0093",SWIG_From_int(static_cast< int >(imebra::tagId_t::RowOverlap_0028_0093)));
  SWIG_Python_SetConstant(d, "tagId_t_ColumnOverlap_0028_0094",SWIG_From_int(static_cast< int >(imebra::tagId_t::ColumnOverlap_0028_0094)));
  SWIG_Python_SetConstant(d, "tagId_t_BitsAllocated_0028_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::BitsAllocated_0028_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_BitsStored_0028_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::BitsStored_0028_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_HighBit_0028_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::HighBit_0028_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelRepresentation_0028_0103",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelRepresentation_0028_0103)));
  SWIG_Python_SetConstant(d, "tagId_t_SmallestValidPixelValue_0028_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::SmallestValidPixelValue_0028_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_LargestValidPixelValue_0028_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargestValidPixelValue_0028_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_SmallestImagePixelValue_0028_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::SmallestImagePixelValue_0028_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_LargestImagePixelValue_0028_0107",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargestImagePixelValue_0028_0107)));
  SWIG_Python_SetConstant(d, "tagId_t_SmallestPixelValueInSeries_0028_0108",SWIG_From_int(static_cast< int >(imebra::tagId_t::SmallestPixelValueInSeries_0028_0108)));
  SWIG_Python_SetConstant(d, "tagId_t_LargestPixelValueInSeries_0028_0109",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargestPixelValueInSeries_0028_0109)));
  SWIG_Python_SetConstant(d, "tagId_t_SmallestImagePixelValueInPlane_0028_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::SmallestImagePixelValueInPlane_0028_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_LargestImagePixelValueInPlane_0028_0111",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargestImagePixelValueInPlane_0028_0111)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelPaddingValue_0028_0120",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelPaddingValue_0028_0120)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelPaddingRangeLimit_0028_0121",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelPaddingRangeLimit_0028_0121)));
  SWIG_Python_SetConstant(d, "tagId_t_FloatPixelPaddingValue_0028_0122",SWIG_From_int(static_cast< int >(imebra::tagId_t::FloatPixelPaddingValue_0028_0122)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleFloatPixelPaddingValue_0028_0123",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleFloatPixelPaddingValue_0028_0123)));
  SWIG_Python_SetConstant(d, "tagId_t_FloatPixelPaddingRangeLimit_0028_0124",SWIG_From_int(static_cast< int >(imebra::tagId_t::FloatPixelPaddingRangeLimit_0028_0124)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleFloatPixelPaddingRangeLimit_0028_0125",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleFloatPixelPaddingRangeLimit_0028_0125)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageLocation_0028_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageLocation_0028_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_QualityControlImage_0028_0300",SWIG_From_int(static_cast< int >(imebra::tagId_t::QualityControlImage_0028_0300)));
  SWIG_Python_SetConstant(d, "tagId_t_BurnedInAnnotation_0028_0301",SWIG_From_int(static_cast< int >(imebra::tagId_t::BurnedInAnnotation_0028_0301)));
  SWIG_Python_SetConstant(d, "tagId_t_RecognizableVisualFeatures_0028_0302",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecognizableVisualFeatures_0028_0302)));
  SWIG_Python_SetConstant(d, "tagId_t_LongitudinalTemporalInformationModified_0028_0303",SWIG_From_int(static_cast< int >(imebra::tagId_t::LongitudinalTemporalInformationModified_0028_0303)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedColorPaletteInstanceUID_0028_0304",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedColorPaletteInstanceUID_0028_0304)));
  SWIG_Python_SetConstant(d, "tagId_t_RowsForNthOrderCoefficients_0028_0400",SWIG_From_int(static_cast< int >(imebra::tagId_t::RowsForNthOrderCoefficients_0028_0400)));
  SWIG_Python_SetConstant(d, "tagId_t_ColumnsForNthOrderCoefficients_0028_0401",SWIG_From_int(static_cast< int >(imebra::tagId_t::ColumnsForNthOrderCoefficients_0028_0401)));
  SWIG_Python_SetConstant(d, "tagId_t_CoefficientCoding_0028_0402",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoefficientCoding_0028_0402)));
  SWIG_Python_SetConstant(d, "tagId_t_CoefficientCodingPointers_0028_0403",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoefficientCodingPointers_0028_0403)));
  SWIG_Python_SetConstant(d, "tagId_t_DetailsOfCoefficients_0028_0404",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetailsOfCoefficients_0028_0404)));
  SWIG_Python_SetConstant(d, "tagId_t_DCTLabel_0028_0700",SWIG_From_int(static_cast< int >(imebra::tagId_t::DCTLabel_0028_0700)));
  SWIG_Python_SetConstant(d, "tagId_t_DataBlockDescription_0028_0701",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataBlockDescription_0028_0701)));
  SWIG_Python_SetConstant(d, "tagId_t_DataBlock_0028_0702",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataBlock_0028_0702)));
  SWIG_Python_SetConstant(d, "tagId_t_NormalizationFactorFormat_0028_0710",SWIG_From_int(static_cast< int >(imebra::tagId_t::NormalizationFactorFormat_0028_0710)));
  SWIG_Python_SetConstant(d, "tagId_t_ZonalMapNumberFormat_0028_0720",SWIG_From_int(static_cast< int >(imebra::tagId_t::ZonalMapNumberFormat_0028_0720)));
  SWIG_Python_SetConstant(d, "tagId_t_ZonalMapLocation_0028_0721",SWIG_From_int(static_cast< int >(imebra::tagId_t::ZonalMapLocation_0028_0721)));
  SWIG_Python_SetConstant(d, "tagId_t_ZonalMapFormat_0028_0722",SWIG_From_int(static_cast< int >(imebra::tagId_t::ZonalMapFormat_0028_0722)));
  SWIG_Python_SetConstant(d, "tagId_t_AdaptiveMapFormat_0028_0730",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdaptiveMapFormat_0028_0730)));
  SWIG_Python_SetConstant(d, "tagId_t_CodeNumberFormat_0028_0740",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodeNumberFormat_0028_0740)));
  SWIG_Python_SetConstant(d, "tagId_t_CodeLabel_0028_0800",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodeLabel_0028_0800)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfTables_0028_0802",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfTables_0028_0802)));
  SWIG_Python_SetConstant(d, "tagId_t_CodeTableLocation_0028_0803",SWIG_From_int(static_cast< int >(imebra::tagId_t::CodeTableLocation_0028_0803)));
  SWIG_Python_SetConstant(d, "tagId_t_BitsForCodeWord_0028_0804",SWIG_From_int(static_cast< int >(imebra::tagId_t::BitsForCodeWord_0028_0804)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageDataLocation_0028_0808",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageDataLocation_0028_0808)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelSpacingCalibrationType_0028_0A02",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelSpacingCalibrationType_0028_0A02)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelSpacingCalibrationDescription_0028_0A04",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelSpacingCalibrationDescription_0028_0A04)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelIntensityRelationship_0028_1040",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelIntensityRelationship_0028_1040)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelIntensityRelationshipSign_0028_1041",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelIntensityRelationshipSign_0028_1041)));
  SWIG_Python_SetConstant(d, "tagId_t_WindowCenter_0028_1050",SWIG_From_int(static_cast< int >(imebra::tagId_t::WindowCenter_0028_1050)));
  SWIG_Python_SetConstant(d, "tagId_t_WindowWidth_0028_1051",SWIG_From_int(static_cast< int >(imebra::tagId_t::WindowWidth_0028_1051)));
  SWIG_Python_SetConstant(d, "tagId_t_RescaleIntercept_0028_1052",SWIG_From_int(static_cast< int >(imebra::tagId_t::RescaleIntercept_0028_1052)));
  SWIG_Python_SetConstant(d, "tagId_t_RescaleSlope_0028_1053",SWIG_From_int(static_cast< int >(imebra::tagId_t::RescaleSlope_0028_1053)));
  SWIG_Python_SetConstant(d, "tagId_t_RescaleType_0028_1054",SWIG_From_int(static_cast< int >(imebra::tagId_t::RescaleType_0028_1054)));
  SWIG_Python_SetConstant(d, "tagId_t_WindowCenterWidthExplanation_0028_1055",SWIG_From_int(static_cast< int >(imebra::tagId_t::WindowCenterWidthExplanation_0028_1055)));
  SWIG_Python_SetConstant(d, "tagId_t_VOILUTFunction_0028_1056",SWIG_From_int(static_cast< int >(imebra::tagId_t::VOILUTFunction_0028_1056)));
  SWIG_Python_SetConstant(d, "tagId_t_GrayScale_0028_1080",SWIG_From_int(static_cast< int >(imebra::tagId_t::GrayScale_0028_1080)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedViewingMode_0028_1090",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedViewingMode_0028_1090)));
  SWIG_Python_SetConstant(d, "tagId_t_GrayLookupTableDescriptor_0028_1100",SWIG_From_int(static_cast< int >(imebra::tagId_t::GrayLookupTableDescriptor_0028_1100)));
  SWIG_Python_SetConstant(d, "tagId_t_RedPaletteColorLookupTableDescriptor_0028_1101",SWIG_From_int(static_cast< int >(imebra::tagId_t::RedPaletteColorLookupTableDescriptor_0028_1101)));
  SWIG_Python_SetConstant(d, "tagId_t_GreenPaletteColorLookupTableDescriptor_0028_1102",SWIG_From_int(static_cast< int >(imebra::tagId_t::GreenPaletteColorLookupTableDescriptor_0028_1102)));
  SWIG_Python_SetConstant(d, "tagId_t_BluePaletteColorLookupTableDescriptor_0028_1103",SWIG_From_int(static_cast< int >(imebra::tagId_t::BluePaletteColorLookupTableDescriptor_0028_1103)));
  SWIG_Python_SetConstant(d, "tagId_t_AlphaPaletteColorLookupTableDescriptor_0028_1104",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlphaPaletteColorLookupTableDescriptor_0028_1104)));
  SWIG_Python_SetConstant(d, "tagId_t_LargeRedPaletteColorLookupTableDescriptor_0028_1111",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargeRedPaletteColorLookupTableDescriptor_0028_1111)));
  SWIG_Python_SetConstant(d, "tagId_t_LargeGreenPaletteColorLookupTableDescriptor_0028_1112",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargeGreenPaletteColorLookupTableDescriptor_0028_1112)));
  SWIG_Python_SetConstant(d, "tagId_t_LargeBluePaletteColorLookupTableDescriptor_0028_1113",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargeBluePaletteColorLookupTableDescriptor_0028_1113)));
  SWIG_Python_SetConstant(d, "tagId_t_PaletteColorLookupTableUID_0028_1199",SWIG_From_int(static_cast< int >(imebra::tagId_t::PaletteColorLookupTableUID_0028_1199)));
  SWIG_Python_SetConstant(d, "tagId_t_GrayLookupTableData_0028_1200",SWIG_From_int(static_cast< int >(imebra::tagId_t::GrayLookupTableData_0028_1200)));
  SWIG_Python_SetConstant(d, "tagId_t_RedPaletteColorLookupTableData_0028_1201",SWIG_From_int(static_cast< int >(imebra::tagId_t::RedPaletteColorLookupTableData_0028_1201)));
  SWIG_Python_SetConstant(d, "tagId_t_GreenPaletteColorLookupTableData_0028_1202",SWIG_From_int(static_cast< int >(imebra::tagId_t::GreenPaletteColorLookupTableData_0028_1202)));
  SWIG_Python_SetConstant(d, "tagId_t_BluePaletteColorLookupTableData_0028_1203",SWIG_From_int(static_cast< int >(imebra::tagId_t::BluePaletteColorLookupTableData_0028_1203)));
  SWIG_Python_SetConstant(d, "tagId_t_AlphaPaletteColorLookupTableData_0028_1204",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlphaPaletteColorLookupTableData_0028_1204)));
  SWIG_Python_SetConstant(d, "tagId_t_LargeRedPaletteColorLookupTableData_0028_1211",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargeRedPaletteColorLookupTableData_0028_1211)));
  SWIG_Python_SetConstant(d, "tagId_t_LargeGreenPaletteColorLookupTableData_0028_1212",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargeGreenPaletteColorLookupTableData_0028_1212)));
  SWIG_Python_SetConstant(d, "tagId_t_LargeBluePaletteColorLookupTableData_0028_1213",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargeBluePaletteColorLookupTableData_0028_1213)));
  SWIG_Python_SetConstant(d, "tagId_t_LargePaletteColorLookupTableUID_0028_1214",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargePaletteColorLookupTableUID_0028_1214)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentedRedPaletteColorLookupTableData_0028_1221",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentedRedPaletteColorLookupTableData_0028_1221)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentedGreenPaletteColorLookupTableData_0028_1222",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentedGreenPaletteColorLookupTableData_0028_1222)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentedBluePaletteColorLookupTableData_0028_1223",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentedBluePaletteColorLookupTableData_0028_1223)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentedAlphaPaletteColorLookupTableData_0028_1224",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentedAlphaPaletteColorLookupTableData_0028_1224)));
  SWIG_Python_SetConstant(d, "tagId_t_StoredValueColorRangeSequence_0028_1230",SWIG_From_int(static_cast< int >(imebra::tagId_t::StoredValueColorRangeSequence_0028_1230)));
  SWIG_Python_SetConstant(d, "tagId_t_MinimumStoredValueMapped_0028_1231",SWIG_From_int(static_cast< int >(imebra::tagId_t::MinimumStoredValueMapped_0028_1231)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumStoredValueMapped_0028_1232",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumStoredValueMapped_0028_1232)));
  SWIG_Python_SetConstant(d, "tagId_t_BreastImplantPresent_0028_1300",SWIG_From_int(static_cast< int >(imebra::tagId_t::BreastImplantPresent_0028_1300)));
  SWIG_Python_SetConstant(d, "tagId_t_PartialView_0028_1350",SWIG_From_int(static_cast< int >(imebra::tagId_t::PartialView_0028_1350)));
  SWIG_Python_SetConstant(d, "tagId_t_PartialViewDescription_0028_1351",SWIG_From_int(static_cast< int >(imebra::tagId_t::PartialViewDescription_0028_1351)));
  SWIG_Python_SetConstant(d, "tagId_t_PartialViewCodeSequence_0028_1352",SWIG_From_int(static_cast< int >(imebra::tagId_t::PartialViewCodeSequence_0028_1352)));
  SWIG_Python_SetConstant(d, "tagId_t_SpatialLocationsPreserved_0028_135A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpatialLocationsPreserved_0028_135A)));
  SWIG_Python_SetConstant(d, "tagId_t_DataFrameAssignmentSequence_0028_1401",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataFrameAssignmentSequence_0028_1401)));
  SWIG_Python_SetConstant(d, "tagId_t_DataPathAssignment_0028_1402",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataPathAssignment_0028_1402)));
  SWIG_Python_SetConstant(d, "tagId_t_BitsMappedToColorLookupTable_0028_1403",SWIG_From_int(static_cast< int >(imebra::tagId_t::BitsMappedToColorLookupTable_0028_1403)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingLUT1Sequence_0028_1404",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingLUT1Sequence_0028_1404)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingLUT1TransferFunction_0028_1405",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingLUT1TransferFunction_0028_1405)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingWeightConstant_0028_1406",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingWeightConstant_0028_1406)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingLookupTableDescriptor_0028_1407",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingLookupTableDescriptor_0028_1407)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingLookupTableData_0028_1408",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingLookupTableData_0028_1408)));
  SWIG_Python_SetConstant(d, "tagId_t_EnhancedPaletteColorLookupTableSequence_0028_140B",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnhancedPaletteColorLookupTableSequence_0028_140B)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingLUT2Sequence_0028_140C",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingLUT2Sequence_0028_140C)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingLUT2TransferFunction_0028_140D",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingLUT2TransferFunction_0028_140D)));
  SWIG_Python_SetConstant(d, "tagId_t_DataPathID_0028_140E",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataPathID_0028_140E)));
  SWIG_Python_SetConstant(d, "tagId_t_RGBLUTTransferFunction_0028_140F",SWIG_From_int(static_cast< int >(imebra::tagId_t::RGBLUTTransferFunction_0028_140F)));
  SWIG_Python_SetConstant(d, "tagId_t_AlphaLUTTransferFunction_0028_1410",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlphaLUTTransferFunction_0028_1410)));
  SWIG_Python_SetConstant(d, "tagId_t_ICCProfile_0028_2000",SWIG_From_int(static_cast< int >(imebra::tagId_t::ICCProfile_0028_2000)));
  SWIG_Python_SetConstant(d, "tagId_t_ColorSpace_0028_2002",SWIG_From_int(static_cast< int >(imebra::tagId_t::ColorSpace_0028_2002)));
  SWIG_Python_SetConstant(d, "tagId_t_LossyImageCompressionRetired_0008_2110",SWIG_From_int(static_cast< int >(imebra::tagId_t::LossyImageCompressionRetired_0008_2110)));
  SWIG_Python_SetConstant(d, "tagId_t_LossyImageCompression_0028_2110",SWIG_From_int(static_cast< int >(imebra::tagId_t::LossyImageCompression_0028_2110)));
  SWIG_Python_SetConstant(d, "tagId_t_LossyImageCompressionRatio_0028_2112",SWIG_From_int(static_cast< int >(imebra::tagId_t::LossyImageCompressionRatio_0028_2112)));
  SWIG_Python_SetConstant(d, "tagId_t_LossyImageCompressionMethod_0028_2114",SWIG_From_int(static_cast< int >(imebra::tagId_t::LossyImageCompressionMethod_0028_2114)));
  SWIG_Python_SetConstant(d, "tagId_t_ModalityLUTSequence_0028_3000",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModalityLUTSequence_0028_3000)));
  SWIG_Python_SetConstant(d, "tagId_t_LUTDescriptor_0028_3002",SWIG_From_int(static_cast< int >(imebra::tagId_t::LUTDescriptor_0028_3002)));
  SWIG_Python_SetConstant(d, "tagId_t_LUTExplanation_0028_3003",SWIG_From_int(static_cast< int >(imebra::tagId_t::LUTExplanation_0028_3003)));
  SWIG_Python_SetConstant(d, "tagId_t_ModalityLUTType_0028_3004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModalityLUTType_0028_3004)));
  SWIG_Python_SetConstant(d, "tagId_t_LUTData_0028_3006",SWIG_From_int(static_cast< int >(imebra::tagId_t::LUTData_0028_3006)));
  SWIG_Python_SetConstant(d, "tagId_t_VOILUTSequence_0028_3010",SWIG_From_int(static_cast< int >(imebra::tagId_t::VOILUTSequence_0028_3010)));
  SWIG_Python_SetConstant(d, "tagId_t_SoftcopyVOILUTSequence_0028_3110",SWIG_From_int(static_cast< int >(imebra::tagId_t::SoftcopyVOILUTSequence_0028_3110)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagePresentationComments_0028_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagePresentationComments_0028_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_BiPlaneAcquisitionSequence_0028_5000",SWIG_From_int(static_cast< int >(imebra::tagId_t::BiPlaneAcquisitionSequence_0028_5000)));
  SWIG_Python_SetConstant(d, "tagId_t_RepresentativeFrameNumber_0028_6010",SWIG_From_int(static_cast< int >(imebra::tagId_t::RepresentativeFrameNumber_0028_6010)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameNumbersOfInterest_0028_6020",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameNumbersOfInterest_0028_6020)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameOfInterestDescription_0028_6022",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameOfInterestDescription_0028_6022)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameOfInterestType_0028_6023",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameOfInterestType_0028_6023)));
  SWIG_Python_SetConstant(d, "tagId_t_MaskPointers_0028_6030",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaskPointers_0028_6030)));
  SWIG_Python_SetConstant(d, "tagId_t_RWavePointer_0028_6040",SWIG_From_int(static_cast< int >(imebra::tagId_t::RWavePointer_0028_6040)));
  SWIG_Python_SetConstant(d, "tagId_t_MaskSubtractionSequence_0028_6100",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaskSubtractionSequence_0028_6100)));
  SWIG_Python_SetConstant(d, "tagId_t_MaskOperation_0028_6101",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaskOperation_0028_6101)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicableFrameRange_0028_6102",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicableFrameRange_0028_6102)));
  SWIG_Python_SetConstant(d, "tagId_t_MaskFrameNumbers_0028_6110",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaskFrameNumbers_0028_6110)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastFrameAveraging_0028_6112",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastFrameAveraging_0028_6112)));
  SWIG_Python_SetConstant(d, "tagId_t_MaskSubPixelShift_0028_6114",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaskSubPixelShift_0028_6114)));
  SWIG_Python_SetConstant(d, "tagId_t_TIDOffset_0028_6120",SWIG_From_int(static_cast< int >(imebra::tagId_t::TIDOffset_0028_6120)));
  SWIG_Python_SetConstant(d, "tagId_t_MaskOperationExplanation_0028_6190",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaskOperationExplanation_0028_6190)));
  SWIG_Python_SetConstant(d, "tagId_t_EquipmentAdministratorSequence_0028_7000",SWIG_From_int(static_cast< int >(imebra::tagId_t::EquipmentAdministratorSequence_0028_7000)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfDisplaySubsystems_0028_7001",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfDisplaySubsystems_0028_7001)));
  SWIG_Python_SetConstant(d, "tagId_t_CurrentConfigurationID_0028_7002",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurrentConfigurationID_0028_7002)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySubsystemID_0028_7003",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySubsystemID_0028_7003)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySubsystemName_0028_7004",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySubsystemName_0028_7004)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySubsystemDescription_0028_7005",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySubsystemDescription_0028_7005)));
  SWIG_Python_SetConstant(d, "tagId_t_SystemStatus_0028_7006",SWIG_From_int(static_cast< int >(imebra::tagId_t::SystemStatus_0028_7006)));
  SWIG_Python_SetConstant(d, "tagId_t_SystemStatusComment_0028_7007",SWIG_From_int(static_cast< int >(imebra::tagId_t::SystemStatusComment_0028_7007)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetLuminanceCharacteristicsSequence_0028_7008",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetLuminanceCharacteristicsSequence_0028_7008)));
  SWIG_Python_SetConstant(d, "tagId_t_LuminanceCharacteristicsID_0028_7009",SWIG_From_int(static_cast< int >(imebra::tagId_t::LuminanceCharacteristicsID_0028_7009)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySubsystemConfigurationSequence_0028_700A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySubsystemConfigurationSequence_0028_700A)));
  SWIG_Python_SetConstant(d, "tagId_t_ConfigurationID_0028_700B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConfigurationID_0028_700B)));
  SWIG_Python_SetConstant(d, "tagId_t_ConfigurationName_0028_700C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConfigurationName_0028_700C)));
  SWIG_Python_SetConstant(d, "tagId_t_ConfigurationDescription_0028_700D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConfigurationDescription_0028_700D)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedTargetLuminanceCharacteristicsID_0028_700E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedTargetLuminanceCharacteristicsID_0028_700E)));
  SWIG_Python_SetConstant(d, "tagId_t_QAResultsSequence_0028_700F",SWIG_From_int(static_cast< int >(imebra::tagId_t::QAResultsSequence_0028_700F)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySubsystemQAResultsSequence_0028_7010",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySubsystemQAResultsSequence_0028_7010)));
  SWIG_Python_SetConstant(d, "tagId_t_ConfigurationQAResultsSequence_0028_7011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConfigurationQAResultsSequence_0028_7011)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasurementEquipmentSequence_0028_7012",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasurementEquipmentSequence_0028_7012)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasurementFunctions_0028_7013",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasurementFunctions_0028_7013)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasurementEquipmentType_0028_7014",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasurementEquipmentType_0028_7014)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualEvaluationResultSequence_0028_7015",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualEvaluationResultSequence_0028_7015)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayCalibrationResultSequence_0028_7016",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayCalibrationResultSequence_0028_7016)));
  SWIG_Python_SetConstant(d, "tagId_t_DDLValue_0028_7017",SWIG_From_int(static_cast< int >(imebra::tagId_t::DDLValue_0028_7017)));
  SWIG_Python_SetConstant(d, "tagId_t_CIExyWhitePoint_0028_7018",SWIG_From_int(static_cast< int >(imebra::tagId_t::CIExyWhitePoint_0028_7018)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayFunctionType_0028_7019",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayFunctionType_0028_7019)));
  SWIG_Python_SetConstant(d, "tagId_t_GammaValue_0028_701A",SWIG_From_int(static_cast< int >(imebra::tagId_t::GammaValue_0028_701A)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfLuminancePoints_0028_701B",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfLuminancePoints_0028_701B)));
  SWIG_Python_SetConstant(d, "tagId_t_LuminanceResponseSequence_0028_701C",SWIG_From_int(static_cast< int >(imebra::tagId_t::LuminanceResponseSequence_0028_701C)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetMinimumLuminance_0028_701D",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetMinimumLuminance_0028_701D)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetMaximumLuminance_0028_701E",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetMaximumLuminance_0028_701E)));
  SWIG_Python_SetConstant(d, "tagId_t_LuminanceValue_0028_701F",SWIG_From_int(static_cast< int >(imebra::tagId_t::LuminanceValue_0028_701F)));
  SWIG_Python_SetConstant(d, "tagId_t_LuminanceResponseDescription_0028_7020",SWIG_From_int(static_cast< int >(imebra::tagId_t::LuminanceResponseDescription_0028_7020)));
  SWIG_Python_SetConstant(d, "tagId_t_WhitePointFlag_0028_7021",SWIG_From_int(static_cast< int >(imebra::tagId_t::WhitePointFlag_0028_7021)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayDeviceTypeCodeSequence_0028_7022",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayDeviceTypeCodeSequence_0028_7022)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySubsystemSequence_0028_7023",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySubsystemSequence_0028_7023)));
  SWIG_Python_SetConstant(d, "tagId_t_LuminanceResultSequence_0028_7024",SWIG_From_int(static_cast< int >(imebra::tagId_t::LuminanceResultSequence_0028_7024)));
  SWIG_Python_SetConstant(d, "tagId_t_AmbientLightValueSource_0028_7025",SWIG_From_int(static_cast< int >(imebra::tagId_t::AmbientLightValueSource_0028_7025)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredCharacteristics_0028_7026",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredCharacteristics_0028_7026)));
  SWIG_Python_SetConstant(d, "tagId_t_LuminanceUniformityResultSequence_0028_7027",SWIG_From_int(static_cast< int >(imebra::tagId_t::LuminanceUniformityResultSequence_0028_7027)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualEvaluationTestSequence_0028_7028",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualEvaluationTestSequence_0028_7028)));
  SWIG_Python_SetConstant(d, "tagId_t_TestResult_0028_7029",SWIG_From_int(static_cast< int >(imebra::tagId_t::TestResult_0028_7029)));
  SWIG_Python_SetConstant(d, "tagId_t_TestResultComment_0028_702A",SWIG_From_int(static_cast< int >(imebra::tagId_t::TestResultComment_0028_702A)));
  SWIG_Python_SetConstant(d, "tagId_t_TestImageValidation_0028_702B",SWIG_From_int(static_cast< int >(imebra::tagId_t::TestImageValidation_0028_702B)));
  SWIG_Python_SetConstant(d, "tagId_t_TestPatternCodeSequence_0028_702C",SWIG_From_int(static_cast< int >(imebra::tagId_t::TestPatternCodeSequence_0028_702C)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasurementPatternCodeSequence_0028_702D",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasurementPatternCodeSequence_0028_702D)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualEvaluationMethodCodeSequence_0028_702E",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualEvaluationMethodCodeSequence_0028_702E)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelDataProviderURL_0028_7FE0",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelDataProviderURL_0028_7FE0)));
  SWIG_Python_SetConstant(d, "tagId_t_DataPointRows_0028_9001",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataPointRows_0028_9001)));
  SWIG_Python_SetConstant(d, "tagId_t_DataPointColumns_0028_9002",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataPointColumns_0028_9002)));
  SWIG_Python_SetConstant(d, "tagId_t_SignalDomainColumns_0028_9003",SWIG_From_int(static_cast< int >(imebra::tagId_t::SignalDomainColumns_0028_9003)));
  SWIG_Python_SetConstant(d, "tagId_t_LargestMonochromePixelValue_0028_9099",SWIG_From_int(static_cast< int >(imebra::tagId_t::LargestMonochromePixelValue_0028_9099)));
  SWIG_Python_SetConstant(d, "tagId_t_DataRepresentation_0028_9108",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataRepresentation_0028_9108)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelMeasuresSequence_0028_9110",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelMeasuresSequence_0028_9110)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameVOILUTSequence_0028_9132",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameVOILUTSequence_0028_9132)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelValueTransformationSequence_0028_9145",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelValueTransformationSequence_0028_9145)));
  SWIG_Python_SetConstant(d, "tagId_t_SignalDomainRows_0028_9235",SWIG_From_int(static_cast< int >(imebra::tagId_t::SignalDomainRows_0028_9235)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayFilterPercentage_0028_9411",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayFilterPercentage_0028_9411)));
  SWIG_Python_SetConstant(d, "tagId_t_FramePixelShiftSequence_0028_9415",SWIG_From_int(static_cast< int >(imebra::tagId_t::FramePixelShiftSequence_0028_9415)));
  SWIG_Python_SetConstant(d, "tagId_t_SubtractionItemID_0028_9416",SWIG_From_int(static_cast< int >(imebra::tagId_t::SubtractionItemID_0028_9416)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelIntensityRelationshipLUTSequence_0028_9422",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelIntensityRelationshipLUTSequence_0028_9422)));
  SWIG_Python_SetConstant(d, "tagId_t_FramePixelDataPropertiesSequence_0028_9443",SWIG_From_int(static_cast< int >(imebra::tagId_t::FramePixelDataPropertiesSequence_0028_9443)));
  SWIG_Python_SetConstant(d, "tagId_t_GeometricalProperties_0028_9444",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeometricalProperties_0028_9444)));
  SWIG_Python_SetConstant(d, "tagId_t_GeometricMaximumDistortion_0028_9445",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeometricMaximumDistortion_0028_9445)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageProcessingApplied_0028_9446",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageProcessingApplied_0028_9446)));
  SWIG_Python_SetConstant(d, "tagId_t_MaskSelectionMode_0028_9454",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaskSelectionMode_0028_9454)));
  SWIG_Python_SetConstant(d, "tagId_t_LUTFunction_0028_9474",SWIG_From_int(static_cast< int >(imebra::tagId_t::LUTFunction_0028_9474)));
  SWIG_Python_SetConstant(d, "tagId_t_MaskVisibilityPercentage_0028_9478",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaskVisibilityPercentage_0028_9478)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelShiftSequence_0028_9501",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelShiftSequence_0028_9501)));
  SWIG_Python_SetConstant(d, "tagId_t_RegionPixelShiftSequence_0028_9502",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegionPixelShiftSequence_0028_9502)));
  SWIG_Python_SetConstant(d, "tagId_t_VerticesOfTheRegion_0028_9503",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerticesOfTheRegion_0028_9503)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiFramePresentationSequence_0028_9505",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiFramePresentationSequence_0028_9505)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelShiftFrameRange_0028_9506",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelShiftFrameRange_0028_9506)));
  SWIG_Python_SetConstant(d, "tagId_t_LUTFrameRange_0028_9507",SWIG_From_int(static_cast< int >(imebra::tagId_t::LUTFrameRange_0028_9507)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageToEquipmentMappingMatrix_0028_9520",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageToEquipmentMappingMatrix_0028_9520)));
  SWIG_Python_SetConstant(d, "tagId_t_EquipmentCoordinateSystemIdentification_0028_9537",SWIG_From_int(static_cast< int >(imebra::tagId_t::EquipmentCoordinateSystemIdentification_0028_9537)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyStatusID_0032_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyStatusID_0032_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyPriorityID_0032_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyPriorityID_0032_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyIDIssuer_0032_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyIDIssuer_0032_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyVerifiedDate_0032_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyVerifiedDate_0032_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyVerifiedTime_0032_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyVerifiedTime_0032_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyReadDate_0032_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyReadDate_0032_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyReadTime_0032_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyReadTime_0032_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStudyStartDate_0032_1000",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStudyStartDate_0032_1000)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStudyStartTime_0032_1001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStudyStartTime_0032_1001)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStudyStopDate_0032_1010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStudyStopDate_0032_1010)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStudyStopTime_0032_1011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStudyStopTime_0032_1011)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStudyLocation_0032_1020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStudyLocation_0032_1020)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStudyLocationAETitle_0032_1021",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStudyLocationAETitle_0032_1021)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForStudy_0032_1030",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForStudy_0032_1030)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestingPhysicianIdentificationSequence_0032_1031",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestingPhysicianIdentificationSequence_0032_1031)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestingPhysician_0032_1032",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestingPhysician_0032_1032)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestingService_0032_1033",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestingService_0032_1033)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestingServiceCodeSequence_0032_1034",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestingServiceCodeSequence_0032_1034)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyArrivalDate_0032_1040",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyArrivalDate_0032_1040)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyArrivalTime_0032_1041",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyArrivalTime_0032_1041)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyCompletionDate_0032_1050",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyCompletionDate_0032_1050)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyCompletionTime_0032_1051",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyCompletionTime_0032_1051)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyComponentStatusID_0032_1055",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyComponentStatusID_0032_1055)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedProcedureDescription_0032_1060",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedProcedureDescription_0032_1060)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedProcedureCodeSequence_0032_1064",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedProcedureCodeSequence_0032_1064)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedContrastAgent_0032_1070",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedContrastAgent_0032_1070)));
  SWIG_Python_SetConstant(d, "tagId_t_StudyComments_0032_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::StudyComments_0032_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPatientAliasSequence_0038_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPatientAliasSequence_0038_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_VisitStatusID_0038_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisitStatusID_0038_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_AdmissionID_0038_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdmissionID_0038_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_IssuerOfAdmissionID_0038_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssuerOfAdmissionID_0038_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_IssuerOfAdmissionIDSequence_0038_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssuerOfAdmissionIDSequence_0038_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_RouteOfAdmissions_0038_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::RouteOfAdmissions_0038_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledAdmissionDate_0038_001A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledAdmissionDate_0038_001A)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledAdmissionTime_0038_001B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledAdmissionTime_0038_001B)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledDischargeDate_0038_001C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledDischargeDate_0038_001C)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledDischargeTime_0038_001D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledDischargeTime_0038_001D)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledPatientInstitutionResidence_0038_001E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledPatientInstitutionResidence_0038_001E)));
  SWIG_Python_SetConstant(d, "tagId_t_AdmittingDate_0038_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdmittingDate_0038_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_AdmittingTime_0038_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdmittingTime_0038_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_DischargeDate_0038_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::DischargeDate_0038_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_DischargeTime_0038_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::DischargeTime_0038_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_DischargeDiagnosisDescription_0038_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::DischargeDiagnosisDescription_0038_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_DischargeDiagnosisCodeSequence_0038_0044",SWIG_From_int(static_cast< int >(imebra::tagId_t::DischargeDiagnosisCodeSequence_0038_0044)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecialNeeds_0038_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecialNeeds_0038_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_ServiceEpisodeID_0038_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::ServiceEpisodeID_0038_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_IssuerOfServiceEpisodeID_0038_0061",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssuerOfServiceEpisodeID_0038_0061)));
  SWIG_Python_SetConstant(d, "tagId_t_ServiceEpisodeDescription_0038_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::ServiceEpisodeDescription_0038_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_IssuerOfServiceEpisodeIDSequence_0038_0064",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssuerOfServiceEpisodeIDSequence_0038_0064)));
  SWIG_Python_SetConstant(d, "tagId_t_PertinentDocumentsSequence_0038_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::PertinentDocumentsSequence_0038_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_PertinentResourcesSequence_0038_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::PertinentResourcesSequence_0038_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_ResourceDescription_0038_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResourceDescription_0038_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_CurrentPatientLocation_0038_0300",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurrentPatientLocation_0038_0300)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientInstitutionResidence_0038_0400",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientInstitutionResidence_0038_0400)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientState_0038_0500",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientState_0038_0500)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientClinicalTrialParticipationSequence_0038_0502",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientClinicalTrialParticipationSequence_0038_0502)));
  SWIG_Python_SetConstant(d, "tagId_t_VisitComments_0038_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisitComments_0038_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformOriginality_003A_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformOriginality_003A_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfWaveformChannels_003A_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfWaveformChannels_003A_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfWaveformSamples_003A_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfWaveformSamples_003A_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_SamplingFrequency_003A_001A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SamplingFrequency_003A_001A)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiplexGroupLabel_003A_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiplexGroupLabel_003A_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelDefinitionSequence_003A_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelDefinitionSequence_003A_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformChannelNumber_003A_0202",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformChannelNumber_003A_0202)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelLabel_003A_0203",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelLabel_003A_0203)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelStatus_003A_0205",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelStatus_003A_0205)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelSourceSequence_003A_0208",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelSourceSequence_003A_0208)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelSourceModifiersSequence_003A_0209",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelSourceModifiersSequence_003A_0209)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceWaveformSequence_003A_020A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceWaveformSequence_003A_020A)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelDerivationDescription_003A_020C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelDerivationDescription_003A_020C)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelSensitivity_003A_0210",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelSensitivity_003A_0210)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelSensitivityUnitsSequence_003A_0211",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelSensitivityUnitsSequence_003A_0211)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelSensitivityCorrectionFactor_003A_0212",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelSensitivityCorrectionFactor_003A_0212)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelBaseline_003A_0213",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelBaseline_003A_0213)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelTimeSkew_003A_0214",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelTimeSkew_003A_0214)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelSampleSkew_003A_0215",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelSampleSkew_003A_0215)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelOffset_003A_0218",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelOffset_003A_0218)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformBitsStored_003A_021A",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformBitsStored_003A_021A)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterLowFrequency_003A_0220",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterLowFrequency_003A_0220)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterHighFrequency_003A_0221",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterHighFrequency_003A_0221)));
  SWIG_Python_SetConstant(d, "tagId_t_NotchFilterFrequency_003A_0222",SWIG_From_int(static_cast< int >(imebra::tagId_t::NotchFilterFrequency_003A_0222)));
  SWIG_Python_SetConstant(d, "tagId_t_NotchFilterBandwidth_003A_0223",SWIG_From_int(static_cast< int >(imebra::tagId_t::NotchFilterBandwidth_003A_0223)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformDataDisplayScale_003A_0230",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformDataDisplayScale_003A_0230)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformDisplayBackgroundCIELabValue_003A_0231",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformDisplayBackgroundCIELabValue_003A_0231)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformPresentationGroupSequence_003A_0240",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformPresentationGroupSequence_003A_0240)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationGroupNumber_003A_0241",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationGroupNumber_003A_0241)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelDisplaySequence_003A_0242",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelDisplaySequence_003A_0242)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelRecommendedDisplayCIELabValue_003A_0244",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelRecommendedDisplayCIELabValue_003A_0244)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelPosition_003A_0245",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelPosition_003A_0245)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayShadingFlag_003A_0246",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayShadingFlag_003A_0246)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionalChannelDisplayScale_003A_0247",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionalChannelDisplayScale_003A_0247)));
  SWIG_Python_SetConstant(d, "tagId_t_AbsoluteChannelDisplayScale_003A_0248",SWIG_From_int(static_cast< int >(imebra::tagId_t::AbsoluteChannelDisplayScale_003A_0248)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiplexedAudioChannelsDescriptionCodeSequence_003A_0300",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiplexedAudioChannelsDescriptionCodeSequence_003A_0300)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelIdentificationCode_003A_0301",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelIdentificationCode_003A_0301)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelMode_003A_0302",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelMode_003A_0302)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStationAETitle_0040_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStationAETitle_0040_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepStartDate_0040_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepStartDate_0040_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepStartTime_0040_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepStartTime_0040_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepEndDate_0040_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepEndDate_0040_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepEndTime_0040_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepEndTime_0040_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledPerformingPhysicianName_0040_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledPerformingPhysicianName_0040_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepDescription_0040_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepDescription_0040_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProtocolCodeSequence_0040_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProtocolCodeSequence_0040_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepID_0040_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepID_0040_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_StageCodeSequence_0040_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::StageCodeSequence_0040_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledPerformingPhysicianIdentificationSequence_0040_000B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledPerformingPhysicianIdentificationSequence_0040_000B)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStationName_0040_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStationName_0040_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepLocation_0040_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepLocation_0040_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_PreMedication_0040_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::PreMedication_0040_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepStatus_0040_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepStatus_0040_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_OrderPlacerIdentifierSequence_0040_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrderPlacerIdentifierSequence_0040_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_OrderFillerIdentifierSequence_0040_0027",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrderFillerIdentifierSequence_0040_0027)));
  SWIG_Python_SetConstant(d, "tagId_t_LocalNamespaceEntityID_0040_0031",SWIG_From_int(static_cast< int >(imebra::tagId_t::LocalNamespaceEntityID_0040_0031)));
  SWIG_Python_SetConstant(d, "tagId_t_UniversalEntityID_0040_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::UniversalEntityID_0040_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_UniversalEntityIDType_0040_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::UniversalEntityIDType_0040_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_IdentifierTypeCode_0040_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::IdentifierTypeCode_0040_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_AssigningFacilitySequence_0040_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssigningFacilitySequence_0040_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_AssigningJurisdictionCodeSequence_0040_0039",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssigningJurisdictionCodeSequence_0040_0039)));
  SWIG_Python_SetConstant(d, "tagId_t_AssigningAgencyOrDepartmentCodeSequence_0040_003A",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssigningAgencyOrDepartmentCodeSequence_0040_003A)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepSequence_0040_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepSequence_0040_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedNonImageCompositeSOPInstanceSequence_0040_0220",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedNonImageCompositeSOPInstanceSequence_0040_0220)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedStationAETitle_0040_0241",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedStationAETitle_0040_0241)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedStationName_0040_0242",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedStationName_0040_0242)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedLocation_0040_0243",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedLocation_0040_0243)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureStepStartDate_0040_0244",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureStepStartDate_0040_0244)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureStepStartTime_0040_0245",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureStepStartTime_0040_0245)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureStepEndDate_0040_0250",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureStepEndDate_0040_0250)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureStepEndTime_0040_0251",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureStepEndTime_0040_0251)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureStepStatus_0040_0252",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureStepStatus_0040_0252)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureStepID_0040_0253",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureStepID_0040_0253)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureStepDescription_0040_0254",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureStepDescription_0040_0254)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureTypeDescription_0040_0255",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureTypeDescription_0040_0255)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProtocolCodeSequence_0040_0260",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProtocolCodeSequence_0040_0260)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProtocolType_0040_0261",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProtocolType_0040_0261)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStepAttributesSequence_0040_0270",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStepAttributesSequence_0040_0270)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestAttributesSequence_0040_0275",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestAttributesSequence_0040_0275)));
  SWIG_Python_SetConstant(d, "tagId_t_CommentsOnThePerformedProcedureStep_0040_0280",SWIG_From_int(static_cast< int >(imebra::tagId_t::CommentsOnThePerformedProcedureStep_0040_0280)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureStepDiscontinuationReasonCodeSequence_0040_0281",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureStepDiscontinuationReasonCodeSequence_0040_0281)));
  SWIG_Python_SetConstant(d, "tagId_t_QuantitySequence_0040_0293",SWIG_From_int(static_cast< int >(imebra::tagId_t::QuantitySequence_0040_0293)));
  SWIG_Python_SetConstant(d, "tagId_t_Quantity_0040_0294",SWIG_From_int(static_cast< int >(imebra::tagId_t::Quantity_0040_0294)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuringUnitsSequence_0040_0295",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuringUnitsSequence_0040_0295)));
  SWIG_Python_SetConstant(d, "tagId_t_BillingItemSequence_0040_0296",SWIG_From_int(static_cast< int >(imebra::tagId_t::BillingItemSequence_0040_0296)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalTimeOfFluoroscopy_0040_0300",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalTimeOfFluoroscopy_0040_0300)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalNumberOfExposures_0040_0301",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalNumberOfExposures_0040_0301)));
  SWIG_Python_SetConstant(d, "tagId_t_EntranceDose_0040_0302",SWIG_From_int(static_cast< int >(imebra::tagId_t::EntranceDose_0040_0302)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposedArea_0040_0303",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposedArea_0040_0303)));
  SWIG_Python_SetConstant(d, "tagId_t_DistanceSourceToEntrance_0040_0306",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistanceSourceToEntrance_0040_0306)));
  SWIG_Python_SetConstant(d, "tagId_t_DistanceSourceToSupport_0040_0307",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistanceSourceToSupport_0040_0307)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureDoseSequence_0040_030E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureDoseSequence_0040_030E)));
  SWIG_Python_SetConstant(d, "tagId_t_CommentsOnRadiationDose_0040_0310",SWIG_From_int(static_cast< int >(imebra::tagId_t::CommentsOnRadiationDose_0040_0310)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayOutput_0040_0312",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayOutput_0040_0312)));
  SWIG_Python_SetConstant(d, "tagId_t_HalfValueLayer_0040_0314",SWIG_From_int(static_cast< int >(imebra::tagId_t::HalfValueLayer_0040_0314)));
  SWIG_Python_SetConstant(d, "tagId_t_OrganDose_0040_0316",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrganDose_0040_0316)));
  SWIG_Python_SetConstant(d, "tagId_t_OrganExposed_0040_0318",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrganExposed_0040_0318)));
  SWIG_Python_SetConstant(d, "tagId_t_BillingProcedureStepSequence_0040_0320",SWIG_From_int(static_cast< int >(imebra::tagId_t::BillingProcedureStepSequence_0040_0320)));
  SWIG_Python_SetConstant(d, "tagId_t_FilmConsumptionSequence_0040_0321",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilmConsumptionSequence_0040_0321)));
  SWIG_Python_SetConstant(d, "tagId_t_BillingSuppliesAndDevicesSequence_0040_0324",SWIG_From_int(static_cast< int >(imebra::tagId_t::BillingSuppliesAndDevicesSequence_0040_0324)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedProcedureStepSequence_0040_0330",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedProcedureStepSequence_0040_0330)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedSeriesSequence_0040_0340",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedSeriesSequence_0040_0340)));
  SWIG_Python_SetConstant(d, "tagId_t_CommentsOnTheScheduledProcedureStep_0040_0400",SWIG_From_int(static_cast< int >(imebra::tagId_t::CommentsOnTheScheduledProcedureStep_0040_0400)));
  SWIG_Python_SetConstant(d, "tagId_t_ProtocolContextSequence_0040_0440",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProtocolContextSequence_0040_0440)));
  SWIG_Python_SetConstant(d, "tagId_t_ContentItemModifierSequence_0040_0441",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContentItemModifierSequence_0040_0441)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledSpecimenSequence_0040_0500",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledSpecimenSequence_0040_0500)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenAccessionNumber_0040_050A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenAccessionNumber_0040_050A)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerIdentifier_0040_0512",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerIdentifier_0040_0512)));
  SWIG_Python_SetConstant(d, "tagId_t_IssuerOfTheContainerIdentifierSequence_0040_0513",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssuerOfTheContainerIdentifierSequence_0040_0513)));
  SWIG_Python_SetConstant(d, "tagId_t_AlternateContainerIdentifierSequence_0040_0515",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlternateContainerIdentifierSequence_0040_0515)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerTypeCodeSequence_0040_0518",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerTypeCodeSequence_0040_0518)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerDescription_0040_051A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerDescription_0040_051A)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerComponentSequence_0040_0520",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerComponentSequence_0040_0520)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenSequence_0040_0550",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenSequence_0040_0550)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenIdentifier_0040_0551",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenIdentifier_0040_0551)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenDescriptionSequenceTrial_0040_0552",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenDescriptionSequenceTrial_0040_0552)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenDescriptionTrial_0040_0553",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenDescriptionTrial_0040_0553)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenUID_0040_0554",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenUID_0040_0554)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionContextSequence_0040_0555",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionContextSequence_0040_0555)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionContextDescription_0040_0556",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionContextDescription_0040_0556)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenDescriptionSequence_0040_0560",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenDescriptionSequence_0040_0560)));
  SWIG_Python_SetConstant(d, "tagId_t_IssuerOfTheSpecimenIdentifierSequence_0040_0562",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssuerOfTheSpecimenIdentifierSequence_0040_0562)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenTypeCodeSequence_0040_059A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenTypeCodeSequence_0040_059A)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenShortDescription_0040_0600",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenShortDescription_0040_0600)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenDetailedDescription_0040_0602",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenDetailedDescription_0040_0602)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenPreparationSequence_0040_0610",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenPreparationSequence_0040_0610)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenPreparationStepContentItemSequence_0040_0612",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenPreparationStepContentItemSequence_0040_0612)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenLocalizationContentItemSequence_0040_0620",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenLocalizationContentItemSequence_0040_0620)));
  SWIG_Python_SetConstant(d, "tagId_t_SlideIdentifier_0040_06FA",SWIG_From_int(static_cast< int >(imebra::tagId_t::SlideIdentifier_0040_06FA)));
  SWIG_Python_SetConstant(d, "tagId_t_WholeSlideMicroscopyImageFrameTypeSequence_0040_0710",SWIG_From_int(static_cast< int >(imebra::tagId_t::WholeSlideMicroscopyImageFrameTypeSequence_0040_0710)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageCenterPointCoordinatesSequence_0040_071A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageCenterPointCoordinatesSequence_0040_071A)));
  SWIG_Python_SetConstant(d, "tagId_t_XOffsetInSlideCoordinateSystem_0040_072A",SWIG_From_int(static_cast< int >(imebra::tagId_t::XOffsetInSlideCoordinateSystem_0040_072A)));
  SWIG_Python_SetConstant(d, "tagId_t_YOffsetInSlideCoordinateSystem_0040_073A",SWIG_From_int(static_cast< int >(imebra::tagId_t::YOffsetInSlideCoordinateSystem_0040_073A)));
  SWIG_Python_SetConstant(d, "tagId_t_ZOffsetInSlideCoordinateSystem_0040_074A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ZOffsetInSlideCoordinateSystem_0040_074A)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelSpacingSequence_0040_08D8",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelSpacingSequence_0040_08D8)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateSystemAxisCodeSequence_0040_08DA",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateSystemAxisCodeSequence_0040_08DA)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasurementUnitsCodeSequence_0040_08EA",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasurementUnitsCodeSequence_0040_08EA)));
  SWIG_Python_SetConstant(d, "tagId_t_VitalStainCodeSequenceTrial_0040_09F8",SWIG_From_int(static_cast< int >(imebra::tagId_t::VitalStainCodeSequenceTrial_0040_09F8)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedProcedureID_0040_1001",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedProcedureID_0040_1001)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForTheRequestedProcedure_0040_1002",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForTheRequestedProcedure_0040_1002)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedProcedurePriority_0040_1003",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedProcedurePriority_0040_1003)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientTransportArrangements_0040_1004",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientTransportArrangements_0040_1004)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedProcedureLocation_0040_1005",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedProcedureLocation_0040_1005)));
  SWIG_Python_SetConstant(d, "tagId_t_PlacerOrderNumberProcedure_0040_1006",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlacerOrderNumberProcedure_0040_1006)));
  SWIG_Python_SetConstant(d, "tagId_t_FillerOrderNumberProcedure_0040_1007",SWIG_From_int(static_cast< int >(imebra::tagId_t::FillerOrderNumberProcedure_0040_1007)));
  SWIG_Python_SetConstant(d, "tagId_t_ConfidentialityCode_0040_1008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConfidentialityCode_0040_1008)));
  SWIG_Python_SetConstant(d, "tagId_t_ReportingPriority_0040_1009",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReportingPriority_0040_1009)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForRequestedProcedureCodeSequence_0040_100A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForRequestedProcedureCodeSequence_0040_100A)));
  SWIG_Python_SetConstant(d, "tagId_t_NamesOfIntendedRecipientsOfResults_0040_1010",SWIG_From_int(static_cast< int >(imebra::tagId_t::NamesOfIntendedRecipientsOfResults_0040_1010)));
  SWIG_Python_SetConstant(d, "tagId_t_IntendedRecipientsOfResultsIdentificationSequence_0040_1011",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntendedRecipientsOfResultsIdentificationSequence_0040_1011)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForPerformedProcedureCodeSequence_0040_1012",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForPerformedProcedureCodeSequence_0040_1012)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedProcedureDescriptionTrial_0040_1060",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedProcedureDescriptionTrial_0040_1060)));
  SWIG_Python_SetConstant(d, "tagId_t_PersonIdentificationCodeSequence_0040_1101",SWIG_From_int(static_cast< int >(imebra::tagId_t::PersonIdentificationCodeSequence_0040_1101)));
  SWIG_Python_SetConstant(d, "tagId_t_PersonAddress_0040_1102",SWIG_From_int(static_cast< int >(imebra::tagId_t::PersonAddress_0040_1102)));
  SWIG_Python_SetConstant(d, "tagId_t_PersonTelephoneNumbers_0040_1103",SWIG_From_int(static_cast< int >(imebra::tagId_t::PersonTelephoneNumbers_0040_1103)));
  SWIG_Python_SetConstant(d, "tagId_t_PersonTelecomInformation_0040_1104",SWIG_From_int(static_cast< int >(imebra::tagId_t::PersonTelecomInformation_0040_1104)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedProcedureComments_0040_1400",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedProcedureComments_0040_1400)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForTheImagingServiceRequest_0040_2001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForTheImagingServiceRequest_0040_2001)));
  SWIG_Python_SetConstant(d, "tagId_t_IssueDateOfImagingServiceRequest_0040_2004",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssueDateOfImagingServiceRequest_0040_2004)));
  SWIG_Python_SetConstant(d, "tagId_t_IssueTimeOfImagingServiceRequest_0040_2005",SWIG_From_int(static_cast< int >(imebra::tagId_t::IssueTimeOfImagingServiceRequest_0040_2005)));
  SWIG_Python_SetConstant(d, "tagId_t_OrderEnteredBy_0040_2008",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrderEnteredBy_0040_2008)));
  SWIG_Python_SetConstant(d, "tagId_t_OrderEntererLocation_0040_2009",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrderEntererLocation_0040_2009)));
  SWIG_Python_SetConstant(d, "tagId_t_OrderCallbackPhoneNumber_0040_2010",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrderCallbackPhoneNumber_0040_2010)));
  SWIG_Python_SetConstant(d, "tagId_t_OrderCallbackTelecomInformation_0040_2011",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrderCallbackTelecomInformation_0040_2011)));
  SWIG_Python_SetConstant(d, "tagId_t_PlacerOrderNumberImagingServiceRequestRetired_0040_2006",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlacerOrderNumberImagingServiceRequestRetired_0040_2006)));
  SWIG_Python_SetConstant(d, "tagId_t_PlacerOrderNumberImagingServiceRequest_0040_2016",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlacerOrderNumberImagingServiceRequest_0040_2016)));
  SWIG_Python_SetConstant(d, "tagId_t_FillerOrderNumberImagingServiceRequestRetired_0040_2007",SWIG_From_int(static_cast< int >(imebra::tagId_t::FillerOrderNumberImagingServiceRequestRetired_0040_2007)));
  SWIG_Python_SetConstant(d, "tagId_t_FillerOrderNumberImagingServiceRequest_0040_2017",SWIG_From_int(static_cast< int >(imebra::tagId_t::FillerOrderNumberImagingServiceRequest_0040_2017)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagingServiceRequestComments_0040_2400",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagingServiceRequestComments_0040_2400)));
  SWIG_Python_SetConstant(d, "tagId_t_ConfidentialityConstraintOnPatientDataDescription_0040_3001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConfidentialityConstraintOnPatientDataDescription_0040_3001)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralPurposeScheduledProcedureStepStatus_0040_4001",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralPurposeScheduledProcedureStepStatus_0040_4001)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralPurposePerformedProcedureStepStatus_0040_4002",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralPurposePerformedProcedureStepStatus_0040_4002)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralPurposeScheduledProcedureStepPriority_0040_4003",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralPurposeScheduledProcedureStepPriority_0040_4003)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcessingApplicationsCodeSequence_0040_4004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcessingApplicationsCodeSequence_0040_4004)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepStartDateTime_0040_4005",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepStartDateTime_0040_4005)));
  SWIG_Python_SetConstant(d, "tagId_t_MultipleCopiesFlag_0040_4006",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultipleCopiesFlag_0040_4006)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcessingApplicationsCodeSequence_0040_4007",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcessingApplicationsCodeSequence_0040_4007)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepExpirationDateTime_0040_4008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepExpirationDateTime_0040_4008)));
  SWIG_Python_SetConstant(d, "tagId_t_HumanPerformerCodeSequence_0040_4009",SWIG_From_int(static_cast< int >(imebra::tagId_t::HumanPerformerCodeSequence_0040_4009)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepModificationDateTime_0040_4010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepModificationDateTime_0040_4010)));
  SWIG_Python_SetConstant(d, "tagId_t_ExpectedCompletionDateTime_0040_4011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExpectedCompletionDateTime_0040_4011)));
  SWIG_Python_SetConstant(d, "tagId_t_ResultingGeneralPurposePerformedProcedureStepsSequence_0040_4015",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResultingGeneralPurposePerformedProcedureStepsSequence_0040_4015)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedGeneralPurposeScheduledProcedureStepSequence_0040_4016",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedGeneralPurposeScheduledProcedureStepSequence_0040_4016)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledWorkitemCodeSequence_0040_4018",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledWorkitemCodeSequence_0040_4018)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedWorkitemCodeSequence_0040_4019",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedWorkitemCodeSequence_0040_4019)));
  SWIG_Python_SetConstant(d, "tagId_t_InputAvailabilityFlag_0040_4020",SWIG_From_int(static_cast< int >(imebra::tagId_t::InputAvailabilityFlag_0040_4020)));
  SWIG_Python_SetConstant(d, "tagId_t_InputInformationSequence_0040_4021",SWIG_From_int(static_cast< int >(imebra::tagId_t::InputInformationSequence_0040_4021)));
  SWIG_Python_SetConstant(d, "tagId_t_RelevantInformationSequence_0040_4022",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelevantInformationSequence_0040_4022)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedGeneralPurposeScheduledProcedureStepTransactionUID_0040_4023",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedGeneralPurposeScheduledProcedureStepTransactionUID_0040_4023)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStationNameCodeSequence_0040_4025",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStationNameCodeSequence_0040_4025)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStationClassCodeSequence_0040_4026",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStationClassCodeSequence_0040_4026)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledStationGeographicLocationCodeSequence_0040_4027",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledStationGeographicLocationCodeSequence_0040_4027)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedStationNameCodeSequence_0040_4028",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedStationNameCodeSequence_0040_4028)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedStationClassCodeSequence_0040_4029",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedStationClassCodeSequence_0040_4029)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedStationGeographicLocationCodeSequence_0040_4030",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedStationGeographicLocationCodeSequence_0040_4030)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedSubsequentWorkitemCodeSequence_0040_4031",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedSubsequentWorkitemCodeSequence_0040_4031)));
  SWIG_Python_SetConstant(d, "tagId_t_NonDICOMOutputCodeSequence_0040_4032",SWIG_From_int(static_cast< int >(imebra::tagId_t::NonDICOMOutputCodeSequence_0040_4032)));
  SWIG_Python_SetConstant(d, "tagId_t_OutputInformationSequence_0040_4033",SWIG_From_int(static_cast< int >(imebra::tagId_t::OutputInformationSequence_0040_4033)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledHumanPerformersSequence_0040_4034",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledHumanPerformersSequence_0040_4034)));
  SWIG_Python_SetConstant(d, "tagId_t_ActualHumanPerformersSequence_0040_4035",SWIG_From_int(static_cast< int >(imebra::tagId_t::ActualHumanPerformersSequence_0040_4035)));
  SWIG_Python_SetConstant(d, "tagId_t_HumanPerformerOrganization_0040_4036",SWIG_From_int(static_cast< int >(imebra::tagId_t::HumanPerformerOrganization_0040_4036)));
  SWIG_Python_SetConstant(d, "tagId_t_HumanPerformerName_0040_4037",SWIG_From_int(static_cast< int >(imebra::tagId_t::HumanPerformerName_0040_4037)));
  SWIG_Python_SetConstant(d, "tagId_t_RawDataHandling_0040_4040",SWIG_From_int(static_cast< int >(imebra::tagId_t::RawDataHandling_0040_4040)));
  SWIG_Python_SetConstant(d, "tagId_t_InputReadinessState_0040_4041",SWIG_From_int(static_cast< int >(imebra::tagId_t::InputReadinessState_0040_4041)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureStepStartDateTime_0040_4050",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureStepStartDateTime_0040_4050)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureStepEndDateTime_0040_4051",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureStepEndDateTime_0040_4051)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureStepCancellationDateTime_0040_4052",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureStepCancellationDateTime_0040_4052)));
  SWIG_Python_SetConstant(d, "tagId_t_OutputDestinationSequence_0040_4070",SWIG_From_int(static_cast< int >(imebra::tagId_t::OutputDestinationSequence_0040_4070)));
  SWIG_Python_SetConstant(d, "tagId_t_DICOMStorageSequence_0040_4071",SWIG_From_int(static_cast< int >(imebra::tagId_t::DICOMStorageSequence_0040_4071)));
  SWIG_Python_SetConstant(d, "tagId_t_STOWRSStorageSequence_0040_4072",SWIG_From_int(static_cast< int >(imebra::tagId_t::STOWRSStorageSequence_0040_4072)));
  SWIG_Python_SetConstant(d, "tagId_t_StorageURL_0040_4073",SWIG_From_int(static_cast< int >(imebra::tagId_t::StorageURL_0040_4073)));
  SWIG_Python_SetConstant(d, "tagId_t_XDSStorageSequence_0040_4074",SWIG_From_int(static_cast< int >(imebra::tagId_t::XDSStorageSequence_0040_4074)));
  SWIG_Python_SetConstant(d, "tagId_t_EntranceDoseInmGy_0040_8302",SWIG_From_int(static_cast< int >(imebra::tagId_t::EntranceDoseInmGy_0040_8302)));
  SWIG_Python_SetConstant(d, "tagId_t_EntranceDoseDerivation_0040_8303",SWIG_From_int(static_cast< int >(imebra::tagId_t::EntranceDoseDerivation_0040_8303)));
  SWIG_Python_SetConstant(d, "tagId_t_ParametricMapFrameTypeSequence_0040_9092",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParametricMapFrameTypeSequence_0040_9092)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedImageRealWorldValueMappingSequence_0040_9094",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedImageRealWorldValueMappingSequence_0040_9094)));
  SWIG_Python_SetConstant(d, "tagId_t_RealWorldValueMappingSequence_0040_9096",SWIG_From_int(static_cast< int >(imebra::tagId_t::RealWorldValueMappingSequence_0040_9096)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelValueMappingCodeSequence_0040_9098",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelValueMappingCodeSequence_0040_9098)));
  SWIG_Python_SetConstant(d, "tagId_t_LUTLabel_0040_9210",SWIG_From_int(static_cast< int >(imebra::tagId_t::LUTLabel_0040_9210)));
  SWIG_Python_SetConstant(d, "tagId_t_RealWorldValueLastValueMapped_0040_9211",SWIG_From_int(static_cast< int >(imebra::tagId_t::RealWorldValueLastValueMapped_0040_9211)));
  SWIG_Python_SetConstant(d, "tagId_t_RealWorldValueLUTData_0040_9212",SWIG_From_int(static_cast< int >(imebra::tagId_t::RealWorldValueLUTData_0040_9212)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleFloatRealWorldValueLastValueMapped_0040_9213",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleFloatRealWorldValueLastValueMapped_0040_9213)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleFloatRealWorldValueFirstValueMapped_0040_9214",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleFloatRealWorldValueFirstValueMapped_0040_9214)));
  SWIG_Python_SetConstant(d, "tagId_t_RealWorldValueFirstValueMapped_0040_9216",SWIG_From_int(static_cast< int >(imebra::tagId_t::RealWorldValueFirstValueMapped_0040_9216)));
  SWIG_Python_SetConstant(d, "tagId_t_QuantityDefinitionSequence_0040_9220",SWIG_From_int(static_cast< int >(imebra::tagId_t::QuantityDefinitionSequence_0040_9220)));
  SWIG_Python_SetConstant(d, "tagId_t_RealWorldValueIntercept_0040_9224",SWIG_From_int(static_cast< int >(imebra::tagId_t::RealWorldValueIntercept_0040_9224)));
  SWIG_Python_SetConstant(d, "tagId_t_RealWorldValueSlope_0040_9225",SWIG_From_int(static_cast< int >(imebra::tagId_t::RealWorldValueSlope_0040_9225)));
  SWIG_Python_SetConstant(d, "tagId_t_FindingsFlagTrial_0040_A007",SWIG_From_int(static_cast< int >(imebra::tagId_t::FindingsFlagTrial_0040_A007)));
  SWIG_Python_SetConstant(d, "tagId_t_RelationshipType_0040_A010",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelationshipType_0040_A010)));
  SWIG_Python_SetConstant(d, "tagId_t_FindingsSequenceTrial_0040_A020",SWIG_From_int(static_cast< int >(imebra::tagId_t::FindingsSequenceTrial_0040_A020)));
  SWIG_Python_SetConstant(d, "tagId_t_FindingsGroupUIDTrial_0040_A021",SWIG_From_int(static_cast< int >(imebra::tagId_t::FindingsGroupUIDTrial_0040_A021)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFindingsGroupUIDTrial_0040_A022",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFindingsGroupUIDTrial_0040_A022)));
  SWIG_Python_SetConstant(d, "tagId_t_FindingsGroupRecordingDateTrial_0040_A023",SWIG_From_int(static_cast< int >(imebra::tagId_t::FindingsGroupRecordingDateTrial_0040_A023)));
  SWIG_Python_SetConstant(d, "tagId_t_FindingsGroupRecordingTimeTrial_0040_A024",SWIG_From_int(static_cast< int >(imebra::tagId_t::FindingsGroupRecordingTimeTrial_0040_A024)));
  SWIG_Python_SetConstant(d, "tagId_t_FindingsSourceCategoryCodeSequenceTrial_0040_A026",SWIG_From_int(static_cast< int >(imebra::tagId_t::FindingsSourceCategoryCodeSequenceTrial_0040_A026)));
  SWIG_Python_SetConstant(d, "tagId_t_VerifyingOrganization_0040_A027",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerifyingOrganization_0040_A027)));
  SWIG_Python_SetConstant(d, "tagId_t_DocumentingOrganizationIdentifierCodeSequenceTrial_0040_A028",SWIG_From_int(static_cast< int >(imebra::tagId_t::DocumentingOrganizationIdentifierCodeSequenceTrial_0040_A028)));
  SWIG_Python_SetConstant(d, "tagId_t_VerificationDateTime_0040_A030",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerificationDateTime_0040_A030)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationDateTime_0040_A032",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationDateTime_0040_A032)));
  SWIG_Python_SetConstant(d, "tagId_t_ValueType_0040_A040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ValueType_0040_A040)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptNameCodeSequence_0040_A043",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptNameCodeSequence_0040_A043)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasurementPrecisionDescriptionTrial_0040_A047",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasurementPrecisionDescriptionTrial_0040_A047)));
  SWIG_Python_SetConstant(d, "tagId_t_ContinuityOfContent_0040_A050",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContinuityOfContent_0040_A050)));
  SWIG_Python_SetConstant(d, "tagId_t_UrgencyOrPriorityAlertsTrial_0040_A057",SWIG_From_int(static_cast< int >(imebra::tagId_t::UrgencyOrPriorityAlertsTrial_0040_A057)));
  SWIG_Python_SetConstant(d, "tagId_t_SequencingIndicatorTrial_0040_A060",SWIG_From_int(static_cast< int >(imebra::tagId_t::SequencingIndicatorTrial_0040_A060)));
  SWIG_Python_SetConstant(d, "tagId_t_DocumentIdentifierCodeSequenceTrial_0040_A066",SWIG_From_int(static_cast< int >(imebra::tagId_t::DocumentIdentifierCodeSequenceTrial_0040_A066)));
  SWIG_Python_SetConstant(d, "tagId_t_DocumentAuthorTrial_0040_A067",SWIG_From_int(static_cast< int >(imebra::tagId_t::DocumentAuthorTrial_0040_A067)));
  SWIG_Python_SetConstant(d, "tagId_t_DocumentAuthorIdentifierCodeSequenceTrial_0040_A068",SWIG_From_int(static_cast< int >(imebra::tagId_t::DocumentAuthorIdentifierCodeSequenceTrial_0040_A068)));
  SWIG_Python_SetConstant(d, "tagId_t_IdentifierCodeSequenceTrial_0040_A070",SWIG_From_int(static_cast< int >(imebra::tagId_t::IdentifierCodeSequenceTrial_0040_A070)));
  SWIG_Python_SetConstant(d, "tagId_t_VerifyingObserverSequence_0040_A073",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerifyingObserverSequence_0040_A073)));
  SWIG_Python_SetConstant(d, "tagId_t_ObjectBinaryIdentifierTrial_0040_A074",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObjectBinaryIdentifierTrial_0040_A074)));
  SWIG_Python_SetConstant(d, "tagId_t_VerifyingObserverName_0040_A075",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerifyingObserverName_0040_A075)));
  SWIG_Python_SetConstant(d, "tagId_t_DocumentingObserverIdentifierCodeSequenceTrial_0040_A076",SWIG_From_int(static_cast< int >(imebra::tagId_t::DocumentingObserverIdentifierCodeSequenceTrial_0040_A076)));
  SWIG_Python_SetConstant(d, "tagId_t_AuthorObserverSequence_0040_A078",SWIG_From_int(static_cast< int >(imebra::tagId_t::AuthorObserverSequence_0040_A078)));
  SWIG_Python_SetConstant(d, "tagId_t_ParticipantSequence_0040_A07A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParticipantSequence_0040_A07A)));
  SWIG_Python_SetConstant(d, "tagId_t_CustodialOrganizationSequence_0040_A07C",SWIG_From_int(static_cast< int >(imebra::tagId_t::CustodialOrganizationSequence_0040_A07C)));
  SWIG_Python_SetConstant(d, "tagId_t_ParticipationType_0040_A080",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParticipationType_0040_A080)));
  SWIG_Python_SetConstant(d, "tagId_t_ParticipationDateTime_0040_A082",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParticipationDateTime_0040_A082)));
  SWIG_Python_SetConstant(d, "tagId_t_ObserverType_0040_A084",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObserverType_0040_A084)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureIdentifierCodeSequenceTrial_0040_A085",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureIdentifierCodeSequenceTrial_0040_A085)));
  SWIG_Python_SetConstant(d, "tagId_t_VerifyingObserverIdentificationCodeSequence_0040_A088",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerifyingObserverIdentificationCodeSequence_0040_A088)));
  SWIG_Python_SetConstant(d, "tagId_t_ObjectDirectoryBinaryIdentifierTrial_0040_A089",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObjectDirectoryBinaryIdentifierTrial_0040_A089)));
  SWIG_Python_SetConstant(d, "tagId_t_EquivalentCDADocumentSequence_0040_A090",SWIG_From_int(static_cast< int >(imebra::tagId_t::EquivalentCDADocumentSequence_0040_A090)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedWaveformChannels_0040_A0B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedWaveformChannels_0040_A0B0)));
  SWIG_Python_SetConstant(d, "tagId_t_DateOfDocumentOrVerbalTransactionTrial_0040_A110",SWIG_From_int(static_cast< int >(imebra::tagId_t::DateOfDocumentOrVerbalTransactionTrial_0040_A110)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeOfDocumentCreationOrVerbalTransactionTrial_0040_A112",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeOfDocumentCreationOrVerbalTransactionTrial_0040_A112)));
  SWIG_Python_SetConstant(d, "tagId_t_DateTime_0040_A120",SWIG_From_int(static_cast< int >(imebra::tagId_t::DateTime_0040_A120)));
  SWIG_Python_SetConstant(d, "tagId_t_Date_0040_A121",SWIG_From_int(static_cast< int >(imebra::tagId_t::Date_0040_A121)));
  SWIG_Python_SetConstant(d, "tagId_t_Time_0040_A122",SWIG_From_int(static_cast< int >(imebra::tagId_t::Time_0040_A122)));
  SWIG_Python_SetConstant(d, "tagId_t_PersonName_0040_A123",SWIG_From_int(static_cast< int >(imebra::tagId_t::PersonName_0040_A123)));
  SWIG_Python_SetConstant(d, "tagId_t_UID_0040_A124",SWIG_From_int(static_cast< int >(imebra::tagId_t::UID_0040_A124)));
  SWIG_Python_SetConstant(d, "tagId_t_ReportStatusIDTrial_0040_A125",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReportStatusIDTrial_0040_A125)));
  SWIG_Python_SetConstant(d, "tagId_t_TemporalRangeType_0040_A130",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemporalRangeType_0040_A130)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSamplePositions_0040_A132",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSamplePositions_0040_A132)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFrameNumbers_0040_A136",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFrameNumbers_0040_A136)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedTimeOffsets_0040_A138",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedTimeOffsets_0040_A138)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedDateTime_0040_A13A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedDateTime_0040_A13A)));
  SWIG_Python_SetConstant(d, "tagId_t_TextValue_0040_A160",SWIG_From_int(static_cast< int >(imebra::tagId_t::TextValue_0040_A160)));
  SWIG_Python_SetConstant(d, "tagId_t_FloatingPointValue_0040_A161",SWIG_From_int(static_cast< int >(imebra::tagId_t::FloatingPointValue_0040_A161)));
  SWIG_Python_SetConstant(d, "tagId_t_RationalNumeratorValue_0040_A162",SWIG_From_int(static_cast< int >(imebra::tagId_t::RationalNumeratorValue_0040_A162)));
  SWIG_Python_SetConstant(d, "tagId_t_RationalDenominatorValue_0040_A163",SWIG_From_int(static_cast< int >(imebra::tagId_t::RationalDenominatorValue_0040_A163)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationCategoryCodeSequenceTrial_0040_A167",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationCategoryCodeSequenceTrial_0040_A167)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptCodeSequence_0040_A168",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptCodeSequence_0040_A168)));
  SWIG_Python_SetConstant(d, "tagId_t_BibliographicCitationTrial_0040_A16A",SWIG_From_int(static_cast< int >(imebra::tagId_t::BibliographicCitationTrial_0040_A16A)));
  SWIG_Python_SetConstant(d, "tagId_t_PurposeOfReferenceCodeSequence_0040_A170",SWIG_From_int(static_cast< int >(imebra::tagId_t::PurposeOfReferenceCodeSequence_0040_A170)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationUID_0040_A171",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationUID_0040_A171)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedObservationUIDTrial_0040_A172",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedObservationUIDTrial_0040_A172)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedObservationClassTrial_0040_A173",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedObservationClassTrial_0040_A173)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedObjectObservationClassTrial_0040_A174",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedObjectObservationClassTrial_0040_A174)));
  SWIG_Python_SetConstant(d, "tagId_t_AnnotationGroupNumber_0040_A180",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnnotationGroupNumber_0040_A180)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationDateTrial_0040_A192",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationDateTrial_0040_A192)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationTimeTrial_0040_A193",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationTimeTrial_0040_A193)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasurementAutomationTrial_0040_A194",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasurementAutomationTrial_0040_A194)));
  SWIG_Python_SetConstant(d, "tagId_t_ModifierCodeSequence_0040_A195",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModifierCodeSequence_0040_A195)));
  SWIG_Python_SetConstant(d, "tagId_t_IdentificationDescriptionTrial_0040_A224",SWIG_From_int(static_cast< int >(imebra::tagId_t::IdentificationDescriptionTrial_0040_A224)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinatesSetGeometricTypeTrial_0040_A290",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinatesSetGeometricTypeTrial_0040_A290)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmCodeSequenceTrial_0040_A296",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmCodeSequenceTrial_0040_A296)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmDescriptionTrial_0040_A297",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmDescriptionTrial_0040_A297)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelCoordinatesSetTrial_0040_A29A",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelCoordinatesSetTrial_0040_A29A)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredValueSequence_0040_A300",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredValueSequence_0040_A300)));
  SWIG_Python_SetConstant(d, "tagId_t_NumericValueQualifierCodeSequence_0040_A301",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumericValueQualifierCodeSequence_0040_A301)));
  SWIG_Python_SetConstant(d, "tagId_t_CurrentObserverTrial_0040_A307",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurrentObserverTrial_0040_A307)));
  SWIG_Python_SetConstant(d, "tagId_t_NumericValue_0040_A30A",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumericValue_0040_A30A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedAccessionSequenceTrial_0040_A313",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedAccessionSequenceTrial_0040_A313)));
  SWIG_Python_SetConstant(d, "tagId_t_ReportStatusCommentTrial_0040_A33A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReportStatusCommentTrial_0040_A33A)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureContextSequenceTrial_0040_A340",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureContextSequenceTrial_0040_A340)));
  SWIG_Python_SetConstant(d, "tagId_t_VerbalSourceTrial_0040_A352",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerbalSourceTrial_0040_A352)));
  SWIG_Python_SetConstant(d, "tagId_t_AddressTrial_0040_A353",SWIG_From_int(static_cast< int >(imebra::tagId_t::AddressTrial_0040_A353)));
  SWIG_Python_SetConstant(d, "tagId_t_TelephoneNumberTrial_0040_A354",SWIG_From_int(static_cast< int >(imebra::tagId_t::TelephoneNumberTrial_0040_A354)));
  SWIG_Python_SetConstant(d, "tagId_t_VerbalSourceIdentifierCodeSequenceTrial_0040_A358",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerbalSourceIdentifierCodeSequenceTrial_0040_A358)));
  SWIG_Python_SetConstant(d, "tagId_t_PredecessorDocumentsSequence_0040_A360",SWIG_From_int(static_cast< int >(imebra::tagId_t::PredecessorDocumentsSequence_0040_A360)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRequestSequence_0040_A370",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRequestSequence_0040_A370)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcedureCodeSequence_0040_A372",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcedureCodeSequence_0040_A372)));
  SWIG_Python_SetConstant(d, "tagId_t_CurrentRequestedProcedureEvidenceSequence_0040_A375",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurrentRequestedProcedureEvidenceSequence_0040_A375)));
  SWIG_Python_SetConstant(d, "tagId_t_ReportDetailSequenceTrial_0040_A380",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReportDetailSequenceTrial_0040_A380)));
  SWIG_Python_SetConstant(d, "tagId_t_PertinentOtherEvidenceSequence_0040_A385",SWIG_From_int(static_cast< int >(imebra::tagId_t::PertinentOtherEvidenceSequence_0040_A385)));
  SWIG_Python_SetConstant(d, "tagId_t_HL7StructuredDocumentReferenceSequence_0040_A390",SWIG_From_int(static_cast< int >(imebra::tagId_t::HL7StructuredDocumentReferenceSequence_0040_A390)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationSubjectUIDTrial_0040_A402",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationSubjectUIDTrial_0040_A402)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationSubjectClassTrial_0040_A403",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationSubjectClassTrial_0040_A403)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationSubjectTypeCodeSequenceTrial_0040_A404",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationSubjectTypeCodeSequenceTrial_0040_A404)));
  SWIG_Python_SetConstant(d, "tagId_t_CompletionFlag_0040_A491",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompletionFlag_0040_A491)));
  SWIG_Python_SetConstant(d, "tagId_t_CompletionFlagDescription_0040_A492",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompletionFlagDescription_0040_A492)));
  SWIG_Python_SetConstant(d, "tagId_t_VerificationFlag_0040_A493",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerificationFlag_0040_A493)));
  SWIG_Python_SetConstant(d, "tagId_t_ArchiveRequested_0040_A494",SWIG_From_int(static_cast< int >(imebra::tagId_t::ArchiveRequested_0040_A494)));
  SWIG_Python_SetConstant(d, "tagId_t_PreliminaryFlag_0040_A496",SWIG_From_int(static_cast< int >(imebra::tagId_t::PreliminaryFlag_0040_A496)));
  SWIG_Python_SetConstant(d, "tagId_t_ContentTemplateSequence_0040_A504",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContentTemplateSequence_0040_A504)));
  SWIG_Python_SetConstant(d, "tagId_t_IdenticalDocumentsSequence_0040_A525",SWIG_From_int(static_cast< int >(imebra::tagId_t::IdenticalDocumentsSequence_0040_A525)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationSubjectContextFlagTrial_0040_A600",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationSubjectContextFlagTrial_0040_A600)));
  SWIG_Python_SetConstant(d, "tagId_t_ObserverContextFlagTrial_0040_A601",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObserverContextFlagTrial_0040_A601)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureContextFlagTrial_0040_A603",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureContextFlagTrial_0040_A603)));
  SWIG_Python_SetConstant(d, "tagId_t_ContentSequence_0040_A730",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContentSequence_0040_A730)));
  SWIG_Python_SetConstant(d, "tagId_t_RelationshipSequenceTrial_0040_A731",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelationshipSequenceTrial_0040_A731)));
  SWIG_Python_SetConstant(d, "tagId_t_RelationshipTypeCodeSequenceTrial_0040_A732",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelationshipTypeCodeSequenceTrial_0040_A732)));
  SWIG_Python_SetConstant(d, "tagId_t_LanguageCodeSequenceTrial_0040_A744",SWIG_From_int(static_cast< int >(imebra::tagId_t::LanguageCodeSequenceTrial_0040_A744)));
  SWIG_Python_SetConstant(d, "tagId_t_UniformResourceLocatorTrial_0040_A992",SWIG_From_int(static_cast< int >(imebra::tagId_t::UniformResourceLocatorTrial_0040_A992)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformAnnotationSequence_0040_B020",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformAnnotationSequence_0040_B020)));
  SWIG_Python_SetConstant(d, "tagId_t_TemplateIdentifier_0040_DB00",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemplateIdentifier_0040_DB00)));
  SWIG_Python_SetConstant(d, "tagId_t_TemplateVersion_0040_DB06",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemplateVersion_0040_DB06)));
  SWIG_Python_SetConstant(d, "tagId_t_TemplateLocalVersion_0040_DB07",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemplateLocalVersion_0040_DB07)));
  SWIG_Python_SetConstant(d, "tagId_t_TemplateExtensionFlag_0040_DB0B",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemplateExtensionFlag_0040_DB0B)));
  SWIG_Python_SetConstant(d, "tagId_t_TemplateExtensionOrganizationUID_0040_DB0C",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemplateExtensionOrganizationUID_0040_DB0C)));
  SWIG_Python_SetConstant(d, "tagId_t_TemplateExtensionCreatorUID_0040_DB0D",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemplateExtensionCreatorUID_0040_DB0D)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedContentItemIdentifier_0040_DB73",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedContentItemIdentifier_0040_DB73)));
  SWIG_Python_SetConstant(d, "tagId_t_HL7InstanceIdentifier_0040_E001",SWIG_From_int(static_cast< int >(imebra::tagId_t::HL7InstanceIdentifier_0040_E001)));
  SWIG_Python_SetConstant(d, "tagId_t_HL7DocumentEffectiveTime_0040_E004",SWIG_From_int(static_cast< int >(imebra::tagId_t::HL7DocumentEffectiveTime_0040_E004)));
  SWIG_Python_SetConstant(d, "tagId_t_HL7DocumentTypeCodeSequence_0040_E006",SWIG_From_int(static_cast< int >(imebra::tagId_t::HL7DocumentTypeCodeSequence_0040_E006)));
  SWIG_Python_SetConstant(d, "tagId_t_DocumentClassCodeSequence_0040_E008",SWIG_From_int(static_cast< int >(imebra::tagId_t::DocumentClassCodeSequence_0040_E008)));
  SWIG_Python_SetConstant(d, "tagId_t_RetrieveURI_0040_E010",SWIG_From_int(static_cast< int >(imebra::tagId_t::RetrieveURI_0040_E010)));
  SWIG_Python_SetConstant(d, "tagId_t_RetrieveLocationUID_0040_E011",SWIG_From_int(static_cast< int >(imebra::tagId_t::RetrieveLocationUID_0040_E011)));
  SWIG_Python_SetConstant(d, "tagId_t_TypeOfInstances_0040_E020",SWIG_From_int(static_cast< int >(imebra::tagId_t::TypeOfInstances_0040_E020)));
  SWIG_Python_SetConstant(d, "tagId_t_DICOMRetrievalSequence_0040_E021",SWIG_From_int(static_cast< int >(imebra::tagId_t::DICOMRetrievalSequence_0040_E021)));
  SWIG_Python_SetConstant(d, "tagId_t_DICOMMediaRetrievalSequence_0040_E022",SWIG_From_int(static_cast< int >(imebra::tagId_t::DICOMMediaRetrievalSequence_0040_E022)));
  SWIG_Python_SetConstant(d, "tagId_t_WADORetrievalSequence_0040_E023",SWIG_From_int(static_cast< int >(imebra::tagId_t::WADORetrievalSequence_0040_E023)));
  SWIG_Python_SetConstant(d, "tagId_t_XDSRetrievalSequence_0040_E024",SWIG_From_int(static_cast< int >(imebra::tagId_t::XDSRetrievalSequence_0040_E024)));
  SWIG_Python_SetConstant(d, "tagId_t_WADORSRetrievalSequence_0040_E025",SWIG_From_int(static_cast< int >(imebra::tagId_t::WADORSRetrievalSequence_0040_E025)));
  SWIG_Python_SetConstant(d, "tagId_t_RepositoryUniqueID_0040_E030",SWIG_From_int(static_cast< int >(imebra::tagId_t::RepositoryUniqueID_0040_E030)));
  SWIG_Python_SetConstant(d, "tagId_t_HomeCommunityID_0040_E031",SWIG_From_int(static_cast< int >(imebra::tagId_t::HomeCommunityID_0040_E031)));
  SWIG_Python_SetConstant(d, "tagId_t_DocumentTitle_0042_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::DocumentTitle_0042_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_EncapsulatedDocument_0042_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::EncapsulatedDocument_0042_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_MIMETypeOfEncapsulatedDocument_0042_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::MIMETypeOfEncapsulatedDocument_0042_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceInstanceSequence_0042_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceInstanceSequence_0042_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_ListOfMIMETypes_0042_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::ListOfMIMETypes_0042_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_ProductPackageIdentifier_0044_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProductPackageIdentifier_0044_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_SubstanceAdministrationApproval_0044_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::SubstanceAdministrationApproval_0044_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_ApprovalStatusFurtherDescription_0044_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApprovalStatusFurtherDescription_0044_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_ApprovalStatusDateTime_0044_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApprovalStatusDateTime_0044_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_ProductTypeCodeSequence_0044_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProductTypeCodeSequence_0044_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_ProductName_0044_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProductName_0044_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_ProductDescription_0044_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProductDescription_0044_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_ProductLotIdentifier_0044_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProductLotIdentifier_0044_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_ProductExpirationDateTime_0044_000B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProductExpirationDateTime_0044_000B)));
  SWIG_Python_SetConstant(d, "tagId_t_SubstanceAdministrationDateTime_0044_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::SubstanceAdministrationDateTime_0044_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_SubstanceAdministrationNotes_0044_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::SubstanceAdministrationNotes_0044_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_SubstanceAdministrationDeviceID_0044_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::SubstanceAdministrationDeviceID_0044_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_ProductParameterSequence_0044_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProductParameterSequence_0044_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_SubstanceAdministrationParameterSequence_0044_0019",SWIG_From_int(static_cast< int >(imebra::tagId_t::SubstanceAdministrationParameterSequence_0044_0019)));
  SWIG_Python_SetConstant(d, "tagId_t_ApprovalSequence_0044_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApprovalSequence_0044_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_AssertionCodeSequence_0044_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssertionCodeSequence_0044_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_AssertionUID_0044_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssertionUID_0044_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_AsserterIdentificationSequence_0044_0103",SWIG_From_int(static_cast< int >(imebra::tagId_t::AsserterIdentificationSequence_0044_0103)));
  SWIG_Python_SetConstant(d, "tagId_t_AssertionDateTime_0044_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssertionDateTime_0044_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_AssertionExpirationDateTime_0044_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssertionExpirationDateTime_0044_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_AssertionComments_0044_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssertionComments_0044_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_RelatedAssertionSequence_0044_0107",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelatedAssertionSequence_0044_0107)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedAssertionUID_0044_0108",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedAssertionUID_0044_0108)));
  SWIG_Python_SetConstant(d, "tagId_t_ApprovalSubjectSequence_0044_0109",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApprovalSubjectSequence_0044_0109)));
  SWIG_Python_SetConstant(d, "tagId_t_OrganizationalRoleCodeSequence_0044_010A",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrganizationalRoleCodeSequence_0044_010A)));
  SWIG_Python_SetConstant(d, "tagId_t_LensDescription_0046_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::LensDescription_0046_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_RightLensSequence_0046_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::RightLensSequence_0046_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_LeftLensSequence_0046_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::LeftLensSequence_0046_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_UnspecifiedLateralityLensSequence_0046_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::UnspecifiedLateralityLensSequence_0046_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_CylinderSequence_0046_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::CylinderSequence_0046_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_PrismSequence_0046_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrismSequence_0046_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_HorizontalPrismPower_0046_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::HorizontalPrismPower_0046_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_HorizontalPrismBase_0046_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::HorizontalPrismBase_0046_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_VerticalPrismPower_0046_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerticalPrismPower_0046_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_VerticalPrismBase_0046_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerticalPrismBase_0046_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_LensSegmentType_0046_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::LensSegmentType_0046_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_OpticalTransmittance_0046_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::OpticalTransmittance_0046_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelWidth_0046_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelWidth_0046_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_PupilSize_0046_0044",SWIG_From_int(static_cast< int >(imebra::tagId_t::PupilSize_0046_0044)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealSize_0046_0046",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealSize_0046_0046)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealSizeSequence_0046_0047",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealSizeSequence_0046_0047)));
  SWIG_Python_SetConstant(d, "tagId_t_AutorefractionRightEyeSequence_0046_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::AutorefractionRightEyeSequence_0046_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_AutorefractionLeftEyeSequence_0046_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::AutorefractionLeftEyeSequence_0046_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_DistancePupillaryDistance_0046_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistancePupillaryDistance_0046_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_NearPupillaryDistance_0046_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::NearPupillaryDistance_0046_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_IntermediatePupillaryDistance_0046_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntermediatePupillaryDistance_0046_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherPupillaryDistance_0046_0064",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherPupillaryDistance_0046_0064)));
  SWIG_Python_SetConstant(d, "tagId_t_KeratometryRightEyeSequence_0046_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::KeratometryRightEyeSequence_0046_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_KeratometryLeftEyeSequence_0046_0071",SWIG_From_int(static_cast< int >(imebra::tagId_t::KeratometryLeftEyeSequence_0046_0071)));
  SWIG_Python_SetConstant(d, "tagId_t_SteepKeratometricAxisSequence_0046_0074",SWIG_From_int(static_cast< int >(imebra::tagId_t::SteepKeratometricAxisSequence_0046_0074)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiusOfCurvature_0046_0075",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiusOfCurvature_0046_0075)));
  SWIG_Python_SetConstant(d, "tagId_t_KeratometricPower_0046_0076",SWIG_From_int(static_cast< int >(imebra::tagId_t::KeratometricPower_0046_0076)));
  SWIG_Python_SetConstant(d, "tagId_t_KeratometricAxis_0046_0077",SWIG_From_int(static_cast< int >(imebra::tagId_t::KeratometricAxis_0046_0077)));
  SWIG_Python_SetConstant(d, "tagId_t_FlatKeratometricAxisSequence_0046_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::FlatKeratometricAxisSequence_0046_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_BackgroundColor_0046_0092",SWIG_From_int(static_cast< int >(imebra::tagId_t::BackgroundColor_0046_0092)));
  SWIG_Python_SetConstant(d, "tagId_t_Optotype_0046_0094",SWIG_From_int(static_cast< int >(imebra::tagId_t::Optotype_0046_0094)));
  SWIG_Python_SetConstant(d, "tagId_t_OptotypePresentation_0046_0095",SWIG_From_int(static_cast< int >(imebra::tagId_t::OptotypePresentation_0046_0095)));
  SWIG_Python_SetConstant(d, "tagId_t_SubjectiveRefractionRightEyeSequence_0046_0097",SWIG_From_int(static_cast< int >(imebra::tagId_t::SubjectiveRefractionRightEyeSequence_0046_0097)));
  SWIG_Python_SetConstant(d, "tagId_t_SubjectiveRefractionLeftEyeSequence_0046_0098",SWIG_From_int(static_cast< int >(imebra::tagId_t::SubjectiveRefractionLeftEyeSequence_0046_0098)));
  SWIG_Python_SetConstant(d, "tagId_t_AddNearSequence_0046_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::AddNearSequence_0046_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_AddIntermediateSequence_0046_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::AddIntermediateSequence_0046_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_AddOtherSequence_0046_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::AddOtherSequence_0046_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_AddPower_0046_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::AddPower_0046_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewingDistance_0046_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewingDistance_0046_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualAcuityTypeCodeSequence_0046_0121",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualAcuityTypeCodeSequence_0046_0121)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualAcuityRightEyeSequence_0046_0122",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualAcuityRightEyeSequence_0046_0122)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualAcuityLeftEyeSequence_0046_0123",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualAcuityLeftEyeSequence_0046_0123)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualAcuityBothEyesOpenSequence_0046_0124",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualAcuityBothEyesOpenSequence_0046_0124)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewingDistanceType_0046_0125",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewingDistanceType_0046_0125)));
  SWIG_Python_SetConstant(d, "tagId_t_VisualAcuityModifiers_0046_0135",SWIG_From_int(static_cast< int >(imebra::tagId_t::VisualAcuityModifiers_0046_0135)));
  SWIG_Python_SetConstant(d, "tagId_t_DecimalVisualAcuity_0046_0137",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecimalVisualAcuity_0046_0137)));
  SWIG_Python_SetConstant(d, "tagId_t_OptotypeDetailedDefinition_0046_0139",SWIG_From_int(static_cast< int >(imebra::tagId_t::OptotypeDetailedDefinition_0046_0139)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRefractiveMeasurementsSequence_0046_0145",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRefractiveMeasurementsSequence_0046_0145)));
  SWIG_Python_SetConstant(d, "tagId_t_SpherePower_0046_0146",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpherePower_0046_0146)));
  SWIG_Python_SetConstant(d, "tagId_t_CylinderPower_0046_0147",SWIG_From_int(static_cast< int >(imebra::tagId_t::CylinderPower_0046_0147)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealTopographySurface_0046_0201",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealTopographySurface_0046_0201)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealVertexLocation_0046_0202",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealVertexLocation_0046_0202)));
  SWIG_Python_SetConstant(d, "tagId_t_PupilCentroidXCoordinate_0046_0203",SWIG_From_int(static_cast< int >(imebra::tagId_t::PupilCentroidXCoordinate_0046_0203)));
  SWIG_Python_SetConstant(d, "tagId_t_PupilCentroidYCoordinate_0046_0204",SWIG_From_int(static_cast< int >(imebra::tagId_t::PupilCentroidYCoordinate_0046_0204)));
  SWIG_Python_SetConstant(d, "tagId_t_EquivalentPupilRadius_0046_0205",SWIG_From_int(static_cast< int >(imebra::tagId_t::EquivalentPupilRadius_0046_0205)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealTopographyMapTypeCodeSequence_0046_0207",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealTopographyMapTypeCodeSequence_0046_0207)));
  SWIG_Python_SetConstant(d, "tagId_t_VerticesOfTheOutlineOfPupil_0046_0208",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerticesOfTheOutlineOfPupil_0046_0208)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealTopographyMappingNormalsSequence_0046_0210",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealTopographyMappingNormalsSequence_0046_0210)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumCornealCurvatureSequence_0046_0211",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumCornealCurvatureSequence_0046_0211)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumCornealCurvature_0046_0212",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumCornealCurvature_0046_0212)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumCornealCurvatureLocation_0046_0213",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumCornealCurvatureLocation_0046_0213)));
  SWIG_Python_SetConstant(d, "tagId_t_MinimumKeratometricSequence_0046_0215",SWIG_From_int(static_cast< int >(imebra::tagId_t::MinimumKeratometricSequence_0046_0215)));
  SWIG_Python_SetConstant(d, "tagId_t_SimulatedKeratometricCylinderSequence_0046_0218",SWIG_From_int(static_cast< int >(imebra::tagId_t::SimulatedKeratometricCylinderSequence_0046_0218)));
  SWIG_Python_SetConstant(d, "tagId_t_AverageCornealPower_0046_0220",SWIG_From_int(static_cast< int >(imebra::tagId_t::AverageCornealPower_0046_0220)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealISValue_0046_0224",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealISValue_0046_0224)));
  SWIG_Python_SetConstant(d, "tagId_t_AnalyzedArea_0046_0227",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnalyzedArea_0046_0227)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceRegularityIndex_0046_0230",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceRegularityIndex_0046_0230)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceAsymmetryIndex_0046_0232",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceAsymmetryIndex_0046_0232)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealEccentricityIndex_0046_0234",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealEccentricityIndex_0046_0234)));
  SWIG_Python_SetConstant(d, "tagId_t_KeratoconusPredictionIndex_0046_0236",SWIG_From_int(static_cast< int >(imebra::tagId_t::KeratoconusPredictionIndex_0046_0236)));
  SWIG_Python_SetConstant(d, "tagId_t_DecimalPotentialVisualAcuity_0046_0238",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecimalPotentialVisualAcuity_0046_0238)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealTopographyMapQualityEvaluation_0046_0242",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealTopographyMapQualityEvaluation_0046_0242)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceImageCornealProcessedDataSequence_0046_0244",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceImageCornealProcessedDataSequence_0046_0244)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealPointLocation_0046_0247",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealPointLocation_0046_0247)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealPointEstimated_0046_0248",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealPointEstimated_0046_0248)));
  SWIG_Python_SetConstant(d, "tagId_t_AxialPower_0046_0249",SWIG_From_int(static_cast< int >(imebra::tagId_t::AxialPower_0046_0249)));
  SWIG_Python_SetConstant(d, "tagId_t_TangentialPower_0046_0250",SWIG_From_int(static_cast< int >(imebra::tagId_t::TangentialPower_0046_0250)));
  SWIG_Python_SetConstant(d, "tagId_t_RefractivePower_0046_0251",SWIG_From_int(static_cast< int >(imebra::tagId_t::RefractivePower_0046_0251)));
  SWIG_Python_SetConstant(d, "tagId_t_RelativeElevation_0046_0252",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelativeElevation_0046_0252)));
  SWIG_Python_SetConstant(d, "tagId_t_CornealWavefront_0046_0253",SWIG_From_int(static_cast< int >(imebra::tagId_t::CornealWavefront_0046_0253)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagedVolumeWidth_0048_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagedVolumeWidth_0048_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagedVolumeHeight_0048_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagedVolumeHeight_0048_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagedVolumeDepth_0048_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagedVolumeDepth_0048_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalPixelMatrixColumns_0048_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalPixelMatrixColumns_0048_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalPixelMatrixRows_0048_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalPixelMatrixRows_0048_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalPixelMatrixOriginSequence_0048_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalPixelMatrixOriginSequence_0048_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenLabelInImage_0048_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenLabelInImage_0048_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_FocusMethod_0048_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::FocusMethod_0048_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_ExtendedDepthOfField_0048_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExtendedDepthOfField_0048_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFocalPlanes_0048_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFocalPlanes_0048_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_DistanceBetweenFocalPlanes_0048_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistanceBetweenFocalPlanes_0048_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedAbsentPixelCIELabValue_0048_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedAbsentPixelCIELabValue_0048_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_IlluminatorTypeCodeSequence_0048_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::IlluminatorTypeCodeSequence_0048_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageOrientationSlide_0048_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageOrientationSlide_0048_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_OpticalPathSequence_0048_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::OpticalPathSequence_0048_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_OpticalPathIdentifier_0048_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::OpticalPathIdentifier_0048_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_OpticalPathDescription_0048_0107",SWIG_From_int(static_cast< int >(imebra::tagId_t::OpticalPathDescription_0048_0107)));
  SWIG_Python_SetConstant(d, "tagId_t_IlluminationColorCodeSequence_0048_0108",SWIG_From_int(static_cast< int >(imebra::tagId_t::IlluminationColorCodeSequence_0048_0108)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecimenReferenceSequence_0048_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecimenReferenceSequence_0048_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_CondenserLensPower_0048_0111",SWIG_From_int(static_cast< int >(imebra::tagId_t::CondenserLensPower_0048_0111)));
  SWIG_Python_SetConstant(d, "tagId_t_ObjectiveLensPower_0048_0112",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObjectiveLensPower_0048_0112)));
  SWIG_Python_SetConstant(d, "tagId_t_ObjectiveLensNumericalAperture_0048_0113",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObjectiveLensNumericalAperture_0048_0113)));
  SWIG_Python_SetConstant(d, "tagId_t_PaletteColorLookupTableSequence_0048_0120",SWIG_From_int(static_cast< int >(imebra::tagId_t::PaletteColorLookupTableSequence_0048_0120)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedImageNavigationSequence_0048_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedImageNavigationSequence_0048_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_TopLeftHandCornerOfLocalizerArea_0048_0201",SWIG_From_int(static_cast< int >(imebra::tagId_t::TopLeftHandCornerOfLocalizerArea_0048_0201)));
  SWIG_Python_SetConstant(d, "tagId_t_BottomRightHandCornerOfLocalizerArea_0048_0202",SWIG_From_int(static_cast< int >(imebra::tagId_t::BottomRightHandCornerOfLocalizerArea_0048_0202)));
  SWIG_Python_SetConstant(d, "tagId_t_OpticalPathIdentificationSequence_0048_0207",SWIG_From_int(static_cast< int >(imebra::tagId_t::OpticalPathIdentificationSequence_0048_0207)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanePositionSlideSequence_0048_021A",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanePositionSlideSequence_0048_021A)));
  SWIG_Python_SetConstant(d, "tagId_t_ColumnPositionInTotalImagePixelMatrix_0048_021E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ColumnPositionInTotalImagePixelMatrix_0048_021E)));
  SWIG_Python_SetConstant(d, "tagId_t_RowPositionInTotalImagePixelMatrix_0048_021F",SWIG_From_int(static_cast< int >(imebra::tagId_t::RowPositionInTotalImagePixelMatrix_0048_021F)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelOriginInterpretation_0048_0301",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelOriginInterpretation_0048_0301)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfOpticalPaths_0048_0302",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfOpticalPaths_0048_0302)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalPixelMatrixFocalPlanes_0048_0303",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalPixelMatrixFocalPlanes_0048_0303)));
  SWIG_Python_SetConstant(d, "tagId_t_CalibrationImage_0050_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalibrationImage_0050_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceSequence_0050_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceSequence_0050_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerComponentTypeCodeSequence_0050_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerComponentTypeCodeSequence_0050_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerComponentThickness_0050_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerComponentThickness_0050_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceLength_0050_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceLength_0050_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerComponentWidth_0050_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerComponentWidth_0050_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceDiameter_0050_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceDiameter_0050_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceDiameterUnits_0050_0017",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceDiameterUnits_0050_0017)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceVolume_0050_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceVolume_0050_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_InterMarkerDistance_0050_0019",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterMarkerDistance_0050_0019)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerComponentMaterial_0050_001A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerComponentMaterial_0050_001A)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerComponentID_0050_001B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerComponentID_0050_001B)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerComponentLength_0050_001C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerComponentLength_0050_001C)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerComponentDiameter_0050_001D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerComponentDiameter_0050_001D)));
  SWIG_Python_SetConstant(d, "tagId_t_ContainerComponentDescription_0050_001E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContainerComponentDescription_0050_001E)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceDescription_0050_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceDescription_0050_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_LongDeviceDescription_0050_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::LongDeviceDescription_0050_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_ContrastBolusIngredientPercentByVolume_0052_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContrastBolusIngredientPercentByVolume_0052_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_OCTFocalDistance_0052_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::OCTFocalDistance_0052_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamSpotSize_0052_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamSpotSize_0052_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_EffectiveRefractiveIndex_0052_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::EffectiveRefractiveIndex_0052_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_OCTAcquisitionDomain_0052_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::OCTAcquisitionDomain_0052_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_OCTOpticalCenterWavelength_0052_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::OCTOpticalCenterWavelength_0052_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_AxialResolution_0052_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::AxialResolution_0052_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_RangingDepth_0052_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangingDepth_0052_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_ALineRate_0052_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ALineRate_0052_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_ALinesPerFrame_0052_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::ALinesPerFrame_0052_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_CatheterRotationalRate_0052_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::CatheterRotationalRate_0052_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_ALinePixelSpacing_0052_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::ALinePixelSpacing_0052_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_ModeOfPercutaneousAccessSequence_0052_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModeOfPercutaneousAccessSequence_0052_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_IntravascularOCTFrameTypeSequence_0052_0025",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntravascularOCTFrameTypeSequence_0052_0025)));
  SWIG_Python_SetConstant(d, "tagId_t_OCTZOffsetApplied_0052_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::OCTZOffsetApplied_0052_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_IntravascularFrameContentSequence_0052_0027",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntravascularFrameContentSequence_0052_0027)));
  SWIG_Python_SetConstant(d, "tagId_t_IntravascularLongitudinalDistance_0052_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntravascularLongitudinalDistance_0052_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_IntravascularOCTFrameContentSequence_0052_0029",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntravascularOCTFrameContentSequence_0052_0029)));
  SWIG_Python_SetConstant(d, "tagId_t_OCTZOffsetCorrection_0052_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::OCTZOffsetCorrection_0052_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_CatheterDirectionOfRotation_0052_0031",SWIG_From_int(static_cast< int >(imebra::tagId_t::CatheterDirectionOfRotation_0052_0031)));
  SWIG_Python_SetConstant(d, "tagId_t_SeamLineLocation_0052_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::SeamLineLocation_0052_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_FirstALineLocation_0052_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::FirstALineLocation_0052_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_SeamLineIndex_0052_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::SeamLineIndex_0052_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfPaddedALines_0052_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfPaddedALines_0052_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpolationType_0052_0039",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpolationType_0052_0039)));
  SWIG_Python_SetConstant(d, "tagId_t_RefractiveIndexApplied_0052_003A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RefractiveIndexApplied_0052_003A)));
  SWIG_Python_SetConstant(d, "tagId_t_EnergyWindowVector_0054_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnergyWindowVector_0054_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfEnergyWindows_0054_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfEnergyWindows_0054_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_EnergyWindowInformationSequence_0054_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnergyWindowInformationSequence_0054_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_EnergyWindowRangeSequence_0054_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnergyWindowRangeSequence_0054_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_EnergyWindowLowerLimit_0054_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnergyWindowLowerLimit_0054_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_EnergyWindowUpperLimit_0054_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnergyWindowUpperLimit_0054_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalInformationSequence_0054_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalInformationSequence_0054_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_ResidualSyringeCounts_0054_0017",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResidualSyringeCounts_0054_0017)));
  SWIG_Python_SetConstant(d, "tagId_t_EnergyWindowName_0054_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnergyWindowName_0054_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorVector_0054_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorVector_0054_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfDetectors_0054_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfDetectors_0054_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorInformationSequence_0054_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorInformationSequence_0054_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_PhaseVector_0054_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhaseVector_0054_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfPhases_0054_0031",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfPhases_0054_0031)));
  SWIG_Python_SetConstant(d, "tagId_t_PhaseInformationSequence_0054_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhaseInformationSequence_0054_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFramesInPhase_0054_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFramesInPhase_0054_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_PhaseDelay_0054_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhaseDelay_0054_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_PauseBetweenFrames_0054_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::PauseBetweenFrames_0054_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_PhaseDescription_0054_0039",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhaseDescription_0054_0039)));
  SWIG_Python_SetConstant(d, "tagId_t_RotationVector_0054_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::RotationVector_0054_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfRotations_0054_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfRotations_0054_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_RotationInformationSequence_0054_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::RotationInformationSequence_0054_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFramesInRotation_0054_0053",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFramesInRotation_0054_0053)));
  SWIG_Python_SetConstant(d, "tagId_t_RRIntervalVector_0054_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::RRIntervalVector_0054_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfRRIntervals_0054_0061",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfRRIntervals_0054_0061)));
  SWIG_Python_SetConstant(d, "tagId_t_GatedInformationSequence_0054_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::GatedInformationSequence_0054_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_DataInformationSequence_0054_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataInformationSequence_0054_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeSlotVector_0054_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeSlotVector_0054_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfTimeSlots_0054_0071",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfTimeSlots_0054_0071)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeSlotInformationSequence_0054_0072",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeSlotInformationSequence_0054_0072)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeSlotTime_0054_0073",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeSlotTime_0054_0073)));
  SWIG_Python_SetConstant(d, "tagId_t_SliceVector_0054_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::SliceVector_0054_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfSlices_0054_0081",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfSlices_0054_0081)));
  SWIG_Python_SetConstant(d, "tagId_t_AngularViewVector_0054_0090",SWIG_From_int(static_cast< int >(imebra::tagId_t::AngularViewVector_0054_0090)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeSliceVector_0054_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeSliceVector_0054_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfTimeSlices_0054_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfTimeSlices_0054_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_StartAngle_0054_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartAngle_0054_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_TypeOfDetectorMotion_0054_0202",SWIG_From_int(static_cast< int >(imebra::tagId_t::TypeOfDetectorMotion_0054_0202)));
  SWIG_Python_SetConstant(d, "tagId_t_TriggerVector_0054_0210",SWIG_From_int(static_cast< int >(imebra::tagId_t::TriggerVector_0054_0210)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfTriggersInPhase_0054_0211",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfTriggersInPhase_0054_0211)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewCodeSequence_0054_0220",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewCodeSequence_0054_0220)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewModifierCodeSequence_0054_0222",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewModifierCodeSequence_0054_0222)));
  SWIG_Python_SetConstant(d, "tagId_t_RadionuclideCodeSequence_0054_0300",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadionuclideCodeSequence_0054_0300)));
  SWIG_Python_SetConstant(d, "tagId_t_AdministrationRouteCodeSequence_0054_0302",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdministrationRouteCodeSequence_0054_0302)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiopharmaceuticalCodeSequence_0054_0304",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiopharmaceuticalCodeSequence_0054_0304)));
  SWIG_Python_SetConstant(d, "tagId_t_CalibrationDataSequence_0054_0306",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalibrationDataSequence_0054_0306)));
  SWIG_Python_SetConstant(d, "tagId_t_EnergyWindowNumber_0054_0308",SWIG_From_int(static_cast< int >(imebra::tagId_t::EnergyWindowNumber_0054_0308)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageID_0054_0400",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageID_0054_0400)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientOrientationCodeSequence_0054_0410",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientOrientationCodeSequence_0054_0410)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientOrientationModifierCodeSequence_0054_0412",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientOrientationModifierCodeSequence_0054_0412)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientGantryRelationshipCodeSequence_0054_0414",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientGantryRelationshipCodeSequence_0054_0414)));
  SWIG_Python_SetConstant(d, "tagId_t_SliceProgressionDirection_0054_0500",SWIG_From_int(static_cast< int >(imebra::tagId_t::SliceProgressionDirection_0054_0500)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanProgressionDirection_0054_0501",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanProgressionDirection_0054_0501)));
  SWIG_Python_SetConstant(d, "tagId_t_SeriesType_0054_1000",SWIG_From_int(static_cast< int >(imebra::tagId_t::SeriesType_0054_1000)));
  SWIG_Python_SetConstant(d, "tagId_t_Units_0054_1001",SWIG_From_int(static_cast< int >(imebra::tagId_t::Units_0054_1001)));
  SWIG_Python_SetConstant(d, "tagId_t_CountsSource_0054_1002",SWIG_From_int(static_cast< int >(imebra::tagId_t::CountsSource_0054_1002)));
  SWIG_Python_SetConstant(d, "tagId_t_ReprojectionMethod_0054_1004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReprojectionMethod_0054_1004)));
  SWIG_Python_SetConstant(d, "tagId_t_SUVType_0054_1006",SWIG_From_int(static_cast< int >(imebra::tagId_t::SUVType_0054_1006)));
  SWIG_Python_SetConstant(d, "tagId_t_RandomsCorrectionMethod_0054_1100",SWIG_From_int(static_cast< int >(imebra::tagId_t::RandomsCorrectionMethod_0054_1100)));
  SWIG_Python_SetConstant(d, "tagId_t_AttenuationCorrectionMethod_0054_1101",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttenuationCorrectionMethod_0054_1101)));
  SWIG_Python_SetConstant(d, "tagId_t_DecayCorrection_0054_1102",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecayCorrection_0054_1102)));
  SWIG_Python_SetConstant(d, "tagId_t_ReconstructionMethod_0054_1103",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReconstructionMethod_0054_1103)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorLinesOfResponseUsed_0054_1104",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorLinesOfResponseUsed_0054_1104)));
  SWIG_Python_SetConstant(d, "tagId_t_ScatterCorrectionMethod_0054_1105",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScatterCorrectionMethod_0054_1105)));
  SWIG_Python_SetConstant(d, "tagId_t_AxialAcceptance_0054_1200",SWIG_From_int(static_cast< int >(imebra::tagId_t::AxialAcceptance_0054_1200)));
  SWIG_Python_SetConstant(d, "tagId_t_AxialMash_0054_1201",SWIG_From_int(static_cast< int >(imebra::tagId_t::AxialMash_0054_1201)));
  SWIG_Python_SetConstant(d, "tagId_t_TransverseMash_0054_1202",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransverseMash_0054_1202)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorElementSize_0054_1203",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorElementSize_0054_1203)));
  SWIG_Python_SetConstant(d, "tagId_t_CoincidenceWindowWidth_0054_1210",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoincidenceWindowWidth_0054_1210)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryCountsType_0054_1220",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryCountsType_0054_1220)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameReferenceTime_0054_1300",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameReferenceTime_0054_1300)));
  SWIG_Python_SetConstant(d, "tagId_t_PrimaryPromptsCountsAccumulated_0054_1310",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrimaryPromptsCountsAccumulated_0054_1310)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryCountsAccumulated_0054_1311",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryCountsAccumulated_0054_1311)));
  SWIG_Python_SetConstant(d, "tagId_t_SliceSensitivityFactor_0054_1320",SWIG_From_int(static_cast< int >(imebra::tagId_t::SliceSensitivityFactor_0054_1320)));
  SWIG_Python_SetConstant(d, "tagId_t_DecayFactor_0054_1321",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecayFactor_0054_1321)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseCalibrationFactor_0054_1322",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseCalibrationFactor_0054_1322)));
  SWIG_Python_SetConstant(d, "tagId_t_ScatterFractionFactor_0054_1323",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScatterFractionFactor_0054_1323)));
  SWIG_Python_SetConstant(d, "tagId_t_DeadTimeFactor_0054_1324",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeadTimeFactor_0054_1324)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageIndex_0054_1330",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageIndex_0054_1330)));
  SWIG_Python_SetConstant(d, "tagId_t_CountsIncluded_0054_1400",SWIG_From_int(static_cast< int >(imebra::tagId_t::CountsIncluded_0054_1400)));
  SWIG_Python_SetConstant(d, "tagId_t_DeadTimeCorrectionFlag_0054_1401",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeadTimeCorrectionFlag_0054_1401)));
  SWIG_Python_SetConstant(d, "tagId_t_HistogramSequence_0060_3000",SWIG_From_int(static_cast< int >(imebra::tagId_t::HistogramSequence_0060_3000)));
  SWIG_Python_SetConstant(d, "tagId_t_HistogramNumberOfBins_0060_3002",SWIG_From_int(static_cast< int >(imebra::tagId_t::HistogramNumberOfBins_0060_3002)));
  SWIG_Python_SetConstant(d, "tagId_t_HistogramFirstBinValue_0060_3004",SWIG_From_int(static_cast< int >(imebra::tagId_t::HistogramFirstBinValue_0060_3004)));
  SWIG_Python_SetConstant(d, "tagId_t_HistogramLastBinValue_0060_3006",SWIG_From_int(static_cast< int >(imebra::tagId_t::HistogramLastBinValue_0060_3006)));
  SWIG_Python_SetConstant(d, "tagId_t_HistogramBinWidth_0060_3008",SWIG_From_int(static_cast< int >(imebra::tagId_t::HistogramBinWidth_0060_3008)));
  SWIG_Python_SetConstant(d, "tagId_t_HistogramExplanation_0060_3010",SWIG_From_int(static_cast< int >(imebra::tagId_t::HistogramExplanation_0060_3010)));
  SWIG_Python_SetConstant(d, "tagId_t_HistogramData_0060_3020",SWIG_From_int(static_cast< int >(imebra::tagId_t::HistogramData_0060_3020)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentationType_0062_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentationType_0062_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentSequence_0062_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentSequence_0062_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentedPropertyCategoryCodeSequence_0062_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentedPropertyCategoryCodeSequence_0062_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentNumber_0062_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentNumber_0062_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentLabel_0062_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentLabel_0062_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentDescription_0062_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentDescription_0062_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentationAlgorithmIdentificationSequence_0062_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentationAlgorithmIdentificationSequence_0062_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentAlgorithmType_0062_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentAlgorithmType_0062_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentAlgorithmName_0062_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentAlgorithmName_0062_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentIdentificationSequence_0062_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentIdentificationSequence_0062_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSegmentNumber_0062_000B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSegmentNumber_0062_000B)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedDisplayGrayscaleValue_0062_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedDisplayGrayscaleValue_0062_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedDisplayCIELabValue_0062_000D",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedDisplayCIELabValue_0062_000D)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumFractionalValue_0062_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumFractionalValue_0062_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentedPropertyTypeCodeSequence_0062_000F",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentedPropertyTypeCodeSequence_0062_000F)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentationFractionalType_0062_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentationFractionalType_0062_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentedPropertyTypeModifierCodeSequence_0062_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentedPropertyTypeModifierCodeSequence_0062_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_UsedSegmentsSequence_0062_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::UsedSegmentsSequence_0062_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentsOverlap_0062_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentsOverlap_0062_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackingID_0062_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackingID_0062_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackingUID_0062_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackingUID_0062_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_DeformableRegistrationSequence_0064_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeformableRegistrationSequence_0064_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceFrameOfReferenceUID_0064_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceFrameOfReferenceUID_0064_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_DeformableRegistrationGridSequence_0064_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeformableRegistrationGridSequence_0064_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_GridDimensions_0064_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridDimensions_0064_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_GridResolution_0064_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridResolution_0064_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_VectorGridData_0064_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::VectorGridData_0064_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_PreDeformationMatrixRegistrationSequence_0064_000F",SWIG_From_int(static_cast< int >(imebra::tagId_t::PreDeformationMatrixRegistrationSequence_0064_000F)));
  SWIG_Python_SetConstant(d, "tagId_t_PostDeformationMatrixRegistrationSequence_0064_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::PostDeformationMatrixRegistrationSequence_0064_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfSurfaces_0066_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfSurfaces_0066_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceSequence_0066_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceSequence_0066_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceNumber_0066_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceNumber_0066_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceComments_0066_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceComments_0066_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceProcessing_0066_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceProcessing_0066_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceProcessingRatio_0066_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceProcessingRatio_0066_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceProcessingDescription_0066_000B",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceProcessingDescription_0066_000B)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedPresentationOpacity_0066_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedPresentationOpacity_0066_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedPresentationType_0066_000D",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedPresentationType_0066_000D)));
  SWIG_Python_SetConstant(d, "tagId_t_FiniteVolume_0066_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::FiniteVolume_0066_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_Manifold_0066_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::Manifold_0066_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfacePointsSequence_0066_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfacePointsSequence_0066_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfacePointsNormalsSequence_0066_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfacePointsNormalsSequence_0066_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceMeshPrimitivesSequence_0066_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceMeshPrimitivesSequence_0066_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfSurfacePoints_0066_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfSurfacePoints_0066_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_PointCoordinatesData_0066_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::PointCoordinatesData_0066_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_PointPositionAccuracy_0066_0017",SWIG_From_int(static_cast< int >(imebra::tagId_t::PointPositionAccuracy_0066_0017)));
  SWIG_Python_SetConstant(d, "tagId_t_MeanPointDistance_0066_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeanPointDistance_0066_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumPointDistance_0066_0019",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumPointDistance_0066_0019)));
  SWIG_Python_SetConstant(d, "tagId_t_PointsBoundingBoxCoordinates_0066_001A",SWIG_From_int(static_cast< int >(imebra::tagId_t::PointsBoundingBoxCoordinates_0066_001A)));
  SWIG_Python_SetConstant(d, "tagId_t_AxisOfRotation_0066_001B",SWIG_From_int(static_cast< int >(imebra::tagId_t::AxisOfRotation_0066_001B)));
  SWIG_Python_SetConstant(d, "tagId_t_CenterOfRotation_0066_001C",SWIG_From_int(static_cast< int >(imebra::tagId_t::CenterOfRotation_0066_001C)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfVectors_0066_001E",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfVectors_0066_001E)));
  SWIG_Python_SetConstant(d, "tagId_t_VectorDimensionality_0066_001F",SWIG_From_int(static_cast< int >(imebra::tagId_t::VectorDimensionality_0066_001F)));
  SWIG_Python_SetConstant(d, "tagId_t_VectorAccuracy_0066_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::VectorAccuracy_0066_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_VectorCoordinateData_0066_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::VectorCoordinateData_0066_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_TrianglePointIndexList_0066_0023",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrianglePointIndexList_0066_0023)));
  SWIG_Python_SetConstant(d, "tagId_t_EdgePointIndexList_0066_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::EdgePointIndexList_0066_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_VertexPointIndexList_0066_0025",SWIG_From_int(static_cast< int >(imebra::tagId_t::VertexPointIndexList_0066_0025)));
  SWIG_Python_SetConstant(d, "tagId_t_TriangleStripSequence_0066_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::TriangleStripSequence_0066_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_TriangleFanSequence_0066_0027",SWIG_From_int(static_cast< int >(imebra::tagId_t::TriangleFanSequence_0066_0027)));
  SWIG_Python_SetConstant(d, "tagId_t_LineSequence_0066_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::LineSequence_0066_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_PrimitivePointIndexList_0066_0029",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrimitivePointIndexList_0066_0029)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceCount_0066_002A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceCount_0066_002A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSurfaceSequence_0066_002B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSurfaceSequence_0066_002B)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSurfaceNumber_0066_002C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSurfaceNumber_0066_002C)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentSurfaceGenerationAlgorithmIdentificationSequence_0066_002D",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentSurfaceGenerationAlgorithmIdentificationSequence_0066_002D)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentSurfaceSourceInstanceSequence_0066_002E",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentSurfaceSourceInstanceSequence_0066_002E)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmFamilyCodeSequence_0066_002F",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmFamilyCodeSequence_0066_002F)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmNameCodeSequence_0066_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmNameCodeSequence_0066_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmVersion_0066_0031",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmVersion_0066_0031)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmParameters_0066_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmParameters_0066_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_FacetSequence_0066_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::FacetSequence_0066_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceProcessingAlgorithmIdentificationSequence_0066_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceProcessingAlgorithmIdentificationSequence_0066_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmName_0066_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmName_0066_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedPointRadius_0066_0037",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedPointRadius_0066_0037)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedLineThickness_0066_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedLineThickness_0066_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_LongPrimitivePointIndexList_0066_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::LongPrimitivePointIndexList_0066_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_LongTrianglePointIndexList_0066_0041",SWIG_From_int(static_cast< int >(imebra::tagId_t::LongTrianglePointIndexList_0066_0041)));
  SWIG_Python_SetConstant(d, "tagId_t_LongEdgePointIndexList_0066_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::LongEdgePointIndexList_0066_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_LongVertexPointIndexList_0066_0043",SWIG_From_int(static_cast< int >(imebra::tagId_t::LongVertexPointIndexList_0066_0043)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackSetSequence_0066_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackSetSequence_0066_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackSequence_0066_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackSequence_0066_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedDisplayCIELabValueList_0066_0103",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedDisplayCIELabValueList_0066_0103)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackingAlgorithmIdentificationSequence_0066_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackingAlgorithmIdentificationSequence_0066_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackSetNumber_0066_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackSetNumber_0066_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackSetLabel_0066_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackSetLabel_0066_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackSetDescription_0066_0107",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackSetDescription_0066_0107)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackSetAnatomicalTypeCodeSequence_0066_0108",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackSetAnatomicalTypeCodeSequence_0066_0108)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasurementsSequence_0066_0121",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasurementsSequence_0066_0121)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackSetStatisticsSequence_0066_0124",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackSetStatisticsSequence_0066_0124)));
  SWIG_Python_SetConstant(d, "tagId_t_FloatingPointValues_0066_0125",SWIG_From_int(static_cast< int >(imebra::tagId_t::FloatingPointValues_0066_0125)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackPointIndexList_0066_0129",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackPointIndexList_0066_0129)));
  SWIG_Python_SetConstant(d, "tagId_t_TrackStatisticsSequence_0066_0130",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrackStatisticsSequence_0066_0130)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasurementValuesSequence_0066_0132",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasurementValuesSequence_0066_0132)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionAcquisitionCodeSequence_0066_0133",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionAcquisitionCodeSequence_0066_0133)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffusionModelCodeSequence_0066_0134",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffusionModelCodeSequence_0066_0134)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantSize_0068_6210",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantSize_0068_6210)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateVersion_0068_6221",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateVersion_0068_6221)));
  SWIG_Python_SetConstant(d, "tagId_t_ReplacedImplantTemplateSequence_0068_6222",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReplacedImplantTemplateSequence_0068_6222)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantType_0068_6223",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantType_0068_6223)));
  SWIG_Python_SetConstant(d, "tagId_t_DerivationImplantTemplateSequence_0068_6224",SWIG_From_int(static_cast< int >(imebra::tagId_t::DerivationImplantTemplateSequence_0068_6224)));
  SWIG_Python_SetConstant(d, "tagId_t_OriginalImplantTemplateSequence_0068_6225",SWIG_From_int(static_cast< int >(imebra::tagId_t::OriginalImplantTemplateSequence_0068_6225)));
  SWIG_Python_SetConstant(d, "tagId_t_EffectiveDateTime_0068_6226",SWIG_From_int(static_cast< int >(imebra::tagId_t::EffectiveDateTime_0068_6226)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTargetAnatomySequence_0068_6230",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTargetAnatomySequence_0068_6230)));
  SWIG_Python_SetConstant(d, "tagId_t_InformationFromManufacturerSequence_0068_6260",SWIG_From_int(static_cast< int >(imebra::tagId_t::InformationFromManufacturerSequence_0068_6260)));
  SWIG_Python_SetConstant(d, "tagId_t_NotificationFromManufacturerSequence_0068_6265",SWIG_From_int(static_cast< int >(imebra::tagId_t::NotificationFromManufacturerSequence_0068_6265)));
  SWIG_Python_SetConstant(d, "tagId_t_InformationIssueDateTime_0068_6270",SWIG_From_int(static_cast< int >(imebra::tagId_t::InformationIssueDateTime_0068_6270)));
  SWIG_Python_SetConstant(d, "tagId_t_InformationSummary_0068_6280",SWIG_From_int(static_cast< int >(imebra::tagId_t::InformationSummary_0068_6280)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantRegulatoryDisapprovalCodeSequence_0068_62A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantRegulatoryDisapprovalCodeSequence_0068_62A0)));
  SWIG_Python_SetConstant(d, "tagId_t_OverallTemplateSpatialTolerance_0068_62A5",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverallTemplateSpatialTolerance_0068_62A5)));
  SWIG_Python_SetConstant(d, "tagId_t_HPGLDocumentSequence_0068_62C0",SWIG_From_int(static_cast< int >(imebra::tagId_t::HPGLDocumentSequence_0068_62C0)));
  SWIG_Python_SetConstant(d, "tagId_t_HPGLDocumentID_0068_62D0",SWIG_From_int(static_cast< int >(imebra::tagId_t::HPGLDocumentID_0068_62D0)));
  SWIG_Python_SetConstant(d, "tagId_t_HPGLDocumentLabel_0068_62D5",SWIG_From_int(static_cast< int >(imebra::tagId_t::HPGLDocumentLabel_0068_62D5)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewOrientationCodeSequence_0068_62E0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewOrientationCodeSequence_0068_62E0)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewOrientationModifierCodeSequence_0068_62F0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewOrientationModifierCodeSequence_0068_62F0)));
  SWIG_Python_SetConstant(d, "tagId_t_HPGLDocumentScaling_0068_62F2",SWIG_From_int(static_cast< int >(imebra::tagId_t::HPGLDocumentScaling_0068_62F2)));
  SWIG_Python_SetConstant(d, "tagId_t_HPGLDocument_0068_6300",SWIG_From_int(static_cast< int >(imebra::tagId_t::HPGLDocument_0068_6300)));
  SWIG_Python_SetConstant(d, "tagId_t_HPGLContourPenNumber_0068_6310",SWIG_From_int(static_cast< int >(imebra::tagId_t::HPGLContourPenNumber_0068_6310)));
  SWIG_Python_SetConstant(d, "tagId_t_HPGLPenSequence_0068_6320",SWIG_From_int(static_cast< int >(imebra::tagId_t::HPGLPenSequence_0068_6320)));
  SWIG_Python_SetConstant(d, "tagId_t_HPGLPenNumber_0068_6330",SWIG_From_int(static_cast< int >(imebra::tagId_t::HPGLPenNumber_0068_6330)));
  SWIG_Python_SetConstant(d, "tagId_t_HPGLPenLabel_0068_6340",SWIG_From_int(static_cast< int >(imebra::tagId_t::HPGLPenLabel_0068_6340)));
  SWIG_Python_SetConstant(d, "tagId_t_HPGLPenDescription_0068_6345",SWIG_From_int(static_cast< int >(imebra::tagId_t::HPGLPenDescription_0068_6345)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedRotationPoint_0068_6346",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedRotationPoint_0068_6346)));
  SWIG_Python_SetConstant(d, "tagId_t_BoundingRectangle_0068_6347",SWIG_From_int(static_cast< int >(imebra::tagId_t::BoundingRectangle_0068_6347)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplate3DModelSurfaceNumber_0068_6350",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplate3DModelSurfaceNumber_0068_6350)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceModelDescriptionSequence_0068_6360",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceModelDescriptionSequence_0068_6360)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceModelLabel_0068_6380",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceModelLabel_0068_6380)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceModelScalingFactor_0068_6390",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceModelScalingFactor_0068_6390)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialsCodeSequence_0068_63A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialsCodeSequence_0068_63A0)));
  SWIG_Python_SetConstant(d, "tagId_t_CoatingMaterialsCodeSequence_0068_63A4",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoatingMaterialsCodeSequence_0068_63A4)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTypeCodeSequence_0068_63A8",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTypeCodeSequence_0068_63A8)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationMethodCodeSequence_0068_63AC",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationMethodCodeSequence_0068_63AC)));
  SWIG_Python_SetConstant(d, "tagId_t_MatingFeatureSetsSequence_0068_63B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::MatingFeatureSetsSequence_0068_63B0)));
  SWIG_Python_SetConstant(d, "tagId_t_MatingFeatureSetID_0068_63C0",SWIG_From_int(static_cast< int >(imebra::tagId_t::MatingFeatureSetID_0068_63C0)));
  SWIG_Python_SetConstant(d, "tagId_t_MatingFeatureSetLabel_0068_63D0",SWIG_From_int(static_cast< int >(imebra::tagId_t::MatingFeatureSetLabel_0068_63D0)));
  SWIG_Python_SetConstant(d, "tagId_t_MatingFeatureSequence_0068_63E0",SWIG_From_int(static_cast< int >(imebra::tagId_t::MatingFeatureSequence_0068_63E0)));
  SWIG_Python_SetConstant(d, "tagId_t_MatingFeatureID_0068_63F0",SWIG_From_int(static_cast< int >(imebra::tagId_t::MatingFeatureID_0068_63F0)));
  SWIG_Python_SetConstant(d, "tagId_t_MatingFeatureDegreeOfFreedomSequence_0068_6400",SWIG_From_int(static_cast< int >(imebra::tagId_t::MatingFeatureDegreeOfFreedomSequence_0068_6400)));
  SWIG_Python_SetConstant(d, "tagId_t_DegreeOfFreedomID_0068_6410",SWIG_From_int(static_cast< int >(imebra::tagId_t::DegreeOfFreedomID_0068_6410)));
  SWIG_Python_SetConstant(d, "tagId_t_DegreeOfFreedomType_0068_6420",SWIG_From_int(static_cast< int >(imebra::tagId_t::DegreeOfFreedomType_0068_6420)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDMatingFeatureCoordinatesSequence_0068_6430",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDMatingFeatureCoordinatesSequence_0068_6430)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedHPGLDocumentID_0068_6440",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedHPGLDocumentID_0068_6440)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDMatingPoint_0068_6450",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDMatingPoint_0068_6450)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDMatingAxes_0068_6460",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDMatingAxes_0068_6460)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDDegreeOfFreedomSequence_0068_6470",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDDegreeOfFreedomSequence_0068_6470)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreeDDegreeOfFreedomAxis_0068_6490",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreeDDegreeOfFreedomAxis_0068_6490)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeOfFreedom_0068_64A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeOfFreedom_0068_64A0)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreeDMatingPoint_0068_64C0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreeDMatingPoint_0068_64C0)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreeDMatingAxes_0068_64D0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreeDMatingAxes_0068_64D0)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDDegreeOfFreedomAxis_0068_64F0",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDDegreeOfFreedomAxis_0068_64F0)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanningLandmarkPointSequence_0068_6500",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanningLandmarkPointSequence_0068_6500)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanningLandmarkLineSequence_0068_6510",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanningLandmarkLineSequence_0068_6510)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanningLandmarkPlaneSequence_0068_6520",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanningLandmarkPlaneSequence_0068_6520)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanningLandmarkID_0068_6530",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanningLandmarkID_0068_6530)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanningLandmarkDescription_0068_6540",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanningLandmarkDescription_0068_6540)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanningLandmarkIdentificationCodeSequence_0068_6545",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanningLandmarkIdentificationCodeSequence_0068_6545)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDPointCoordinatesSequence_0068_6550",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDPointCoordinatesSequence_0068_6550)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDPointCoordinates_0068_6560",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDPointCoordinates_0068_6560)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreeDPointCoordinates_0068_6590",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreeDPointCoordinates_0068_6590)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDLineCoordinatesSequence_0068_65A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDLineCoordinatesSequence_0068_65A0)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDLineCoordinates_0068_65B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDLineCoordinates_0068_65B0)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreeDLineCoordinates_0068_65D0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreeDLineCoordinates_0068_65D0)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDPlaneCoordinatesSequence_0068_65E0",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDPlaneCoordinatesSequence_0068_65E0)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDPlaneIntersection_0068_65F0",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDPlaneIntersection_0068_65F0)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreeDPlaneOrigin_0068_6610",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreeDPlaneOrigin_0068_6610)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreeDPlaneNormal_0068_6620",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreeDPlaneNormal_0068_6620)));
  SWIG_Python_SetConstant(d, "tagId_t_ModelModification_0068_7001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModelModification_0068_7001)));
  SWIG_Python_SetConstant(d, "tagId_t_ModelMirroring_0068_7002",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModelMirroring_0068_7002)));
  SWIG_Python_SetConstant(d, "tagId_t_ModelUsageCodeSequence_0068_7003",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModelUsageCodeSequence_0068_7003)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicAnnotationSequence_0070_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicAnnotationSequence_0070_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicLayer_0070_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicLayer_0070_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_BoundingBoxAnnotationUnits_0070_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::BoundingBoxAnnotationUnits_0070_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_AnchorPointAnnotationUnits_0070_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnchorPointAnnotationUnits_0070_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicAnnotationUnits_0070_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicAnnotationUnits_0070_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_UnformattedTextValue_0070_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::UnformattedTextValue_0070_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_TextObjectSequence_0070_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::TextObjectSequence_0070_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicObjectSequence_0070_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicObjectSequence_0070_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_BoundingBoxTopLeftHandCorner_0070_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::BoundingBoxTopLeftHandCorner_0070_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_BoundingBoxBottomRightHandCorner_0070_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::BoundingBoxBottomRightHandCorner_0070_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_BoundingBoxTextHorizontalJustification_0070_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::BoundingBoxTextHorizontalJustification_0070_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_AnchorPoint_0070_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnchorPoint_0070_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_AnchorPointVisibility_0070_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnchorPointVisibility_0070_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicDimensions_0070_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicDimensions_0070_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfGraphicPoints_0070_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfGraphicPoints_0070_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicData_0070_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicData_0070_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicType_0070_0023",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicType_0070_0023)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicFilled_0070_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicFilled_0070_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageHorizontalFlip_0070_0041",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageHorizontalFlip_0070_0041)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageRotationRetired_0070_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageRotationRetired_0070_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageRotation_0070_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageRotation_0070_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayedAreaTopLeftHandCornerTrial_0070_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayedAreaTopLeftHandCornerTrial_0070_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayedAreaBottomRightHandCornerTrial_0070_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayedAreaBottomRightHandCornerTrial_0070_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayedAreaTopLeftHandCorner_0070_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayedAreaTopLeftHandCorner_0070_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayedAreaBottomRightHandCorner_0070_0053",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayedAreaBottomRightHandCorner_0070_0053)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayedAreaSelectionSequence_0070_005A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayedAreaSelectionSequence_0070_005A)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicLayerSequence_0070_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicLayerSequence_0070_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicLayerOrder_0070_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicLayerOrder_0070_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicLayerRecommendedDisplayGrayscaleValue_0070_0066",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicLayerRecommendedDisplayGrayscaleValue_0070_0066)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicLayerRecommendedDisplayRGBValue_0070_0067",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicLayerRecommendedDisplayRGBValue_0070_0067)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicLayerDescription_0070_0068",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicLayerDescription_0070_0068)));
  SWIG_Python_SetConstant(d, "tagId_t_ContentLabel_0070_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContentLabel_0070_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_ContentDescription_0070_0081",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContentDescription_0070_0081)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationCreationDate_0070_0082",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationCreationDate_0070_0082)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationCreationTime_0070_0083",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationCreationTime_0070_0083)));
  SWIG_Python_SetConstant(d, "tagId_t_ContentCreatorName_0070_0084",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContentCreatorName_0070_0084)));
  SWIG_Python_SetConstant(d, "tagId_t_ContentCreatorIdentificationCodeSequence_0070_0086",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContentCreatorIdentificationCodeSequence_0070_0086)));
  SWIG_Python_SetConstant(d, "tagId_t_AlternateContentDescriptionSequence_0070_0087",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlternateContentDescriptionSequence_0070_0087)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationSizeMode_0070_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationSizeMode_0070_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationPixelSpacing_0070_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationPixelSpacing_0070_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationPixelAspectRatio_0070_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationPixelAspectRatio_0070_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationPixelMagnificationRatio_0070_0103",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationPixelMagnificationRatio_0070_0103)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicGroupLabel_0070_0207",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicGroupLabel_0070_0207)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicGroupDescription_0070_0208",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicGroupDescription_0070_0208)));
  SWIG_Python_SetConstant(d, "tagId_t_CompoundGraphicSequence_0070_0209",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompoundGraphicSequence_0070_0209)));
  SWIG_Python_SetConstant(d, "tagId_t_CompoundGraphicInstanceID_0070_0226",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompoundGraphicInstanceID_0070_0226)));
  SWIG_Python_SetConstant(d, "tagId_t_FontName_0070_0227",SWIG_From_int(static_cast< int >(imebra::tagId_t::FontName_0070_0227)));
  SWIG_Python_SetConstant(d, "tagId_t_FontNameType_0070_0228",SWIG_From_int(static_cast< int >(imebra::tagId_t::FontNameType_0070_0228)));
  SWIG_Python_SetConstant(d, "tagId_t_CSSFontName_0070_0229",SWIG_From_int(static_cast< int >(imebra::tagId_t::CSSFontName_0070_0229)));
  SWIG_Python_SetConstant(d, "tagId_t_RotationAngle_0070_0230",SWIG_From_int(static_cast< int >(imebra::tagId_t::RotationAngle_0070_0230)));
  SWIG_Python_SetConstant(d, "tagId_t_TextStyleSequence_0070_0231",SWIG_From_int(static_cast< int >(imebra::tagId_t::TextStyleSequence_0070_0231)));
  SWIG_Python_SetConstant(d, "tagId_t_LineStyleSequence_0070_0232",SWIG_From_int(static_cast< int >(imebra::tagId_t::LineStyleSequence_0070_0232)));
  SWIG_Python_SetConstant(d, "tagId_t_FillStyleSequence_0070_0233",SWIG_From_int(static_cast< int >(imebra::tagId_t::FillStyleSequence_0070_0233)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicGroupSequence_0070_0234",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicGroupSequence_0070_0234)));
  SWIG_Python_SetConstant(d, "tagId_t_TextColorCIELabValue_0070_0241",SWIG_From_int(static_cast< int >(imebra::tagId_t::TextColorCIELabValue_0070_0241)));
  SWIG_Python_SetConstant(d, "tagId_t_HorizontalAlignment_0070_0242",SWIG_From_int(static_cast< int >(imebra::tagId_t::HorizontalAlignment_0070_0242)));
  SWIG_Python_SetConstant(d, "tagId_t_VerticalAlignment_0070_0243",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerticalAlignment_0070_0243)));
  SWIG_Python_SetConstant(d, "tagId_t_ShadowStyle_0070_0244",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShadowStyle_0070_0244)));
  SWIG_Python_SetConstant(d, "tagId_t_ShadowOffsetX_0070_0245",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShadowOffsetX_0070_0245)));
  SWIG_Python_SetConstant(d, "tagId_t_ShadowOffsetY_0070_0246",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShadowOffsetY_0070_0246)));
  SWIG_Python_SetConstant(d, "tagId_t_ShadowColorCIELabValue_0070_0247",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShadowColorCIELabValue_0070_0247)));
  SWIG_Python_SetConstant(d, "tagId_t_Underlined_0070_0248",SWIG_From_int(static_cast< int >(imebra::tagId_t::Underlined_0070_0248)));
  SWIG_Python_SetConstant(d, "tagId_t_Bold_0070_0249",SWIG_From_int(static_cast< int >(imebra::tagId_t::Bold_0070_0249)));
  SWIG_Python_SetConstant(d, "tagId_t_Italic_0070_0250",SWIG_From_int(static_cast< int >(imebra::tagId_t::Italic_0070_0250)));
  SWIG_Python_SetConstant(d, "tagId_t_PatternOnColorCIELabValue_0070_0251",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatternOnColorCIELabValue_0070_0251)));
  SWIG_Python_SetConstant(d, "tagId_t_PatternOffColorCIELabValue_0070_0252",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatternOffColorCIELabValue_0070_0252)));
  SWIG_Python_SetConstant(d, "tagId_t_LineThickness_0070_0253",SWIG_From_int(static_cast< int >(imebra::tagId_t::LineThickness_0070_0253)));
  SWIG_Python_SetConstant(d, "tagId_t_LineDashingStyle_0070_0254",SWIG_From_int(static_cast< int >(imebra::tagId_t::LineDashingStyle_0070_0254)));
  SWIG_Python_SetConstant(d, "tagId_t_LinePattern_0070_0255",SWIG_From_int(static_cast< int >(imebra::tagId_t::LinePattern_0070_0255)));
  SWIG_Python_SetConstant(d, "tagId_t_FillPattern_0070_0256",SWIG_From_int(static_cast< int >(imebra::tagId_t::FillPattern_0070_0256)));
  SWIG_Python_SetConstant(d, "tagId_t_FillMode_0070_0257",SWIG_From_int(static_cast< int >(imebra::tagId_t::FillMode_0070_0257)));
  SWIG_Python_SetConstant(d, "tagId_t_ShadowOpacity_0070_0258",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShadowOpacity_0070_0258)));
  SWIG_Python_SetConstant(d, "tagId_t_GapLength_0070_0261",SWIG_From_int(static_cast< int >(imebra::tagId_t::GapLength_0070_0261)));
  SWIG_Python_SetConstant(d, "tagId_t_DiameterOfVisibility_0070_0262",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiameterOfVisibility_0070_0262)));
  SWIG_Python_SetConstant(d, "tagId_t_RotationPoint_0070_0273",SWIG_From_int(static_cast< int >(imebra::tagId_t::RotationPoint_0070_0273)));
  SWIG_Python_SetConstant(d, "tagId_t_TickAlignment_0070_0274",SWIG_From_int(static_cast< int >(imebra::tagId_t::TickAlignment_0070_0274)));
  SWIG_Python_SetConstant(d, "tagId_t_ShowTickLabel_0070_0278",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShowTickLabel_0070_0278)));
  SWIG_Python_SetConstant(d, "tagId_t_TickLabelAlignment_0070_0279",SWIG_From_int(static_cast< int >(imebra::tagId_t::TickLabelAlignment_0070_0279)));
  SWIG_Python_SetConstant(d, "tagId_t_CompoundGraphicUnits_0070_0282",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompoundGraphicUnits_0070_0282)));
  SWIG_Python_SetConstant(d, "tagId_t_PatternOnOpacity_0070_0284",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatternOnOpacity_0070_0284)));
  SWIG_Python_SetConstant(d, "tagId_t_PatternOffOpacity_0070_0285",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatternOffOpacity_0070_0285)));
  SWIG_Python_SetConstant(d, "tagId_t_MajorTicksSequence_0070_0287",SWIG_From_int(static_cast< int >(imebra::tagId_t::MajorTicksSequence_0070_0287)));
  SWIG_Python_SetConstant(d, "tagId_t_TickPosition_0070_0288",SWIG_From_int(static_cast< int >(imebra::tagId_t::TickPosition_0070_0288)));
  SWIG_Python_SetConstant(d, "tagId_t_TickLabel_0070_0289",SWIG_From_int(static_cast< int >(imebra::tagId_t::TickLabel_0070_0289)));
  SWIG_Python_SetConstant(d, "tagId_t_CompoundGraphicType_0070_0294",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompoundGraphicType_0070_0294)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicGroupID_0070_0295",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicGroupID_0070_0295)));
  SWIG_Python_SetConstant(d, "tagId_t_ShapeType_0070_0306",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShapeType_0070_0306)));
  SWIG_Python_SetConstant(d, "tagId_t_RegistrationSequence_0070_0308",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegistrationSequence_0070_0308)));
  SWIG_Python_SetConstant(d, "tagId_t_MatrixRegistrationSequence_0070_0309",SWIG_From_int(static_cast< int >(imebra::tagId_t::MatrixRegistrationSequence_0070_0309)));
  SWIG_Python_SetConstant(d, "tagId_t_MatrixSequence_0070_030A",SWIG_From_int(static_cast< int >(imebra::tagId_t::MatrixSequence_0070_030A)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix_0070_030B",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix_0070_030B)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameOfReferenceTransformationMatrixType_0070_030C",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameOfReferenceTransformationMatrixType_0070_030C)));
  SWIG_Python_SetConstant(d, "tagId_t_RegistrationTypeCodeSequence_0070_030D",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegistrationTypeCodeSequence_0070_030D)));
  SWIG_Python_SetConstant(d, "tagId_t_FiducialDescription_0070_030F",SWIG_From_int(static_cast< int >(imebra::tagId_t::FiducialDescription_0070_030F)));
  SWIG_Python_SetConstant(d, "tagId_t_FiducialIdentifier_0070_0310",SWIG_From_int(static_cast< int >(imebra::tagId_t::FiducialIdentifier_0070_0310)));
  SWIG_Python_SetConstant(d, "tagId_t_FiducialIdentifierCodeSequence_0070_0311",SWIG_From_int(static_cast< int >(imebra::tagId_t::FiducialIdentifierCodeSequence_0070_0311)));
  SWIG_Python_SetConstant(d, "tagId_t_ContourUncertaintyRadius_0070_0312",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContourUncertaintyRadius_0070_0312)));
  SWIG_Python_SetConstant(d, "tagId_t_UsedFiducialsSequence_0070_0314",SWIG_From_int(static_cast< int >(imebra::tagId_t::UsedFiducialsSequence_0070_0314)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicCoordinatesDataSequence_0070_0318",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicCoordinatesDataSequence_0070_0318)));
  SWIG_Python_SetConstant(d, "tagId_t_FiducialUID_0070_031A",SWIG_From_int(static_cast< int >(imebra::tagId_t::FiducialUID_0070_031A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFiducialUID_0070_031B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFiducialUID_0070_031B)));
  SWIG_Python_SetConstant(d, "tagId_t_FiducialSetSequence_0070_031C",SWIG_From_int(static_cast< int >(imebra::tagId_t::FiducialSetSequence_0070_031C)));
  SWIG_Python_SetConstant(d, "tagId_t_FiducialSequence_0070_031E",SWIG_From_int(static_cast< int >(imebra::tagId_t::FiducialSequence_0070_031E)));
  SWIG_Python_SetConstant(d, "tagId_t_FiducialsPropertyCategoryCodeSequence_0070_031F",SWIG_From_int(static_cast< int >(imebra::tagId_t::FiducialsPropertyCategoryCodeSequence_0070_031F)));
  SWIG_Python_SetConstant(d, "tagId_t_GraphicLayerRecommendedDisplayCIELabValue_0070_0401",SWIG_From_int(static_cast< int >(imebra::tagId_t::GraphicLayerRecommendedDisplayCIELabValue_0070_0401)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingSequence_0070_0402",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingSequence_0070_0402)));
  SWIG_Python_SetConstant(d, "tagId_t_RelativeOpacity_0070_0403",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelativeOpacity_0070_0403)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSpatialRegistrationSequence_0070_0404",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSpatialRegistrationSequence_0070_0404)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingPosition_0070_0405",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingPosition_0070_0405)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationDisplayCollectionUID_0070_1101",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationDisplayCollectionUID_0070_1101)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationSequenceCollectionUID_0070_1102",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationSequenceCollectionUID_0070_1102)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationSequencePositionIndex_0070_1103",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationSequencePositionIndex_0070_1103)));
  SWIG_Python_SetConstant(d, "tagId_t_RenderedImageReferenceSequence_0070_1104",SWIG_From_int(static_cast< int >(imebra::tagId_t::RenderedImageReferenceSequence_0070_1104)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumetricPresentationStateInputSequence_0070_1201",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumetricPresentationStateInputSequence_0070_1201)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationInputType_0070_1202",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationInputType_0070_1202)));
  SWIG_Python_SetConstant(d, "tagId_t_InputSequencePositionIndex_0070_1203",SWIG_From_int(static_cast< int >(imebra::tagId_t::InputSequencePositionIndex_0070_1203)));
  SWIG_Python_SetConstant(d, "tagId_t_Crop_0070_1204",SWIG_From_int(static_cast< int >(imebra::tagId_t::Crop_0070_1204)));
  SWIG_Python_SetConstant(d, "tagId_t_CroppingSpecificationIndex_0070_1205",SWIG_From_int(static_cast< int >(imebra::tagId_t::CroppingSpecificationIndex_0070_1205)));
  SWIG_Python_SetConstant(d, "tagId_t_CompositingMethod_0070_1206",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompositingMethod_0070_1206)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumetricPresentationInputNumber_0070_1207",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumetricPresentationInputNumber_0070_1207)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageVolumeGeometry_0070_1208",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageVolumeGeometry_0070_1208)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumetricPresentationInputSetUID_0070_1209",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumetricPresentationInputSetUID_0070_1209)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumetricPresentationInputSetSequence_0070_120A",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumetricPresentationInputSetSequence_0070_120A)));
  SWIG_Python_SetConstant(d, "tagId_t_GlobalCrop_0070_120B",SWIG_From_int(static_cast< int >(imebra::tagId_t::GlobalCrop_0070_120B)));
  SWIG_Python_SetConstant(d, "tagId_t_GlobalCroppingSpecificationIndex_0070_120C",SWIG_From_int(static_cast< int >(imebra::tagId_t::GlobalCroppingSpecificationIndex_0070_120C)));
  SWIG_Python_SetConstant(d, "tagId_t_RenderingMethod_0070_120D",SWIG_From_int(static_cast< int >(imebra::tagId_t::RenderingMethod_0070_120D)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeCroppingSequence_0070_1301",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeCroppingSequence_0070_1301)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeCroppingMethod_0070_1302",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeCroppingMethod_0070_1302)));
  SWIG_Python_SetConstant(d, "tagId_t_BoundingBoxCrop_0070_1303",SWIG_From_int(static_cast< int >(imebra::tagId_t::BoundingBoxCrop_0070_1303)));
  SWIG_Python_SetConstant(d, "tagId_t_ObliqueCroppingPlaneSequence_0070_1304",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObliqueCroppingPlaneSequence_0070_1304)));
  SWIG_Python_SetConstant(d, "tagId_t_Plane_0070_1305",SWIG_From_int(static_cast< int >(imebra::tagId_t::Plane_0070_1305)));
  SWIG_Python_SetConstant(d, "tagId_t_PlaneNormal_0070_1306",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlaneNormal_0070_1306)));
  SWIG_Python_SetConstant(d, "tagId_t_CroppingSpecificationNumber_0070_1309",SWIG_From_int(static_cast< int >(imebra::tagId_t::CroppingSpecificationNumber_0070_1309)));
  SWIG_Python_SetConstant(d, "tagId_t_MultiPlanarReconstructionStyle_0070_1501",SWIG_From_int(static_cast< int >(imebra::tagId_t::MultiPlanarReconstructionStyle_0070_1501)));
  SWIG_Python_SetConstant(d, "tagId_t_MPRThicknessType_0070_1502",SWIG_From_int(static_cast< int >(imebra::tagId_t::MPRThicknessType_0070_1502)));
  SWIG_Python_SetConstant(d, "tagId_t_MPRSlabThickness_0070_1503",SWIG_From_int(static_cast< int >(imebra::tagId_t::MPRSlabThickness_0070_1503)));
  SWIG_Python_SetConstant(d, "tagId_t_MPRTopLeftHandCorner_0070_1505",SWIG_From_int(static_cast< int >(imebra::tagId_t::MPRTopLeftHandCorner_0070_1505)));
  SWIG_Python_SetConstant(d, "tagId_t_MPRViewWidthDirection_0070_1507",SWIG_From_int(static_cast< int >(imebra::tagId_t::MPRViewWidthDirection_0070_1507)));
  SWIG_Python_SetConstant(d, "tagId_t_MPRViewWidth_0070_1508",SWIG_From_int(static_cast< int >(imebra::tagId_t::MPRViewWidth_0070_1508)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfVolumetricCurvePoints_0070_150C",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfVolumetricCurvePoints_0070_150C)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumetricCurvePoints_0070_150D",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumetricCurvePoints_0070_150D)));
  SWIG_Python_SetConstant(d, "tagId_t_MPRViewHeightDirection_0070_1511",SWIG_From_int(static_cast< int >(imebra::tagId_t::MPRViewHeightDirection_0070_1511)));
  SWIG_Python_SetConstant(d, "tagId_t_MPRViewHeight_0070_1512",SWIG_From_int(static_cast< int >(imebra::tagId_t::MPRViewHeight_0070_1512)));
  SWIG_Python_SetConstant(d, "tagId_t_RenderProjection_0070_1602",SWIG_From_int(static_cast< int >(imebra::tagId_t::RenderProjection_0070_1602)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewpointPosition_0070_1603",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewpointPosition_0070_1603)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewpointLookAtPoint_0070_1604",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewpointLookAtPoint_0070_1604)));
  SWIG_Python_SetConstant(d, "tagId_t_ViewpointUpDirection_0070_1605",SWIG_From_int(static_cast< int >(imebra::tagId_t::ViewpointUpDirection_0070_1605)));
  SWIG_Python_SetConstant(d, "tagId_t_RenderFieldOfView_0070_1606",SWIG_From_int(static_cast< int >(imebra::tagId_t::RenderFieldOfView_0070_1606)));
  SWIG_Python_SetConstant(d, "tagId_t_SamplingStepSize_0070_1607",SWIG_From_int(static_cast< int >(imebra::tagId_t::SamplingStepSize_0070_1607)));
  SWIG_Python_SetConstant(d, "tagId_t_ShadingStyle_0070_1701",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShadingStyle_0070_1701)));
  SWIG_Python_SetConstant(d, "tagId_t_AmbientReflectionIntensity_0070_1702",SWIG_From_int(static_cast< int >(imebra::tagId_t::AmbientReflectionIntensity_0070_1702)));
  SWIG_Python_SetConstant(d, "tagId_t_LightDirection_0070_1703",SWIG_From_int(static_cast< int >(imebra::tagId_t::LightDirection_0070_1703)));
  SWIG_Python_SetConstant(d, "tagId_t_DiffuseReflectionIntensity_0070_1704",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiffuseReflectionIntensity_0070_1704)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecularReflectionIntensity_0070_1705",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecularReflectionIntensity_0070_1705)));
  SWIG_Python_SetConstant(d, "tagId_t_Shininess_0070_1706",SWIG_From_int(static_cast< int >(imebra::tagId_t::Shininess_0070_1706)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationStateClassificationComponentSequence_0070_1801",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationStateClassificationComponentSequence_0070_1801)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentType_0070_1802",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentType_0070_1802)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentInputSequence_0070_1803",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentInputSequence_0070_1803)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumetricPresentationInputIndex_0070_1804",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumetricPresentationInputIndex_0070_1804)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationStateCompositorComponentSequence_0070_1805",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationStateCompositorComponentSequence_0070_1805)));
  SWIG_Python_SetConstant(d, "tagId_t_WeightingTransferFunctionSequence_0070_1806",SWIG_From_int(static_cast< int >(imebra::tagId_t::WeightingTransferFunctionSequence_0070_1806)));
  SWIG_Python_SetConstant(d, "tagId_t_WeightingLookupTableDescriptor_0070_1807",SWIG_From_int(static_cast< int >(imebra::tagId_t::WeightingLookupTableDescriptor_0070_1807)));
  SWIG_Python_SetConstant(d, "tagId_t_WeightingLookupTableData_0070_1808",SWIG_From_int(static_cast< int >(imebra::tagId_t::WeightingLookupTableData_0070_1808)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumetricAnnotationSequence_0070_1901",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumetricAnnotationSequence_0070_1901)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedStructuredContextSequence_0070_1903",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedStructuredContextSequence_0070_1903)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedContentItem_0070_1904",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedContentItem_0070_1904)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumetricPresentationInputAnnotationSequence_0070_1905",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumetricPresentationInputAnnotationSequence_0070_1905)));
  SWIG_Python_SetConstant(d, "tagId_t_AnnotationClipping_0070_1907",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnnotationClipping_0070_1907)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationAnimationStyle_0070_1A01",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationAnimationStyle_0070_1A01)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedAnimationRate_0070_1A03",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedAnimationRate_0070_1A03)));
  SWIG_Python_SetConstant(d, "tagId_t_AnimationCurveSequence_0070_1A04",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnimationCurveSequence_0070_1A04)));
  SWIG_Python_SetConstant(d, "tagId_t_AnimationStepSize_0070_1A05",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnimationStepSize_0070_1A05)));
  SWIG_Python_SetConstant(d, "tagId_t_SwivelRange_0070_1A06",SWIG_From_int(static_cast< int >(imebra::tagId_t::SwivelRange_0070_1A06)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumetricCurveUpDirections_0070_1A07",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumetricCurveUpDirections_0070_1A07)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeStreamSequence_0070_1A08",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeStreamSequence_0070_1A08)));
  SWIG_Python_SetConstant(d, "tagId_t_RGBATransferFunctionDescription_0070_1A09",SWIG_From_int(static_cast< int >(imebra::tagId_t::RGBATransferFunctionDescription_0070_1A09)));
  SWIG_Python_SetConstant(d, "tagId_t_AdvancedBlendingSequence_0070_1B01",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdvancedBlendingSequence_0070_1B01)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingInputNumber_0070_1B02",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingInputNumber_0070_1B02)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingDisplayInputSequence_0070_1B03",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingDisplayInputSequence_0070_1B03)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingDisplaySequence_0070_1B04",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingDisplaySequence_0070_1B04)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingMode_0070_1B06",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingMode_0070_1B06)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeSeriesBlending_0070_1B07",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeSeriesBlending_0070_1B07)));
  SWIG_Python_SetConstant(d, "tagId_t_GeometryForDisplay_0070_1B08",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeometryForDisplay_0070_1B08)));
  SWIG_Python_SetConstant(d, "tagId_t_ThresholdSequence_0070_1B11",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThresholdSequence_0070_1B11)));
  SWIG_Python_SetConstant(d, "tagId_t_ThresholdValueSequence_0070_1B12",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThresholdValueSequence_0070_1B12)));
  SWIG_Python_SetConstant(d, "tagId_t_ThresholdType_0070_1B13",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThresholdType_0070_1B13)));
  SWIG_Python_SetConstant(d, "tagId_t_ThresholdValue_0070_1B14",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThresholdValue_0070_1B14)));
  SWIG_Python_SetConstant(d, "tagId_t_HangingProtocolName_0072_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::HangingProtocolName_0072_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_HangingProtocolDescription_0072_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::HangingProtocolDescription_0072_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_HangingProtocolLevel_0072_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::HangingProtocolLevel_0072_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_HangingProtocolCreator_0072_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::HangingProtocolCreator_0072_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_HangingProtocolCreationDateTime_0072_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::HangingProtocolCreationDateTime_0072_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_HangingProtocolDefinitionSequence_0072_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::HangingProtocolDefinitionSequence_0072_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_HangingProtocolUserIdentificationCodeSequence_0072_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::HangingProtocolUserIdentificationCodeSequence_0072_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_HangingProtocolUserGroupName_0072_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::HangingProtocolUserGroupName_0072_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceHangingProtocolSequence_0072_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceHangingProtocolSequence_0072_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfPriorsReferenced_0072_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfPriorsReferenced_0072_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageSetsSequence_0072_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageSetsSequence_0072_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageSetSelectorSequence_0072_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageSetSelectorSequence_0072_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageSetSelectorUsageFlag_0072_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageSetSelectorUsageFlag_0072_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorAttribute_0072_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorAttribute_0072_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorValueNumber_0072_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorValueNumber_0072_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_TimeBasedImageSetsSequence_0072_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::TimeBasedImageSetsSequence_0072_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageSetNumber_0072_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageSetNumber_0072_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageSetSelectorCategory_0072_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageSetSelectorCategory_0072_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_RelativeTime_0072_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelativeTime_0072_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_RelativeTimeUnits_0072_003A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelativeTimeUnits_0072_003A)));
  SWIG_Python_SetConstant(d, "tagId_t_AbstractPriorValue_0072_003C",SWIG_From_int(static_cast< int >(imebra::tagId_t::AbstractPriorValue_0072_003C)));
  SWIG_Python_SetConstant(d, "tagId_t_AbstractPriorCodeSequence_0072_003E",SWIG_From_int(static_cast< int >(imebra::tagId_t::AbstractPriorCodeSequence_0072_003E)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageSetLabel_0072_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageSetLabel_0072_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorAttributeVR_0072_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorAttributeVR_0072_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorSequencePointer_0072_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorSequencePointer_0072_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorSequencePointerPrivateCreator_0072_0054",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorSequencePointerPrivateCreator_0072_0054)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorAttributePrivateCreator_0072_0056",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorAttributePrivateCreator_0072_0056)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorAEValue_0072_005E",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorAEValue_0072_005E)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorASValue_0072_005F",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorASValue_0072_005F)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorATValue_0072_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorATValue_0072_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorDAValue_0072_0061",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorDAValue_0072_0061)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorCSValue_0072_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorCSValue_0072_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorDTValue_0072_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorDTValue_0072_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorISValue_0072_0064",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorISValue_0072_0064)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorOBValue_0072_0065",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorOBValue_0072_0065)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorLOValue_0072_0066",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorLOValue_0072_0066)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorOFValue_0072_0067",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorOFValue_0072_0067)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorLTValue_0072_0068",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorLTValue_0072_0068)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorOWValue_0072_0069",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorOWValue_0072_0069)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorPNValue_0072_006A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorPNValue_0072_006A)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorTMValue_0072_006B",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorTMValue_0072_006B)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorSHValue_0072_006C",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorSHValue_0072_006C)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorUNValue_0072_006D",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorUNValue_0072_006D)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorSTValue_0072_006E",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorSTValue_0072_006E)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorUCValue_0072_006F",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorUCValue_0072_006F)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorUTValue_0072_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorUTValue_0072_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorURValue_0072_0071",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorURValue_0072_0071)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorDSValue_0072_0072",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorDSValue_0072_0072)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorODValue_0072_0073",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorODValue_0072_0073)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorFDValue_0072_0074",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorFDValue_0072_0074)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorOLValue_0072_0075",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorOLValue_0072_0075)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorFLValue_0072_0076",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorFLValue_0072_0076)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorULValue_0072_0078",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorULValue_0072_0078)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorUSValue_0072_007A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorUSValue_0072_007A)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorSLValue_0072_007C",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorSLValue_0072_007C)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorSSValue_0072_007E",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorSSValue_0072_007E)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorUIValue_0072_007F",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorUIValue_0072_007F)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorCodeSequenceValue_0072_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorCodeSequenceValue_0072_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfScreens_0072_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfScreens_0072_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalScreenDefinitionSequence_0072_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalScreenDefinitionSequence_0072_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfVerticalPixels_0072_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfVerticalPixels_0072_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfHorizontalPixels_0072_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfHorizontalPixels_0072_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplayEnvironmentSpatialPosition_0072_0108",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplayEnvironmentSpatialPosition_0072_0108)));
  SWIG_Python_SetConstant(d, "tagId_t_ScreenMinimumGrayscaleBitDepth_0072_010A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScreenMinimumGrayscaleBitDepth_0072_010A)));
  SWIG_Python_SetConstant(d, "tagId_t_ScreenMinimumColorBitDepth_0072_010C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScreenMinimumColorBitDepth_0072_010C)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicationMaximumRepaintTime_0072_010E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicationMaximumRepaintTime_0072_010E)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySetsSequence_0072_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySetsSequence_0072_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySetNumber_0072_0202",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySetNumber_0072_0202)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySetLabel_0072_0203",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySetLabel_0072_0203)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySetPresentationGroup_0072_0204",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySetPresentationGroup_0072_0204)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySetPresentationGroupDescription_0072_0206",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySetPresentationGroupDescription_0072_0206)));
  SWIG_Python_SetConstant(d, "tagId_t_PartialDataDisplayHandling_0072_0208",SWIG_From_int(static_cast< int >(imebra::tagId_t::PartialDataDisplayHandling_0072_0208)));
  SWIG_Python_SetConstant(d, "tagId_t_SynchronizedScrollingSequence_0072_0210",SWIG_From_int(static_cast< int >(imebra::tagId_t::SynchronizedScrollingSequence_0072_0210)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySetScrollingGroup_0072_0212",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySetScrollingGroup_0072_0212)));
  SWIG_Python_SetConstant(d, "tagId_t_NavigationIndicatorSequence_0072_0214",SWIG_From_int(static_cast< int >(imebra::tagId_t::NavigationIndicatorSequence_0072_0214)));
  SWIG_Python_SetConstant(d, "tagId_t_NavigationDisplaySet_0072_0216",SWIG_From_int(static_cast< int >(imebra::tagId_t::NavigationDisplaySet_0072_0216)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferenceDisplaySets_0072_0218",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferenceDisplaySets_0072_0218)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxesSequence_0072_0300",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxesSequence_0072_0300)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxNumber_0072_0302",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxNumber_0072_0302)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxLayoutType_0072_0304",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxLayoutType_0072_0304)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxTileHorizontalDimension_0072_0306",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxTileHorizontalDimension_0072_0306)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxTileVerticalDimension_0072_0308",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxTileVerticalDimension_0072_0308)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxScrollDirection_0072_0310",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxScrollDirection_0072_0310)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxSmallScrollType_0072_0312",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxSmallScrollType_0072_0312)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxSmallScrollAmount_0072_0314",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxSmallScrollAmount_0072_0314)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxLargeScrollType_0072_0316",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxLargeScrollType_0072_0316)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxLargeScrollAmount_0072_0318",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxLargeScrollAmount_0072_0318)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxOverlapPriority_0072_0320",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxOverlapPriority_0072_0320)));
  SWIG_Python_SetConstant(d, "tagId_t_CineRelativeToRealTime_0072_0330",SWIG_From_int(static_cast< int >(imebra::tagId_t::CineRelativeToRealTime_0072_0330)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterOperationsSequence_0072_0400",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterOperationsSequence_0072_0400)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterByCategory_0072_0402",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterByCategory_0072_0402)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterByAttributePresence_0072_0404",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterByAttributePresence_0072_0404)));
  SWIG_Python_SetConstant(d, "tagId_t_FilterByOperator_0072_0406",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilterByOperator_0072_0406)));
  SWIG_Python_SetConstant(d, "tagId_t_StructuredDisplayBackgroundCIELabValue_0072_0420",SWIG_From_int(static_cast< int >(imebra::tagId_t::StructuredDisplayBackgroundCIELabValue_0072_0420)));
  SWIG_Python_SetConstant(d, "tagId_t_EmptyImageBoxCIELabValue_0072_0421",SWIG_From_int(static_cast< int >(imebra::tagId_t::EmptyImageBoxCIELabValue_0072_0421)));
  SWIG_Python_SetConstant(d, "tagId_t_StructuredDisplayImageBoxSequence_0072_0422",SWIG_From_int(static_cast< int >(imebra::tagId_t::StructuredDisplayImageBoxSequence_0072_0422)));
  SWIG_Python_SetConstant(d, "tagId_t_StructuredDisplayTextBoxSequence_0072_0424",SWIG_From_int(static_cast< int >(imebra::tagId_t::StructuredDisplayTextBoxSequence_0072_0424)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFirstFrameSequence_0072_0427",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFirstFrameSequence_0072_0427)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxSynchronizationSequence_0072_0430",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxSynchronizationSequence_0072_0430)));
  SWIG_Python_SetConstant(d, "tagId_t_SynchronizedImageBoxList_0072_0432",SWIG_From_int(static_cast< int >(imebra::tagId_t::SynchronizedImageBoxList_0072_0432)));
  SWIG_Python_SetConstant(d, "tagId_t_TypeOfSynchronization_0072_0434",SWIG_From_int(static_cast< int >(imebra::tagId_t::TypeOfSynchronization_0072_0434)));
  SWIG_Python_SetConstant(d, "tagId_t_BlendingOperationType_0072_0500",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlendingOperationType_0072_0500)));
  SWIG_Python_SetConstant(d, "tagId_t_ReformattingOperationType_0072_0510",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReformattingOperationType_0072_0510)));
  SWIG_Python_SetConstant(d, "tagId_t_ReformattingThickness_0072_0512",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReformattingThickness_0072_0512)));
  SWIG_Python_SetConstant(d, "tagId_t_ReformattingInterval_0072_0514",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReformattingInterval_0072_0514)));
  SWIG_Python_SetConstant(d, "tagId_t_ReformattingOperationInitialViewDirection_0072_0516",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReformattingOperationInitialViewDirection_0072_0516)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreeDRenderingType_0072_0520",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreeDRenderingType_0072_0520)));
  SWIG_Python_SetConstant(d, "tagId_t_SortingOperationsSequence_0072_0600",SWIG_From_int(static_cast< int >(imebra::tagId_t::SortingOperationsSequence_0072_0600)));
  SWIG_Python_SetConstant(d, "tagId_t_SortByCategory_0072_0602",SWIG_From_int(static_cast< int >(imebra::tagId_t::SortByCategory_0072_0602)));
  SWIG_Python_SetConstant(d, "tagId_t_SortingDirection_0072_0604",SWIG_From_int(static_cast< int >(imebra::tagId_t::SortingDirection_0072_0604)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySetPatientOrientation_0072_0700",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySetPatientOrientation_0072_0700)));
  SWIG_Python_SetConstant(d, "tagId_t_VOIType_0072_0702",SWIG_From_int(static_cast< int >(imebra::tagId_t::VOIType_0072_0702)));
  SWIG_Python_SetConstant(d, "tagId_t_PseudoColorType_0072_0704",SWIG_From_int(static_cast< int >(imebra::tagId_t::PseudoColorType_0072_0704)));
  SWIG_Python_SetConstant(d, "tagId_t_PseudoColorPaletteInstanceReferenceSequence_0072_0705",SWIG_From_int(static_cast< int >(imebra::tagId_t::PseudoColorPaletteInstanceReferenceSequence_0072_0705)));
  SWIG_Python_SetConstant(d, "tagId_t_ShowGrayscaleInverted_0072_0706",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShowGrayscaleInverted_0072_0706)));
  SWIG_Python_SetConstant(d, "tagId_t_ShowImageTrueSizeFlag_0072_0710",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShowImageTrueSizeFlag_0072_0710)));
  SWIG_Python_SetConstant(d, "tagId_t_ShowGraphicAnnotationFlag_0072_0712",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShowGraphicAnnotationFlag_0072_0712)));
  SWIG_Python_SetConstant(d, "tagId_t_ShowPatientDemographicsFlag_0072_0714",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShowPatientDemographicsFlag_0072_0714)));
  SWIG_Python_SetConstant(d, "tagId_t_ShowAcquisitionTechniquesFlag_0072_0716",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShowAcquisitionTechniquesFlag_0072_0716)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySetHorizontalJustification_0072_0717",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySetHorizontalJustification_0072_0717)));
  SWIG_Python_SetConstant(d, "tagId_t_DisplaySetVerticalJustification_0072_0718",SWIG_From_int(static_cast< int >(imebra::tagId_t::DisplaySetVerticalJustification_0072_0718)));
  SWIG_Python_SetConstant(d, "tagId_t_ContinuationStartMeterset_0074_0120",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContinuationStartMeterset_0074_0120)));
  SWIG_Python_SetConstant(d, "tagId_t_ContinuationEndMeterset_0074_0121",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContinuationEndMeterset_0074_0121)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureStepState_0074_1000",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureStepState_0074_1000)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureStepProgressInformationSequence_0074_1002",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureStepProgressInformationSequence_0074_1002)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureStepProgress_0074_1004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureStepProgress_0074_1004)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureStepProgressDescription_0074_1006",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureStepProgressDescription_0074_1006)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureStepProgressParametersSequence_0074_1007",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureStepProgressParametersSequence_0074_1007)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureStepCommunicationsURISequence_0074_1008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureStepCommunicationsURISequence_0074_1008)));
  SWIG_Python_SetConstant(d, "tagId_t_ContactURI_0074_100A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContactURI_0074_100A)));
  SWIG_Python_SetConstant(d, "tagId_t_ContactDisplayName_0074_100C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContactDisplayName_0074_100C)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureStepDiscontinuationReasonCodeSequence_0074_100E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureStepDiscontinuationReasonCodeSequence_0074_100E)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamTaskSequence_0074_1020",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamTaskSequence_0074_1020)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamTaskType_0074_1022",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamTaskType_0074_1022)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamOrderIndexTrial_0074_1024",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamOrderIndexTrial_0074_1024)));
  SWIG_Python_SetConstant(d, "tagId_t_AutosequenceFlag_0074_1025",SWIG_From_int(static_cast< int >(imebra::tagId_t::AutosequenceFlag_0074_1025)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopVerticalAdjustedPosition_0074_1026",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopVerticalAdjustedPosition_0074_1026)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopLongitudinalAdjustedPosition_0074_1027",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopLongitudinalAdjustedPosition_0074_1027)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopLateralAdjustedPosition_0074_1028",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopLateralAdjustedPosition_0074_1028)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSupportAdjustedAngle_0074_102A",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSupportAdjustedAngle_0074_102A)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopEccentricAdjustedAngle_0074_102B",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopEccentricAdjustedAngle_0074_102B)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopPitchAdjustedAngle_0074_102C",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopPitchAdjustedAngle_0074_102C)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopRollAdjustedAngle_0074_102D",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopRollAdjustedAngle_0074_102D)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveryVerificationImageSequence_0074_1030",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveryVerificationImageSequence_0074_1030)));
  SWIG_Python_SetConstant(d, "tagId_t_VerificationImageTiming_0074_1032",SWIG_From_int(static_cast< int >(imebra::tagId_t::VerificationImageTiming_0074_1032)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleExposureFlag_0074_1034",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleExposureFlag_0074_1034)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleExposureOrdering_0074_1036",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleExposureOrdering_0074_1036)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleExposureMetersetTrial_0074_1038",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleExposureMetersetTrial_0074_1038)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleExposureFieldDeltaTrial_0074_103A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleExposureFieldDeltaTrial_0074_103A)));
  SWIG_Python_SetConstant(d, "tagId_t_RelatedReferenceRTImageSequence_0074_1040",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelatedReferenceRTImageSequence_0074_1040)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralMachineVerificationSequence_0074_1042",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralMachineVerificationSequence_0074_1042)));
  SWIG_Python_SetConstant(d, "tagId_t_ConventionalMachineVerificationSequence_0074_1044",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConventionalMachineVerificationSequence_0074_1044)));
  SWIG_Python_SetConstant(d, "tagId_t_IonMachineVerificationSequence_0074_1046",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonMachineVerificationSequence_0074_1046)));
  SWIG_Python_SetConstant(d, "tagId_t_FailedAttributesSequence_0074_1048",SWIG_From_int(static_cast< int >(imebra::tagId_t::FailedAttributesSequence_0074_1048)));
  SWIG_Python_SetConstant(d, "tagId_t_OverriddenAttributesSequence_0074_104A",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverriddenAttributesSequence_0074_104A)));
  SWIG_Python_SetConstant(d, "tagId_t_ConventionalControlPointVerificationSequence_0074_104C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConventionalControlPointVerificationSequence_0074_104C)));
  SWIG_Python_SetConstant(d, "tagId_t_IonControlPointVerificationSequence_0074_104E",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonControlPointVerificationSequence_0074_104E)));
  SWIG_Python_SetConstant(d, "tagId_t_AttributeOccurrenceSequence_0074_1050",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttributeOccurrenceSequence_0074_1050)));
  SWIG_Python_SetConstant(d, "tagId_t_AttributeOccurrencePointer_0074_1052",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttributeOccurrencePointer_0074_1052)));
  SWIG_Python_SetConstant(d, "tagId_t_AttributeItemSelector_0074_1054",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttributeItemSelector_0074_1054)));
  SWIG_Python_SetConstant(d, "tagId_t_AttributeOccurrencePrivateCreator_0074_1056",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttributeOccurrencePrivateCreator_0074_1056)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorSequencePointerItems_0074_1057",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorSequencePointerItems_0074_1057)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcedureStepPriority_0074_1200",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcedureStepPriority_0074_1200)));
  SWIG_Python_SetConstant(d, "tagId_t_WorklistLabel_0074_1202",SWIG_From_int(static_cast< int >(imebra::tagId_t::WorklistLabel_0074_1202)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureStepLabel_0074_1204",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureStepLabel_0074_1204)));
  SWIG_Python_SetConstant(d, "tagId_t_ScheduledProcessingParametersSequence_0074_1210",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScheduledProcessingParametersSequence_0074_1210)));
  SWIG_Python_SetConstant(d, "tagId_t_PerformedProcessingParametersSequence_0074_1212",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerformedProcessingParametersSequence_0074_1212)));
  SWIG_Python_SetConstant(d, "tagId_t_UnifiedProcedureStepPerformedProcedureSequence_0074_1216",SWIG_From_int(static_cast< int >(imebra::tagId_t::UnifiedProcedureStepPerformedProcedureSequence_0074_1216)));
  SWIG_Python_SetConstant(d, "tagId_t_RelatedProcedureStepSequence_0074_1220",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelatedProcedureStepSequence_0074_1220)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureStepRelationshipType_0074_1222",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureStepRelationshipType_0074_1222)));
  SWIG_Python_SetConstant(d, "tagId_t_ReplacedProcedureStepSequence_0074_1224",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReplacedProcedureStepSequence_0074_1224)));
  SWIG_Python_SetConstant(d, "tagId_t_DeletionLock_0074_1230",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeletionLock_0074_1230)));
  SWIG_Python_SetConstant(d, "tagId_t_ReceivingAE_0074_1234",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReceivingAE_0074_1234)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestingAE_0074_1236",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestingAE_0074_1236)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForCancellation_0074_1238",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForCancellation_0074_1238)));
  SWIG_Python_SetConstant(d, "tagId_t_SCPStatus_0074_1242",SWIG_From_int(static_cast< int >(imebra::tagId_t::SCPStatus_0074_1242)));
  SWIG_Python_SetConstant(d, "tagId_t_SubscriptionListStatus_0074_1244",SWIG_From_int(static_cast< int >(imebra::tagId_t::SubscriptionListStatus_0074_1244)));
  SWIG_Python_SetConstant(d, "tagId_t_UnifiedProcedureStepListStatus_0074_1246",SWIG_From_int(static_cast< int >(imebra::tagId_t::UnifiedProcedureStepListStatus_0074_1246)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamOrderIndex_0074_1324",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamOrderIndex_0074_1324)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleExposureMeterset_0074_1338",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleExposureMeterset_0074_1338)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleExposureFieldDelta_0074_133A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleExposureFieldDelta_0074_133A)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyTaskSequence_0074_1401",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyTaskSequence_0074_1401)));
  SWIG_Python_SetConstant(d, "tagId_t_ContinuationStartTotalReferenceAirKerma_0074_1402",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContinuationStartTotalReferenceAirKerma_0074_1402)));
  SWIG_Python_SetConstant(d, "tagId_t_ContinuationEndTotalReferenceAirKerma_0074_1403",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContinuationEndTotalReferenceAirKerma_0074_1403)));
  SWIG_Python_SetConstant(d, "tagId_t_ContinuationPulseNumber_0074_1404",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContinuationPulseNumber_0074_1404)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelDeliveryOrderSequence_0074_1405",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelDeliveryOrderSequence_0074_1405)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedChannelNumber_0074_1406",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedChannelNumber_0074_1406)));
  SWIG_Python_SetConstant(d, "tagId_t_StartCumulativeTimeWeight_0074_1407",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartCumulativeTimeWeight_0074_1407)));
  SWIG_Python_SetConstant(d, "tagId_t_EndCumulativeTimeWeight_0074_1408",SWIG_From_int(static_cast< int >(imebra::tagId_t::EndCumulativeTimeWeight_0074_1408)));
  SWIG_Python_SetConstant(d, "tagId_t_OmittedChannelSequence_0074_1409",SWIG_From_int(static_cast< int >(imebra::tagId_t::OmittedChannelSequence_0074_1409)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForChannelOmission_0074_140A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForChannelOmission_0074_140A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForChannelOmissionDescription_0074_140B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForChannelOmissionDescription_0074_140B)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelDeliveryOrderIndex_0074_140C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelDeliveryOrderIndex_0074_140C)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelDeliveryContinuationSequence_0074_140D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelDeliveryContinuationSequence_0074_140D)));
  SWIG_Python_SetConstant(d, "tagId_t_OmittedApplicationSetupSequence_0074_140E",SWIG_From_int(static_cast< int >(imebra::tagId_t::OmittedApplicationSetupSequence_0074_140E)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantAssemblyTemplateName_0076_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantAssemblyTemplateName_0076_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantAssemblyTemplateIssuer_0076_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantAssemblyTemplateIssuer_0076_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantAssemblyTemplateVersion_0076_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantAssemblyTemplateVersion_0076_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_ReplacedImplantAssemblyTemplateSequence_0076_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReplacedImplantAssemblyTemplateSequence_0076_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantAssemblyTemplateType_0076_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantAssemblyTemplateType_0076_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_OriginalImplantAssemblyTemplateSequence_0076_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::OriginalImplantAssemblyTemplateSequence_0076_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_DerivationImplantAssemblyTemplateSequence_0076_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::DerivationImplantAssemblyTemplateSequence_0076_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantAssemblyTemplateTargetAnatomySequence_0076_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantAssemblyTemplateTargetAnatomySequence_0076_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ProcedureTypeCodeSequence_0076_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProcedureTypeCodeSequence_0076_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_SurgicalTechnique_0076_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurgicalTechnique_0076_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentTypesSequence_0076_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentTypesSequence_0076_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentTypeCodeSequence_0076_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentTypeCodeSequence_0076_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_ExclusiveComponentType_0076_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExclusiveComponentType_0076_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_MandatoryComponentType_0076_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::MandatoryComponentType_0076_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentSequence_0076_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentSequence_0076_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentID_0076_0055",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentID_0076_0055)));
  SWIG_Python_SetConstant(d, "tagId_t_ComponentAssemblySequence_0076_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::ComponentAssemblySequence_0076_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_Component1ReferencedID_0076_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::Component1ReferencedID_0076_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_Component1ReferencedMatingFeatureSetID_0076_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::Component1ReferencedMatingFeatureSetID_0076_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_Component1ReferencedMatingFeatureID_0076_0090",SWIG_From_int(static_cast< int >(imebra::tagId_t::Component1ReferencedMatingFeatureID_0076_0090)));
  SWIG_Python_SetConstant(d, "tagId_t_Component2ReferencedID_0076_00A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::Component2ReferencedID_0076_00A0)));
  SWIG_Python_SetConstant(d, "tagId_t_Component2ReferencedMatingFeatureSetID_0076_00B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::Component2ReferencedMatingFeatureSetID_0076_00B0)));
  SWIG_Python_SetConstant(d, "tagId_t_Component2ReferencedMatingFeatureID_0076_00C0",SWIG_From_int(static_cast< int >(imebra::tagId_t::Component2ReferencedMatingFeatureID_0076_00C0)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupName_0078_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupName_0078_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupDescription_0078_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupDescription_0078_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupIssuer_0078_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupIssuer_0078_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupVersion_0078_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupVersion_0078_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_ReplacedImplantTemplateGroupSequence_0078_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReplacedImplantTemplateGroupSequence_0078_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupTargetAnatomySequence_0078_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupTargetAnatomySequence_0078_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupMembersSequence_0078_002A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupMembersSequence_0078_002A)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupMemberID_0078_002E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupMemberID_0078_002E)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreeDImplantTemplateGroupMemberMatchingPoint_0078_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreeDImplantTemplateGroupMemberMatchingPoint_0078_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreeDImplantTemplateGroupMemberMatchingAxes_0078_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreeDImplantTemplateGroupMemberMatchingAxes_0078_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupMemberMatching2DCoordinatesSequence_0078_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupMemberMatching2DCoordinatesSequence_0078_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDImplantTemplateGroupMemberMatchingPoint_0078_0090",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDImplantTemplateGroupMemberMatchingPoint_0078_0090)));
  SWIG_Python_SetConstant(d, "tagId_t_TwoDImplantTemplateGroupMemberMatchingAxes_0078_00A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::TwoDImplantTemplateGroupMemberMatchingAxes_0078_00A0)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupVariationDimensionSequence_0078_00B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupVariationDimensionSequence_0078_00B0)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupVariationDimensionName_0078_00B2",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupVariationDimensionName_0078_00B2)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupVariationDimensionRankSequence_0078_00B4",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupVariationDimensionRankSequence_0078_00B4)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedImplantTemplateGroupMemberID_0078_00B6",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedImplantTemplateGroupMemberID_0078_00B6)));
  SWIG_Python_SetConstant(d, "tagId_t_ImplantTemplateGroupVariationDimensionRank_0078_00B8",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImplantTemplateGroupVariationDimensionRank_0078_00B8)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceScanAcquisitionTypeCodeSequence_0080_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceScanAcquisitionTypeCodeSequence_0080_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceScanModeCodeSequence_0080_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceScanModeCodeSequence_0080_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_RegistrationMethodCodeSequence_0080_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::RegistrationMethodCodeSequence_0080_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_ShotDurationTime_0080_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShotDurationTime_0080_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_ShotOffsetTime_0080_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShotOffsetTime_0080_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfacePointPresentationValueData_0080_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfacePointPresentationValueData_0080_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfacePointColorCIELabValueData_0080_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfacePointColorCIELabValueData_0080_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_UVMappingSequence_0080_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::UVMappingSequence_0080_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_TextureLabel_0080_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::TextureLabel_0080_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_UValueData_0080_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::UValueData_0080_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_VValueData_0080_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::VValueData_0080_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedTextureSequence_0080_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedTextureSequence_0080_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSurfaceDataSequence_0080_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSurfaceDataSequence_0080_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_AssessmentSummary_0082_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssessmentSummary_0082_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_AssessmentSummaryDescription_0082_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssessmentSummaryDescription_0082_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_AssessedSOPInstanceSequence_0082_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssessedSOPInstanceSequence_0082_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedComparisonSOPInstanceSequence_0082_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedComparisonSOPInstanceSequence_0082_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfAssessmentObservations_0082_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfAssessmentObservations_0082_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_AssessmentObservationsSequence_0082_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssessmentObservationsSequence_0082_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationSignificance_0082_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationSignificance_0082_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationDescription_0082_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationDescription_0082_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_StructuredConstraintObservationSequence_0082_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::StructuredConstraintObservationSequence_0082_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_AssessedAttributeValueSequence_0082_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssessedAttributeValueSequence_0082_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_AssessmentSetID_0082_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssessmentSetID_0082_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_AssessmentRequesterSequence_0082_0017",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssessmentRequesterSequence_0082_0017)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorAttributeName_0082_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorAttributeName_0082_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_SelectorAttributeKeyword_0082_0019",SWIG_From_int(static_cast< int >(imebra::tagId_t::SelectorAttributeKeyword_0082_0019)));
  SWIG_Python_SetConstant(d, "tagId_t_AssessmentTypeCodeSequence_0082_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssessmentTypeCodeSequence_0082_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationBasisCodeSequence_0082_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationBasisCodeSequence_0082_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_AssessmentLabel_0082_0023",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssessmentLabel_0082_0023)));
  SWIG_Python_SetConstant(d, "tagId_t_ConstraintType_0082_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConstraintType_0082_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecificationSelectionGuidance_0082_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecificationSelectionGuidance_0082_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_ConstraintValueSequence_0082_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConstraintValueSequence_0082_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_RecommendedDefaultValueSequence_0082_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecommendedDefaultValueSequence_0082_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_ConstraintViolationSignificance_0082_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConstraintViolationSignificance_0082_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_ConstraintViolationCondition_0082_0037",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConstraintViolationCondition_0082_0037)));
  SWIG_Python_SetConstant(d, "tagId_t_ModifiableConstraintFlag_0082_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModifiableConstraintFlag_0082_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_StorageMediaFileSetID_0088_0130",SWIG_From_int(static_cast< int >(imebra::tagId_t::StorageMediaFileSetID_0088_0130)));
  SWIG_Python_SetConstant(d, "tagId_t_StorageMediaFileSetUID_0088_0140",SWIG_From_int(static_cast< int >(imebra::tagId_t::StorageMediaFileSetUID_0088_0140)));
  SWIG_Python_SetConstant(d, "tagId_t_IconImageSequence_0088_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::IconImageSequence_0088_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_TopicTitle_0088_0904",SWIG_From_int(static_cast< int >(imebra::tagId_t::TopicTitle_0088_0904)));
  SWIG_Python_SetConstant(d, "tagId_t_TopicSubject_0088_0906",SWIG_From_int(static_cast< int >(imebra::tagId_t::TopicSubject_0088_0906)));
  SWIG_Python_SetConstant(d, "tagId_t_TopicAuthor_0088_0910",SWIG_From_int(static_cast< int >(imebra::tagId_t::TopicAuthor_0088_0910)));
  SWIG_Python_SetConstant(d, "tagId_t_TopicKeywords_0088_0912",SWIG_From_int(static_cast< int >(imebra::tagId_t::TopicKeywords_0088_0912)));
  SWIG_Python_SetConstant(d, "tagId_t_SOPInstanceStatus_0100_0410",SWIG_From_int(static_cast< int >(imebra::tagId_t::SOPInstanceStatus_0100_0410)));
  SWIG_Python_SetConstant(d, "tagId_t_SOPAuthorizationDateTime_0100_0420",SWIG_From_int(static_cast< int >(imebra::tagId_t::SOPAuthorizationDateTime_0100_0420)));
  SWIG_Python_SetConstant(d, "tagId_t_SOPAuthorizationComment_0100_0424",SWIG_From_int(static_cast< int >(imebra::tagId_t::SOPAuthorizationComment_0100_0424)));
  SWIG_Python_SetConstant(d, "tagId_t_AuthorizationEquipmentCertificationNumber_0100_0426",SWIG_From_int(static_cast< int >(imebra::tagId_t::AuthorizationEquipmentCertificationNumber_0100_0426)));
  SWIG_Python_SetConstant(d, "tagId_t_MACIDNumber_0400_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::MACIDNumber_0400_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_MACCalculationTransferSyntaxUID_0400_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::MACCalculationTransferSyntaxUID_0400_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_MACAlgorithm_0400_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::MACAlgorithm_0400_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_DataElementsSigned_0400_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataElementsSigned_0400_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_DigitalSignatureUID_0400_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::DigitalSignatureUID_0400_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_DigitalSignatureDateTime_0400_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::DigitalSignatureDateTime_0400_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_CertificateType_0400_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::CertificateType_0400_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_CertificateOfSigner_0400_0115",SWIG_From_int(static_cast< int >(imebra::tagId_t::CertificateOfSigner_0400_0115)));
  SWIG_Python_SetConstant(d, "tagId_t_Signature_0400_0120",SWIG_From_int(static_cast< int >(imebra::tagId_t::Signature_0400_0120)));
  SWIG_Python_SetConstant(d, "tagId_t_CertifiedTimestampType_0400_0305",SWIG_From_int(static_cast< int >(imebra::tagId_t::CertifiedTimestampType_0400_0305)));
  SWIG_Python_SetConstant(d, "tagId_t_CertifiedTimestamp_0400_0310",SWIG_From_int(static_cast< int >(imebra::tagId_t::CertifiedTimestamp_0400_0310)));
  SWIG_Python_SetConstant(d, "tagId_t_DigitalSignaturePurposeCodeSequence_0400_0401",SWIG_From_int(static_cast< int >(imebra::tagId_t::DigitalSignaturePurposeCodeSequence_0400_0401)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedDigitalSignatureSequence_0400_0402",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedDigitalSignatureSequence_0400_0402)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSOPInstanceMACSequence_0400_0403",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSOPInstanceMACSequence_0400_0403)));
  SWIG_Python_SetConstant(d, "tagId_t_MAC_0400_0404",SWIG_From_int(static_cast< int >(imebra::tagId_t::MAC_0400_0404)));
  SWIG_Python_SetConstant(d, "tagId_t_EncryptedAttributesSequence_0400_0500",SWIG_From_int(static_cast< int >(imebra::tagId_t::EncryptedAttributesSequence_0400_0500)));
  SWIG_Python_SetConstant(d, "tagId_t_EncryptedContentTransferSyntaxUID_0400_0510",SWIG_From_int(static_cast< int >(imebra::tagId_t::EncryptedContentTransferSyntaxUID_0400_0510)));
  SWIG_Python_SetConstant(d, "tagId_t_EncryptedContent_0400_0520",SWIG_From_int(static_cast< int >(imebra::tagId_t::EncryptedContent_0400_0520)));
  SWIG_Python_SetConstant(d, "tagId_t_ModifiedAttributesSequence_0400_0550",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModifiedAttributesSequence_0400_0550)));
  SWIG_Python_SetConstant(d, "tagId_t_OriginalAttributesSequence_0400_0561",SWIG_From_int(static_cast< int >(imebra::tagId_t::OriginalAttributesSequence_0400_0561)));
  SWIG_Python_SetConstant(d, "tagId_t_AttributeModificationDateTime_0400_0562",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttributeModificationDateTime_0400_0562)));
  SWIG_Python_SetConstant(d, "tagId_t_ModifyingSystem_0400_0563",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModifyingSystem_0400_0563)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceOfPreviousValues_0400_0564",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceOfPreviousValues_0400_0564)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForTheAttributeModification_0400_0565",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForTheAttributeModification_0400_0565)));
  SWIG_Python_SetConstant(d, "tagId_t_InstanceOriginStatus_0400_0600",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstanceOriginStatus_0400_0600)));
  SWIG_Python_SetConstant(d, "tagId_t_EscapeTriplet_1000_0000",SWIG_From_int(static_cast< int >(imebra::tagId_t::EscapeTriplet_1000_0000)));
  SWIG_Python_SetConstant(d, "tagId_t_RunLengthTriplet_1000_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::RunLengthTriplet_1000_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_HuffmanTableSize_1000_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::HuffmanTableSize_1000_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_HuffmanTableTriplet_1000_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::HuffmanTableTriplet_1000_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_ShiftTableSize_1000_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShiftTableSize_1000_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_ShiftTableTriplet_1000_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShiftTableTriplet_1000_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_ZonalMap_1010_0000",SWIG_From_int(static_cast< int >(imebra::tagId_t::ZonalMap_1010_0000)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfCopies_2000_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfCopies_2000_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_PrinterConfigurationSequence_2000_001E",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrinterConfigurationSequence_2000_001E)));
  SWIG_Python_SetConstant(d, "tagId_t_PrintPriority_2000_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrintPriority_2000_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_MediumType_2000_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::MediumType_2000_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_FilmDestination_2000_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilmDestination_2000_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_FilmSessionLabel_2000_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilmSessionLabel_2000_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_MemoryAllocation_2000_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::MemoryAllocation_2000_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumMemoryAllocation_2000_0061",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumMemoryAllocation_2000_0061)));
  SWIG_Python_SetConstant(d, "tagId_t_ColorImagePrintingFlag_2000_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::ColorImagePrintingFlag_2000_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_CollationFlag_2000_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::CollationFlag_2000_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_AnnotationFlag_2000_0065",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnnotationFlag_2000_0065)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageOverlayFlag_2000_0067",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageOverlayFlag_2000_0067)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationLUTFlag_2000_0069",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationLUTFlag_2000_0069)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxPresentationLUTFlag_2000_006A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxPresentationLUTFlag_2000_006A)));
  SWIG_Python_SetConstant(d, "tagId_t_MemoryBitDepth_2000_00A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::MemoryBitDepth_2000_00A0)));
  SWIG_Python_SetConstant(d, "tagId_t_PrintingBitDepth_2000_00A1",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrintingBitDepth_2000_00A1)));
  SWIG_Python_SetConstant(d, "tagId_t_MediaInstalledSequence_2000_00A2",SWIG_From_int(static_cast< int >(imebra::tagId_t::MediaInstalledSequence_2000_00A2)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherMediaAvailableSequence_2000_00A4",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherMediaAvailableSequence_2000_00A4)));
  SWIG_Python_SetConstant(d, "tagId_t_SupportedImageDisplayFormatsSequence_2000_00A8",SWIG_From_int(static_cast< int >(imebra::tagId_t::SupportedImageDisplayFormatsSequence_2000_00A8)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFilmBoxSequence_2000_0500",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFilmBoxSequence_2000_0500)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedStoredPrintSequence_2000_0510",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedStoredPrintSequence_2000_0510)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageDisplayFormat_2010_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageDisplayFormat_2010_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_AnnotationDisplayFormatID_2010_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnnotationDisplayFormatID_2010_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_FilmOrientation_2010_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilmOrientation_2010_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_FilmSizeID_2010_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilmSizeID_2010_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_PrinterResolutionID_2010_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrinterResolutionID_2010_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_DefaultPrinterResolutionID_2010_0054",SWIG_From_int(static_cast< int >(imebra::tagId_t::DefaultPrinterResolutionID_2010_0054)));
  SWIG_Python_SetConstant(d, "tagId_t_MagnificationType_2010_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::MagnificationType_2010_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_SmoothingType_2010_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::SmoothingType_2010_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_DefaultMagnificationType_2010_00A6",SWIG_From_int(static_cast< int >(imebra::tagId_t::DefaultMagnificationType_2010_00A6)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherMagnificationTypesAvailable_2010_00A7",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherMagnificationTypesAvailable_2010_00A7)));
  SWIG_Python_SetConstant(d, "tagId_t_DefaultSmoothingType_2010_00A8",SWIG_From_int(static_cast< int >(imebra::tagId_t::DefaultSmoothingType_2010_00A8)));
  SWIG_Python_SetConstant(d, "tagId_t_OtherSmoothingTypesAvailable_2010_00A9",SWIG_From_int(static_cast< int >(imebra::tagId_t::OtherSmoothingTypesAvailable_2010_00A9)));
  SWIG_Python_SetConstant(d, "tagId_t_BorderDensity_2010_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::BorderDensity_2010_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_EmptyImageDensity_2010_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::EmptyImageDensity_2010_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_MinDensity_2010_0120",SWIG_From_int(static_cast< int >(imebra::tagId_t::MinDensity_2010_0120)));
  SWIG_Python_SetConstant(d, "tagId_t_MaxDensity_2010_0130",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaxDensity_2010_0130)));
  SWIG_Python_SetConstant(d, "tagId_t_Trim_2010_0140",SWIG_From_int(static_cast< int >(imebra::tagId_t::Trim_2010_0140)));
  SWIG_Python_SetConstant(d, "tagId_t_ConfigurationInformation_2010_0150",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConfigurationInformation_2010_0150)));
  SWIG_Python_SetConstant(d, "tagId_t_ConfigurationInformationDescription_2010_0152",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConfigurationInformationDescription_2010_0152)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumCollatedFilms_2010_0154",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumCollatedFilms_2010_0154)));
  SWIG_Python_SetConstant(d, "tagId_t_Illumination_2010_015E",SWIG_From_int(static_cast< int >(imebra::tagId_t::Illumination_2010_015E)));
  SWIG_Python_SetConstant(d, "tagId_t_ReflectedAmbientLight_2010_0160",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReflectedAmbientLight_2010_0160)));
  SWIG_Python_SetConstant(d, "tagId_t_PrinterPixelSpacing_2010_0376",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrinterPixelSpacing_2010_0376)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFilmSessionSequence_2010_0500",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFilmSessionSequence_2010_0500)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedImageBoxSequence_2010_0510",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedImageBoxSequence_2010_0510)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedBasicAnnotationBoxSequence_2010_0520",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedBasicAnnotationBoxSequence_2010_0520)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxPosition_2020_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxPosition_2020_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_Polarity_2020_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::Polarity_2020_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedImageSize_2020_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedImageSize_2020_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedDecimateCropBehavior_2020_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedDecimateCropBehavior_2020_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedResolutionID_2020_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedResolutionID_2020_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedImageSizeFlag_2020_00A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedImageSizeFlag_2020_00A0)));
  SWIG_Python_SetConstant(d, "tagId_t_DecimateCropResult_2020_00A2",SWIG_From_int(static_cast< int >(imebra::tagId_t::DecimateCropResult_2020_00A2)));
  SWIG_Python_SetConstant(d, "tagId_t_BasicGrayscaleImageSequence_2020_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::BasicGrayscaleImageSequence_2020_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_BasicColorImageSequence_2020_0111",SWIG_From_int(static_cast< int >(imebra::tagId_t::BasicColorImageSequence_2020_0111)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedImageOverlayBoxSequence_2020_0130",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedImageOverlayBoxSequence_2020_0130)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedVOILUTBoxSequence_2020_0140",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedVOILUTBoxSequence_2020_0140)));
  SWIG_Python_SetConstant(d, "tagId_t_AnnotationPosition_2030_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnnotationPosition_2030_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_TextString_2030_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::TextString_2030_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedOverlayPlaneSequence_2040_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedOverlayPlaneSequence_2040_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedOverlayPlaneGroups_2040_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedOverlayPlaneGroups_2040_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayPixelDataSequence_2040_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayPixelDataSequence_2040_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayMagnificationType_2040_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayMagnificationType_2040_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlaySmoothingType_2040_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlaySmoothingType_2040_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayOrImageMagnification_2040_0072",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayOrImageMagnification_2040_0072)));
  SWIG_Python_SetConstant(d, "tagId_t_MagnifyToNumberOfColumns_2040_0074",SWIG_From_int(static_cast< int >(imebra::tagId_t::MagnifyToNumberOfColumns_2040_0074)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayForegroundDensity_2040_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayForegroundDensity_2040_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayBackgroundDensity_2040_0082",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayBackgroundDensity_2040_0082)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayMode_2040_0090",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayMode_2040_0090)));
  SWIG_Python_SetConstant(d, "tagId_t_ThresholdDensity_2040_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThresholdDensity_2040_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedImageBoxSequenceRetired_2040_0500",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedImageBoxSequenceRetired_2040_0500)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationLUTSequence_2050_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationLUTSequence_2050_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationLUTShape_2050_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationLUTShape_2050_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPresentationLUTSequence_2050_0500",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPresentationLUTSequence_2050_0500)));
  SWIG_Python_SetConstant(d, "tagId_t_PrintJobID_2100_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrintJobID_2100_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ExecutionStatus_2100_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExecutionStatus_2100_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_ExecutionStatusInfo_2100_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExecutionStatusInfo_2100_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_CreationDate_2100_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::CreationDate_2100_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_CreationTime_2100_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::CreationTime_2100_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_Originator_2100_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::Originator_2100_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_DestinationAE_2100_0140",SWIG_From_int(static_cast< int >(imebra::tagId_t::DestinationAE_2100_0140)));
  SWIG_Python_SetConstant(d, "tagId_t_OwnerID_2100_0160",SWIG_From_int(static_cast< int >(imebra::tagId_t::OwnerID_2100_0160)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFilms_2100_0170",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFilms_2100_0170)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPrintJobSequencePullStoredPrint_2100_0500",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPrintJobSequencePullStoredPrint_2100_0500)));
  SWIG_Python_SetConstant(d, "tagId_t_PrinterStatus_2110_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrinterStatus_2110_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_PrinterStatusInfo_2110_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrinterStatusInfo_2110_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_PrinterName_2110_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrinterName_2110_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_PrintQueueID_2110_0099",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrintQueueID_2110_0099)));
  SWIG_Python_SetConstant(d, "tagId_t_QueueStatus_2120_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::QueueStatus_2120_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_PrintJobDescriptionSequence_2120_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrintJobDescriptionSequence_2120_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPrintJobSequence_2120_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPrintJobSequence_2120_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_PrintManagementCapabilitiesSequence_2130_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrintManagementCapabilitiesSequence_2130_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_PrinterCharacteristicsSequence_2130_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrinterCharacteristicsSequence_2130_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_FilmBoxContentSequence_2130_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::FilmBoxContentSequence_2130_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageBoxContentSequence_2130_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageBoxContentSequence_2130_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_AnnotationContentSequence_2130_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnnotationContentSequence_2130_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageOverlayBoxContentSequence_2130_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageOverlayBoxContentSequence_2130_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_PresentationLUTContentSequence_2130_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::PresentationLUTContentSequence_2130_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_ProposedStudySequence_2130_00A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ProposedStudySequence_2130_00A0)));
  SWIG_Python_SetConstant(d, "tagId_t_OriginalImageSequence_2130_00C0",SWIG_From_int(static_cast< int >(imebra::tagId_t::OriginalImageSequence_2130_00C0)));
  SWIG_Python_SetConstant(d, "tagId_t_LabelUsingInformationExtractedFromInstances_2200_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::LabelUsingInformationExtractedFromInstances_2200_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_LabelText_2200_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::LabelText_2200_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_LabelStyleSelection_2200_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::LabelStyleSelection_2200_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_MediaDisposition_2200_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::MediaDisposition_2200_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_BarcodeValue_2200_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::BarcodeValue_2200_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_BarcodeSymbology_2200_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::BarcodeSymbology_2200_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_AllowMediaSplitting_2200_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::AllowMediaSplitting_2200_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_IncludeNonDICOMObjects_2200_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::IncludeNonDICOMObjects_2200_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_IncludeDisplayApplication_2200_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::IncludeDisplayApplication_2200_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_PreserveCompositeInstancesAfterMediaCreation_2200_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::PreserveCompositeInstancesAfterMediaCreation_2200_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalNumberOfPiecesOfMediaCreated_2200_000B",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalNumberOfPiecesOfMediaCreated_2200_000B)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestedMediaApplicationProfile_2200_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestedMediaApplicationProfile_2200_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedStorageMediaSequence_2200_000D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedStorageMediaSequence_2200_000D)));
  SWIG_Python_SetConstant(d, "tagId_t_FailureAttributes_2200_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::FailureAttributes_2200_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_AllowLossyCompression_2200_000F",SWIG_From_int(static_cast< int >(imebra::tagId_t::AllowLossyCompression_2200_000F)));
  SWIG_Python_SetConstant(d, "tagId_t_RequestPriority_2200_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::RequestPriority_2200_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_RTImageLabel_3002_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTImageLabel_3002_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_RTImageName_3002_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTImageName_3002_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_RTImageDescription_3002_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTImageDescription_3002_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_ReportedValuesOrigin_3002_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReportedValuesOrigin_3002_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_RTImagePlane_3002_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTImagePlane_3002_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayImageReceptorTranslation_3002_000D",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayImageReceptorTranslation_3002_000D)));
  SWIG_Python_SetConstant(d, "tagId_t_XRayImageReceptorAngle_3002_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::XRayImageReceptorAngle_3002_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_RTImageOrientation_3002_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTImageOrientation_3002_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagePlanePixelSpacing_3002_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagePlanePixelSpacing_3002_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_RTImagePosition_3002_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTImagePosition_3002_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiationMachineName_3002_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiationMachineName_3002_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiationMachineSAD_3002_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiationMachineSAD_3002_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiationMachineSSD_3002_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiationMachineSSD_3002_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_RTImageSID_3002_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTImageSID_3002_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceToReferenceObjectDistance_3002_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceToReferenceObjectDistance_3002_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionNumber_3002_0029",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionNumber_3002_0029)));
  SWIG_Python_SetConstant(d, "tagId_t_ExposureSequence_3002_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExposureSequence_3002_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_MetersetExposure_3002_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::MetersetExposure_3002_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_DiaphragmPosition_3002_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::DiaphragmPosition_3002_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_FluenceMapSequence_3002_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::FluenceMapSequence_3002_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_FluenceDataSource_3002_0041",SWIG_From_int(static_cast< int >(imebra::tagId_t::FluenceDataSource_3002_0041)));
  SWIG_Python_SetConstant(d, "tagId_t_FluenceDataScale_3002_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::FluenceDataScale_3002_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_PrimaryFluenceModeSequence_3002_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrimaryFluenceModeSequence_3002_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_FluenceMode_3002_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::FluenceMode_3002_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_FluenceModeID_3002_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::FluenceModeID_3002_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHType_3004_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHType_3004_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseUnits_3004_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseUnits_3004_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseType_3004_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseType_3004_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_SpatialTransformOfDose_3004_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpatialTransformOfDose_3004_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseComment_3004_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseComment_3004_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_NormalizationPoint_3004_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::NormalizationPoint_3004_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseSummationType_3004_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseSummationType_3004_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_GridFrameOffsetVector_3004_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::GridFrameOffsetVector_3004_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseGridScaling_3004_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseGridScaling_3004_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_RTDoseROISequence_3004_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTDoseROISequence_3004_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseValue_3004_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseValue_3004_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_TissueHeterogeneityCorrection_3004_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::TissueHeterogeneityCorrection_3004_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHNormalizationPoint_3004_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHNormalizationPoint_3004_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHNormalizationDoseValue_3004_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHNormalizationDoseValue_3004_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHSequence_3004_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHSequence_3004_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHDoseScaling_3004_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHDoseScaling_3004_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHVolumeUnits_3004_0054",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHVolumeUnits_3004_0054)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHNumberOfBins_3004_0056",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHNumberOfBins_3004_0056)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHData_3004_0058",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHData_3004_0058)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHReferencedROISequence_3004_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHReferencedROISequence_3004_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHROIContributionType_3004_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHROIContributionType_3004_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHMinimumDose_3004_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHMinimumDose_3004_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHMaximumDose_3004_0072",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHMaximumDose_3004_0072)));
  SWIG_Python_SetConstant(d, "tagId_t_DVHMeanDose_3004_0074",SWIG_From_int(static_cast< int >(imebra::tagId_t::DVHMeanDose_3004_0074)));
  SWIG_Python_SetConstant(d, "tagId_t_StructureSetLabel_3006_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::StructureSetLabel_3006_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_StructureSetName_3006_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::StructureSetName_3006_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_StructureSetDescription_3006_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::StructureSetDescription_3006_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_StructureSetDate_3006_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::StructureSetDate_3006_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_StructureSetTime_3006_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::StructureSetTime_3006_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFrameOfReferenceSequence_3006_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFrameOfReferenceSequence_3006_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_RTReferencedStudySequence_3006_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTReferencedStudySequence_3006_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_RTReferencedSeriesSequence_3006_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTReferencedSeriesSequence_3006_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_ContourImageSequence_3006_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContourImageSequence_3006_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_PredecessorStructureSetSequence_3006_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::PredecessorStructureSetSequence_3006_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_StructureSetROISequence_3006_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::StructureSetROISequence_3006_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_ROINumber_3006_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROINumber_3006_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFrameOfReferenceUID_3006_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFrameOfReferenceUID_3006_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIName_3006_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIName_3006_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIDescription_3006_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIDescription_3006_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIDisplayColor_3006_002A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIDisplayColor_3006_002A)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIVolume_3006_002C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIVolume_3006_002C)));
  SWIG_Python_SetConstant(d, "tagId_t_RTRelatedROISequence_3006_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTRelatedROISequence_3006_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_RTROIRelationship_3006_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTROIRelationship_3006_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIGenerationAlgorithm_3006_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIGenerationAlgorithm_3006_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIDerivationAlgorithmIdentificationSequence_3006_0037",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIDerivationAlgorithmIdentificationSequence_3006_0037)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIGenerationDescription_3006_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIGenerationDescription_3006_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIContourSequence_3006_0039",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIContourSequence_3006_0039)));
  SWIG_Python_SetConstant(d, "tagId_t_ContourSequence_3006_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContourSequence_3006_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_ContourGeometricType_3006_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContourGeometricType_3006_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_ContourSlabThickness_3006_0044",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContourSlabThickness_3006_0044)));
  SWIG_Python_SetConstant(d, "tagId_t_ContourOffsetVector_3006_0045",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContourOffsetVector_3006_0045)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfContourPoints_3006_0046",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfContourPoints_3006_0046)));
  SWIG_Python_SetConstant(d, "tagId_t_ContourNumber_3006_0048",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContourNumber_3006_0048)));
  SWIG_Python_SetConstant(d, "tagId_t_AttachedContours_3006_0049",SWIG_From_int(static_cast< int >(imebra::tagId_t::AttachedContours_3006_0049)));
  SWIG_Python_SetConstant(d, "tagId_t_ContourData_3006_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::ContourData_3006_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_RTROIObservationsSequence_3006_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTROIObservationsSequence_3006_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_ObservationNumber_3006_0082",SWIG_From_int(static_cast< int >(imebra::tagId_t::ObservationNumber_3006_0082)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedROINumber_3006_0084",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedROINumber_3006_0084)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIObservationLabel_3006_0085",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIObservationLabel_3006_0085)));
  SWIG_Python_SetConstant(d, "tagId_t_RTROIIdentificationCodeSequence_3006_0086",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTROIIdentificationCodeSequence_3006_0086)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIObservationDescription_3006_0088",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIObservationDescription_3006_0088)));
  SWIG_Python_SetConstant(d, "tagId_t_RelatedRTROIObservationsSequence_3006_00A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelatedRTROIObservationsSequence_3006_00A0)));
  SWIG_Python_SetConstant(d, "tagId_t_RTROIInterpretedType_3006_00A4",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTROIInterpretedType_3006_00A4)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIInterpreter_3006_00A6",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIInterpreter_3006_00A6)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIPhysicalPropertiesSequence_3006_00B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIPhysicalPropertiesSequence_3006_00B0)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIPhysicalProperty_3006_00B2",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIPhysicalProperty_3006_00B2)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIPhysicalPropertyValue_3006_00B4",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIPhysicalPropertyValue_3006_00B4)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIElementalCompositionSequence_3006_00B6",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIElementalCompositionSequence_3006_00B6)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIElementalCompositionAtomicNumber_3006_00B7",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIElementalCompositionAtomicNumber_3006_00B7)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIElementalCompositionAtomicMassFraction_3006_00B8",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIElementalCompositionAtomicMassFraction_3006_00B8)));
  SWIG_Python_SetConstant(d, "tagId_t_AdditionalRTROIIdentificationCodeSequence_3006_00B9",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdditionalRTROIIdentificationCodeSequence_3006_00B9)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameOfReferenceRelationshipSequence_3006_00C0",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameOfReferenceRelationshipSequence_3006_00C0)));
  SWIG_Python_SetConstant(d, "tagId_t_RelatedFrameOfReferenceUID_3006_00C2",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelatedFrameOfReferenceUID_3006_00C2)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameOfReferenceTransformationType_3006_00C4",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameOfReferenceTransformationType_3006_00C4)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameOfReferenceTransformationMatrix_3006_00C6",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameOfReferenceTransformationMatrix_3006_00C6)));
  SWIG_Python_SetConstant(d, "tagId_t_FrameOfReferenceTransformationComment_3006_00C8",SWIG_From_int(static_cast< int >(imebra::tagId_t::FrameOfReferenceTransformationComment_3006_00C8)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredDoseReferenceSequence_3008_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredDoseReferenceSequence_3008_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredDoseDescription_3008_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredDoseDescription_3008_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredDoseType_3008_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredDoseType_3008_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredDoseValue_3008_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredDoseValue_3008_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentSessionBeamSequence_3008_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentSessionBeamSequence_3008_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentSessionIonBeamSequence_3008_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentSessionIonBeamSequence_3008_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_CurrentFractionNumber_3008_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurrentFractionNumber_3008_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentControlPointDate_3008_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentControlPointDate_3008_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentControlPointTime_3008_0025",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentControlPointTime_3008_0025)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentTerminationStatus_3008_002A",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentTerminationStatus_3008_002A)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentTerminationCode_3008_002B",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentTerminationCode_3008_002B)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentVerificationStatus_3008_002C",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentVerificationStatus_3008_002C)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedTreatmentRecordSequence_3008_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedTreatmentRecordSequence_3008_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecifiedPrimaryMeterset_3008_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecifiedPrimaryMeterset_3008_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecifiedSecondaryMeterset_3008_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecifiedSecondaryMeterset_3008_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredPrimaryMeterset_3008_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredPrimaryMeterset_3008_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredSecondaryMeterset_3008_0037",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredSecondaryMeterset_3008_0037)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecifiedTreatmentTime_3008_003A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecifiedTreatmentTime_3008_003A)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredTreatmentTime_3008_003B",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredTreatmentTime_3008_003B)));
  SWIG_Python_SetConstant(d, "tagId_t_ControlPointDeliverySequence_3008_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ControlPointDeliverySequence_3008_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_IonControlPointDeliverySequence_3008_0041",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonControlPointDeliverySequence_3008_0041)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecifiedMeterset_3008_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecifiedMeterset_3008_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredMeterset_3008_0044",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredMeterset_3008_0044)));
  SWIG_Python_SetConstant(d, "tagId_t_MetersetRateSet_3008_0045",SWIG_From_int(static_cast< int >(imebra::tagId_t::MetersetRateSet_3008_0045)));
  SWIG_Python_SetConstant(d, "tagId_t_MetersetRateDelivered_3008_0046",SWIG_From_int(static_cast< int >(imebra::tagId_t::MetersetRateDelivered_3008_0046)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanSpotMetersetsDelivered_3008_0047",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanSpotMetersetsDelivered_3008_0047)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseRateDelivered_3008_0048",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseRateDelivered_3008_0048)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentSummaryCalculatedDoseReferenceSequence_3008_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentSummaryCalculatedDoseReferenceSequence_3008_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_CumulativeDoseToDoseReference_3008_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::CumulativeDoseToDoseReference_3008_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_FirstTreatmentDate_3008_0054",SWIG_From_int(static_cast< int >(imebra::tagId_t::FirstTreatmentDate_3008_0054)));
  SWIG_Python_SetConstant(d, "tagId_t_MostRecentTreatmentDate_3008_0056",SWIG_From_int(static_cast< int >(imebra::tagId_t::MostRecentTreatmentDate_3008_0056)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFractionsDelivered_3008_005A",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFractionsDelivered_3008_005A)));
  SWIG_Python_SetConstant(d, "tagId_t_OverrideSequence_3008_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverrideSequence_3008_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_ParameterSequencePointer_3008_0061",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParameterSequencePointer_3008_0061)));
  SWIG_Python_SetConstant(d, "tagId_t_OverrideParameterPointer_3008_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverrideParameterPointer_3008_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_ParameterItemIndex_3008_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParameterItemIndex_3008_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_MeasuredDoseReferenceNumber_3008_0064",SWIG_From_int(static_cast< int >(imebra::tagId_t::MeasuredDoseReferenceNumber_3008_0064)));
  SWIG_Python_SetConstant(d, "tagId_t_ParameterPointer_3008_0065",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParameterPointer_3008_0065)));
  SWIG_Python_SetConstant(d, "tagId_t_OverrideReason_3008_0066",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverrideReason_3008_0066)));
  SWIG_Python_SetConstant(d, "tagId_t_ParameterValueNumber_3008_0067",SWIG_From_int(static_cast< int >(imebra::tagId_t::ParameterValueNumber_3008_0067)));
  SWIG_Python_SetConstant(d, "tagId_t_CorrectedParameterSequence_3008_0068",SWIG_From_int(static_cast< int >(imebra::tagId_t::CorrectedParameterSequence_3008_0068)));
  SWIG_Python_SetConstant(d, "tagId_t_CorrectionValue_3008_006A",SWIG_From_int(static_cast< int >(imebra::tagId_t::CorrectionValue_3008_006A)));
  SWIG_Python_SetConstant(d, "tagId_t_CalculatedDoseReferenceSequence_3008_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalculatedDoseReferenceSequence_3008_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_CalculatedDoseReferenceNumber_3008_0072",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalculatedDoseReferenceNumber_3008_0072)));
  SWIG_Python_SetConstant(d, "tagId_t_CalculatedDoseReferenceDescription_3008_0074",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalculatedDoseReferenceDescription_3008_0074)));
  SWIG_Python_SetConstant(d, "tagId_t_CalculatedDoseReferenceDoseValue_3008_0076",SWIG_From_int(static_cast< int >(imebra::tagId_t::CalculatedDoseReferenceDoseValue_3008_0076)));
  SWIG_Python_SetConstant(d, "tagId_t_StartMeterset_3008_0078",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartMeterset_3008_0078)));
  SWIG_Python_SetConstant(d, "tagId_t_EndMeterset_3008_007A",SWIG_From_int(static_cast< int >(imebra::tagId_t::EndMeterset_3008_007A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedMeasuredDoseReferenceSequence_3008_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedMeasuredDoseReferenceSequence_3008_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedMeasuredDoseReferenceNumber_3008_0082",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedMeasuredDoseReferenceNumber_3008_0082)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedCalculatedDoseReferenceSequence_3008_0090",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedCalculatedDoseReferenceSequence_3008_0090)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedCalculatedDoseReferenceNumber_3008_0092",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedCalculatedDoseReferenceNumber_3008_0092)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamLimitingDeviceLeafPairsSequence_3008_00A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamLimitingDeviceLeafPairsSequence_3008_00A0)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedWedgeSequence_3008_00B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedWedgeSequence_3008_00B0)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedCompensatorSequence_3008_00C0",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedCompensatorSequence_3008_00C0)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedBlockSequence_3008_00D0",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedBlockSequence_3008_00D0)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentSummaryMeasuredDoseReferenceSequence_3008_00E0",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentSummaryMeasuredDoseReferenceSequence_3008_00E0)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedSnoutSequence_3008_00F0",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedSnoutSequence_3008_00F0)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedRangeShifterSequence_3008_00F2",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedRangeShifterSequence_3008_00F2)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedLateralSpreadingDeviceSequence_3008_00F4",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedLateralSpreadingDeviceSequence_3008_00F4)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedRangeModulatorSequence_3008_00F6",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedRangeModulatorSequence_3008_00F6)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedSourceSequence_3008_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedSourceSequence_3008_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceSerialNumber_3008_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceSerialNumber_3008_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentSessionApplicationSetupSequence_3008_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentSessionApplicationSetupSequence_3008_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicationSetupCheck_3008_0116",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicationSetupCheck_3008_0116)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedBrachyAccessoryDeviceSequence_3008_0120",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedBrachyAccessoryDeviceSequence_3008_0120)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedBrachyAccessoryDeviceNumber_3008_0122",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedBrachyAccessoryDeviceNumber_3008_0122)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedChannelSequence_3008_0130",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedChannelSequence_3008_0130)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecifiedChannelTotalTime_3008_0132",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecifiedChannelTotalTime_3008_0132)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredChannelTotalTime_3008_0134",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredChannelTotalTime_3008_0134)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecifiedNumberOfPulses_3008_0136",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecifiedNumberOfPulses_3008_0136)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredNumberOfPulses_3008_0138",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredNumberOfPulses_3008_0138)));
  SWIG_Python_SetConstant(d, "tagId_t_SpecifiedPulseRepetitionInterval_3008_013A",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpecifiedPulseRepetitionInterval_3008_013A)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredPulseRepetitionInterval_3008_013C",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredPulseRepetitionInterval_3008_013C)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedSourceApplicatorSequence_3008_0140",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedSourceApplicatorSequence_3008_0140)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSourceApplicatorNumber_3008_0142",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSourceApplicatorNumber_3008_0142)));
  SWIG_Python_SetConstant(d, "tagId_t_RecordedChannelShieldSequence_3008_0150",SWIG_From_int(static_cast< int >(imebra::tagId_t::RecordedChannelShieldSequence_3008_0150)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedChannelShieldNumber_3008_0152",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedChannelShieldNumber_3008_0152)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyControlPointDeliveredSequence_3008_0160",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyControlPointDeliveredSequence_3008_0160)));
  SWIG_Python_SetConstant(d, "tagId_t_SafePositionExitDate_3008_0162",SWIG_From_int(static_cast< int >(imebra::tagId_t::SafePositionExitDate_3008_0162)));
  SWIG_Python_SetConstant(d, "tagId_t_SafePositionExitTime_3008_0164",SWIG_From_int(static_cast< int >(imebra::tagId_t::SafePositionExitTime_3008_0164)));
  SWIG_Python_SetConstant(d, "tagId_t_SafePositionReturnDate_3008_0166",SWIG_From_int(static_cast< int >(imebra::tagId_t::SafePositionReturnDate_3008_0166)));
  SWIG_Python_SetConstant(d, "tagId_t_SafePositionReturnTime_3008_0168",SWIG_From_int(static_cast< int >(imebra::tagId_t::SafePositionReturnTime_3008_0168)));
  SWIG_Python_SetConstant(d, "tagId_t_PulseSpecificBrachyControlPointDeliveredSequence_3008_0171",SWIG_From_int(static_cast< int >(imebra::tagId_t::PulseSpecificBrachyControlPointDeliveredSequence_3008_0171)));
  SWIG_Python_SetConstant(d, "tagId_t_PulseNumber_3008_0172",SWIG_From_int(static_cast< int >(imebra::tagId_t::PulseNumber_3008_0172)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyPulseControlPointDeliveredSequence_3008_0173",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyPulseControlPointDeliveredSequence_3008_0173)));
  SWIG_Python_SetConstant(d, "tagId_t_CurrentTreatmentStatus_3008_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurrentTreatmentStatus_3008_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentStatusComment_3008_0202",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentStatusComment_3008_0202)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionGroupSummarySequence_3008_0220",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionGroupSummarySequence_3008_0220)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFractionNumber_3008_0223",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFractionNumber_3008_0223)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionGroupType_3008_0224",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionGroupType_3008_0224)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamStopperPosition_3008_0230",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamStopperPosition_3008_0230)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionStatusSummarySequence_3008_0240",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionStatusSummarySequence_3008_0240)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentDate_3008_0250",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentDate_3008_0250)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentTime_3008_0251",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentTime_3008_0251)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPlanLabel_300A_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPlanLabel_300A_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPlanName_300A_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPlanName_300A_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPlanDescription_300A_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPlanDescription_300A_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPlanDate_300A_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPlanDate_300A_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPlanTime_300A_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPlanTime_300A_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentProtocols_300A_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentProtocols_300A_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanIntent_300A_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanIntent_300A_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentSites_300A_000B",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentSites_300A_000B)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPlanGeometry_300A_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPlanGeometry_300A_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_PrescriptionDescription_300A_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrescriptionDescription_300A_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseReferenceSequence_300A_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseReferenceSequence_300A_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseReferenceNumber_300A_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseReferenceNumber_300A_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseReferenceUID_300A_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseReferenceUID_300A_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseReferenceStructureType_300A_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseReferenceStructureType_300A_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalBeamEnergyUnit_300A_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalBeamEnergyUnit_300A_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseReferenceDescription_300A_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseReferenceDescription_300A_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseReferencePointCoordinates_300A_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseReferencePointCoordinates_300A_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalPriorDose_300A_001A",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalPriorDose_300A_001A)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseReferenceType_300A_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseReferenceType_300A_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_ConstraintWeight_300A_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConstraintWeight_300A_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveryWarningDose_300A_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveryWarningDose_300A_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveryMaximumDose_300A_0023",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveryMaximumDose_300A_0023)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetMinimumDose_300A_0025",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetMinimumDose_300A_0025)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetPrescriptionDose_300A_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetPrescriptionDose_300A_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetMaximumDose_300A_0027",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetMaximumDose_300A_0027)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetUnderdoseVolumeFraction_300A_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetUnderdoseVolumeFraction_300A_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_OrganAtRiskFullVolumeDose_300A_002A",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrganAtRiskFullVolumeDose_300A_002A)));
  SWIG_Python_SetConstant(d, "tagId_t_OrganAtRiskLimitDose_300A_002B",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrganAtRiskLimitDose_300A_002B)));
  SWIG_Python_SetConstant(d, "tagId_t_OrganAtRiskMaximumDose_300A_002C",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrganAtRiskMaximumDose_300A_002C)));
  SWIG_Python_SetConstant(d, "tagId_t_OrganAtRiskOverdoseVolumeFraction_300A_002D",SWIG_From_int(static_cast< int >(imebra::tagId_t::OrganAtRiskOverdoseVolumeFraction_300A_002D)));
  SWIG_Python_SetConstant(d, "tagId_t_ToleranceTableSequence_300A_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ToleranceTableSequence_300A_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_ToleranceTableNumber_300A_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::ToleranceTableNumber_300A_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_ToleranceTableLabel_300A_0043",SWIG_From_int(static_cast< int >(imebra::tagId_t::ToleranceTableLabel_300A_0043)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryAngleTolerance_300A_0044",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryAngleTolerance_300A_0044)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamLimitingDeviceAngleTolerance_300A_0046",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamLimitingDeviceAngleTolerance_300A_0046)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamLimitingDeviceToleranceSequence_300A_0048",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamLimitingDeviceToleranceSequence_300A_0048)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamLimitingDevicePositionTolerance_300A_004A",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamLimitingDevicePositionTolerance_300A_004A)));
  SWIG_Python_SetConstant(d, "tagId_t_SnoutPositionTolerance_300A_004B",SWIG_From_int(static_cast< int >(imebra::tagId_t::SnoutPositionTolerance_300A_004B)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSupportAngleTolerance_300A_004C",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSupportAngleTolerance_300A_004C)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopEccentricAngleTolerance_300A_004E",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopEccentricAngleTolerance_300A_004E)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopPitchAngleTolerance_300A_004F",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopPitchAngleTolerance_300A_004F)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopRollAngleTolerance_300A_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopRollAngleTolerance_300A_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopVerticalPositionTolerance_300A_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopVerticalPositionTolerance_300A_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopLongitudinalPositionTolerance_300A_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopLongitudinalPositionTolerance_300A_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopLateralPositionTolerance_300A_0053",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopLateralPositionTolerance_300A_0053)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPlanRelationship_300A_0055",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPlanRelationship_300A_0055)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionGroupSequence_300A_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionGroupSequence_300A_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionGroupNumber_300A_0071",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionGroupNumber_300A_0071)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionGroupDescription_300A_0072",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionGroupDescription_300A_0072)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFractionsPlanned_300A_0078",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFractionsPlanned_300A_0078)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFractionPatternDigitsPerDay_300A_0079",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFractionPatternDigitsPerDay_300A_0079)));
  SWIG_Python_SetConstant(d, "tagId_t_RepeatFractionCycleLength_300A_007A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RepeatFractionCycleLength_300A_007A)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionPattern_300A_007B",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionPattern_300A_007B)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfBeams_300A_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfBeams_300A_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDoseSpecificationPoint_300A_0082",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDoseSpecificationPoint_300A_0082)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedDoseReferenceUID_300A_0083",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedDoseReferenceUID_300A_0083)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDose_300A_0084",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDose_300A_0084)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamMeterset_300A_0086",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamMeterset_300A_0086)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDosePointDepth_300A_0088",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDosePointDepth_300A_0088)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDosePointEquivalentDepth_300A_0089",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDosePointEquivalentDepth_300A_0089)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDosePointSSD_300A_008A",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDosePointSSD_300A_008A)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDoseMeaning_300A_008B",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDoseMeaning_300A_008B)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDoseVerificationControlPointSequence_300A_008C",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDoseVerificationControlPointSequence_300A_008C)));
  SWIG_Python_SetConstant(d, "tagId_t_AverageBeamDosePointDepth_300A_008D",SWIG_From_int(static_cast< int >(imebra::tagId_t::AverageBeamDosePointDepth_300A_008D)));
  SWIG_Python_SetConstant(d, "tagId_t_AverageBeamDosePointEquivalentDepth_300A_008E",SWIG_From_int(static_cast< int >(imebra::tagId_t::AverageBeamDosePointEquivalentDepth_300A_008E)));
  SWIG_Python_SetConstant(d, "tagId_t_AverageBeamDosePointSSD_300A_008F",SWIG_From_int(static_cast< int >(imebra::tagId_t::AverageBeamDosePointSSD_300A_008F)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDoseType_300A_0090",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDoseType_300A_0090)));
  SWIG_Python_SetConstant(d, "tagId_t_AlternateBeamDose_300A_0091",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlternateBeamDose_300A_0091)));
  SWIG_Python_SetConstant(d, "tagId_t_AlternateBeamDoseType_300A_0092",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlternateBeamDoseType_300A_0092)));
  SWIG_Python_SetConstant(d, "tagId_t_DepthValueAveragingFlag_300A_0093",SWIG_From_int(static_cast< int >(imebra::tagId_t::DepthValueAveragingFlag_300A_0093)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDosePointSourceToExternalContourDistance_300A_0094",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDosePointSourceToExternalContourDistance_300A_0094)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfBrachyApplicationSetups_300A_00A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfBrachyApplicationSetups_300A_00A0)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyApplicationSetupDoseSpecificationPoint_300A_00A2",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyApplicationSetupDoseSpecificationPoint_300A_00A2)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyApplicationSetupDose_300A_00A4",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyApplicationSetupDose_300A_00A4)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamSequence_300A_00B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamSequence_300A_00B0)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentMachineName_300A_00B2",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentMachineName_300A_00B2)));
  SWIG_Python_SetConstant(d, "tagId_t_PrimaryDosimeterUnit_300A_00B3",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrimaryDosimeterUnit_300A_00B3)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceAxisDistance_300A_00B4",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceAxisDistance_300A_00B4)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamLimitingDeviceSequence_300A_00B6",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamLimitingDeviceSequence_300A_00B6)));
  SWIG_Python_SetConstant(d, "tagId_t_RTBeamLimitingDeviceType_300A_00B8",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTBeamLimitingDeviceType_300A_00B8)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceToBeamLimitingDeviceDistance_300A_00BA",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceToBeamLimitingDeviceDistance_300A_00BA)));
  SWIG_Python_SetConstant(d, "tagId_t_IsocenterToBeamLimitingDeviceDistance_300A_00BB",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsocenterToBeamLimitingDeviceDistance_300A_00BB)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfLeafJawPairs_300A_00BC",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfLeafJawPairs_300A_00BC)));
  SWIG_Python_SetConstant(d, "tagId_t_LeafPositionBoundaries_300A_00BE",SWIG_From_int(static_cast< int >(imebra::tagId_t::LeafPositionBoundaries_300A_00BE)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamNumber_300A_00C0",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamNumber_300A_00C0)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamName_300A_00C2",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamName_300A_00C2)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDescription_300A_00C3",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDescription_300A_00C3)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamType_300A_00C4",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamType_300A_00C4)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamDeliveryDurationLimit_300A_00C5",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamDeliveryDurationLimit_300A_00C5)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiationType_300A_00C6",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiationType_300A_00C6)));
  SWIG_Python_SetConstant(d, "tagId_t_HighDoseTechniqueType_300A_00C7",SWIG_From_int(static_cast< int >(imebra::tagId_t::HighDoseTechniqueType_300A_00C7)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferenceImageNumber_300A_00C8",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferenceImageNumber_300A_00C8)));
  SWIG_Python_SetConstant(d, "tagId_t_PlannedVerificationImageSequence_300A_00CA",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlannedVerificationImageSequence_300A_00CA)));
  SWIG_Python_SetConstant(d, "tagId_t_ImagingDeviceSpecificAcquisitionParameters_300A_00CC",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImagingDeviceSpecificAcquisitionParameters_300A_00CC)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentDeliveryType_300A_00CE",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentDeliveryType_300A_00CE)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfWedges_300A_00D0",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfWedges_300A_00D0)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeSequence_300A_00D1",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeSequence_300A_00D1)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeNumber_300A_00D2",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeNumber_300A_00D2)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeType_300A_00D3",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeType_300A_00D3)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeID_300A_00D4",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeID_300A_00D4)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeAngle_300A_00D5",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeAngle_300A_00D5)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeFactor_300A_00D6",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeFactor_300A_00D6)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalWedgeTrayWaterEquivalentThickness_300A_00D7",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalWedgeTrayWaterEquivalentThickness_300A_00D7)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeOrientation_300A_00D8",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeOrientation_300A_00D8)));
  SWIG_Python_SetConstant(d, "tagId_t_IsocenterToWedgeTrayDistance_300A_00D9",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsocenterToWedgeTrayDistance_300A_00D9)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceToWedgeTrayDistance_300A_00DA",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceToWedgeTrayDistance_300A_00DA)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgeThinEdgePosition_300A_00DB",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgeThinEdgePosition_300A_00DB)));
  SWIG_Python_SetConstant(d, "tagId_t_BolusID_300A_00DC",SWIG_From_int(static_cast< int >(imebra::tagId_t::BolusID_300A_00DC)));
  SWIG_Python_SetConstant(d, "tagId_t_BolusDescription_300A_00DD",SWIG_From_int(static_cast< int >(imebra::tagId_t::BolusDescription_300A_00DD)));
  SWIG_Python_SetConstant(d, "tagId_t_EffectiveWedgeAngle_300A_00DE",SWIG_From_int(static_cast< int >(imebra::tagId_t::EffectiveWedgeAngle_300A_00DE)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfCompensators_300A_00E0",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfCompensators_300A_00E0)));
  SWIG_Python_SetConstant(d, "tagId_t_MaterialID_300A_00E1",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaterialID_300A_00E1)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalCompensatorTrayFactor_300A_00E2",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalCompensatorTrayFactor_300A_00E2)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorSequence_300A_00E3",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorSequence_300A_00E3)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorNumber_300A_00E4",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorNumber_300A_00E4)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorID_300A_00E5",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorID_300A_00E5)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceToCompensatorTrayDistance_300A_00E6",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceToCompensatorTrayDistance_300A_00E6)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorRows_300A_00E7",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorRows_300A_00E7)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorColumns_300A_00E8",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorColumns_300A_00E8)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorPixelSpacing_300A_00E9",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorPixelSpacing_300A_00E9)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorPosition_300A_00EA",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorPosition_300A_00EA)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorTransmissionData_300A_00EB",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorTransmissionData_300A_00EB)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorThicknessData_300A_00EC",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorThicknessData_300A_00EC)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfBoli_300A_00ED",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfBoli_300A_00ED)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorType_300A_00EE",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorType_300A_00EE)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorTrayID_300A_00EF",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorTrayID_300A_00EF)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfBlocks_300A_00F0",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfBlocks_300A_00F0)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalBlockTrayFactor_300A_00F2",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalBlockTrayFactor_300A_00F2)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalBlockTrayWaterEquivalentThickness_300A_00F3",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalBlockTrayWaterEquivalentThickness_300A_00F3)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockSequence_300A_00F4",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockSequence_300A_00F4)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockTrayID_300A_00F5",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockTrayID_300A_00F5)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceToBlockTrayDistance_300A_00F6",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceToBlockTrayDistance_300A_00F6)));
  SWIG_Python_SetConstant(d, "tagId_t_IsocenterToBlockTrayDistance_300A_00F7",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsocenterToBlockTrayDistance_300A_00F7)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockType_300A_00F8",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockType_300A_00F8)));
  SWIG_Python_SetConstant(d, "tagId_t_AccessoryCode_300A_00F9",SWIG_From_int(static_cast< int >(imebra::tagId_t::AccessoryCode_300A_00F9)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockDivergence_300A_00FA",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockDivergence_300A_00FA)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockMountingPosition_300A_00FB",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockMountingPosition_300A_00FB)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockNumber_300A_00FC",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockNumber_300A_00FC)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockName_300A_00FE",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockName_300A_00FE)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockThickness_300A_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockThickness_300A_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockTransmission_300A_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockTransmission_300A_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockNumberOfPoints_300A_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockNumberOfPoints_300A_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockData_300A_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockData_300A_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicatorSequence_300A_0107",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicatorSequence_300A_0107)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicatorID_300A_0108",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicatorID_300A_0108)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicatorType_300A_0109",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicatorType_300A_0109)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicatorDescription_300A_010A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicatorDescription_300A_010A)));
  SWIG_Python_SetConstant(d, "tagId_t_CumulativeDoseReferenceCoefficient_300A_010C",SWIG_From_int(static_cast< int >(imebra::tagId_t::CumulativeDoseReferenceCoefficient_300A_010C)));
  SWIG_Python_SetConstant(d, "tagId_t_FinalCumulativeMetersetWeight_300A_010E",SWIG_From_int(static_cast< int >(imebra::tagId_t::FinalCumulativeMetersetWeight_300A_010E)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfControlPoints_300A_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfControlPoints_300A_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_ControlPointSequence_300A_0111",SWIG_From_int(static_cast< int >(imebra::tagId_t::ControlPointSequence_300A_0111)));
  SWIG_Python_SetConstant(d, "tagId_t_ControlPointIndex_300A_0112",SWIG_From_int(static_cast< int >(imebra::tagId_t::ControlPointIndex_300A_0112)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalBeamEnergy_300A_0114",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalBeamEnergy_300A_0114)));
  SWIG_Python_SetConstant(d, "tagId_t_DoseRateSet_300A_0115",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoseRateSet_300A_0115)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgePositionSequence_300A_0116",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgePositionSequence_300A_0116)));
  SWIG_Python_SetConstant(d, "tagId_t_WedgePosition_300A_0118",SWIG_From_int(static_cast< int >(imebra::tagId_t::WedgePosition_300A_0118)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamLimitingDevicePositionSequence_300A_011A",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamLimitingDevicePositionSequence_300A_011A)));
  SWIG_Python_SetConstant(d, "tagId_t_LeafJawPositions_300A_011C",SWIG_From_int(static_cast< int >(imebra::tagId_t::LeafJawPositions_300A_011C)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryAngle_300A_011E",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryAngle_300A_011E)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryRotationDirection_300A_011F",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryRotationDirection_300A_011F)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamLimitingDeviceAngle_300A_0120",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamLimitingDeviceAngle_300A_0120)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamLimitingDeviceRotationDirection_300A_0121",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamLimitingDeviceRotationDirection_300A_0121)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSupportAngle_300A_0122",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSupportAngle_300A_0122)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSupportRotationDirection_300A_0123",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSupportRotationDirection_300A_0123)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopEccentricAxisDistance_300A_0124",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopEccentricAxisDistance_300A_0124)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopEccentricAngle_300A_0125",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopEccentricAngle_300A_0125)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopEccentricRotationDirection_300A_0126",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopEccentricRotationDirection_300A_0126)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopVerticalPosition_300A_0128",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopVerticalPosition_300A_0128)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopLongitudinalPosition_300A_0129",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopLongitudinalPosition_300A_0129)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopLateralPosition_300A_012A",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopLateralPosition_300A_012A)));
  SWIG_Python_SetConstant(d, "tagId_t_IsocenterPosition_300A_012C",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsocenterPosition_300A_012C)));
  SWIG_Python_SetConstant(d, "tagId_t_SurfaceEntryPoint_300A_012E",SWIG_From_int(static_cast< int >(imebra::tagId_t::SurfaceEntryPoint_300A_012E)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceToSurfaceDistance_300A_0130",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceToSurfaceDistance_300A_0130)));
  SWIG_Python_SetConstant(d, "tagId_t_AverageBeamDosePointSourceToExternalContourDistance_300A_0131",SWIG_From_int(static_cast< int >(imebra::tagId_t::AverageBeamDosePointSourceToExternalContourDistance_300A_0131)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceToExternalContourDistance_300A_0132",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceToExternalContourDistance_300A_0132)));
  SWIG_Python_SetConstant(d, "tagId_t_ExternalContourEntryPoint_300A_0133",SWIG_From_int(static_cast< int >(imebra::tagId_t::ExternalContourEntryPoint_300A_0133)));
  SWIG_Python_SetConstant(d, "tagId_t_CumulativeMetersetWeight_300A_0134",SWIG_From_int(static_cast< int >(imebra::tagId_t::CumulativeMetersetWeight_300A_0134)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopPitchAngle_300A_0140",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopPitchAngle_300A_0140)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopPitchRotationDirection_300A_0142",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopPitchRotationDirection_300A_0142)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopRollAngle_300A_0144",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopRollAngle_300A_0144)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopRollRotationDirection_300A_0146",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopRollRotationDirection_300A_0146)));
  SWIG_Python_SetConstant(d, "tagId_t_HeadFixationAngle_300A_0148",SWIG_From_int(static_cast< int >(imebra::tagId_t::HeadFixationAngle_300A_0148)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryPitchAngle_300A_014A",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryPitchAngle_300A_014A)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryPitchRotationDirection_300A_014C",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryPitchRotationDirection_300A_014C)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryPitchAngleTolerance_300A_014E",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryPitchAngleTolerance_300A_014E)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationEye_300A_0150",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationEye_300A_0150)));
  SWIG_Python_SetConstant(d, "tagId_t_ChairHeadFramePosition_300A_0151",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChairHeadFramePosition_300A_0151)));
  SWIG_Python_SetConstant(d, "tagId_t_HeadFixationAngleTolerance_300A_0152",SWIG_From_int(static_cast< int >(imebra::tagId_t::HeadFixationAngleTolerance_300A_0152)));
  SWIG_Python_SetConstant(d, "tagId_t_ChairHeadFramePositionTolerance_300A_0153",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChairHeadFramePositionTolerance_300A_0153)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationLightAzimuthalAngleTolerance_300A_0154",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationLightAzimuthalAngleTolerance_300A_0154)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationLightPolarAngleTolerance_300A_0155",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationLightPolarAngleTolerance_300A_0155)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSetupSequence_300A_0180",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSetupSequence_300A_0180)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSetupNumber_300A_0182",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSetupNumber_300A_0182)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSetupLabel_300A_0183",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSetupLabel_300A_0183)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientAdditionalPosition_300A_0184",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientAdditionalPosition_300A_0184)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationDeviceSequence_300A_0190",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationDeviceSequence_300A_0190)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationDeviceType_300A_0192",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationDeviceType_300A_0192)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationDeviceLabel_300A_0194",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationDeviceLabel_300A_0194)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationDeviceDescription_300A_0196",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationDeviceDescription_300A_0196)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationDevicePosition_300A_0198",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationDevicePosition_300A_0198)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationDevicePitchAngle_300A_0199",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationDevicePitchAngle_300A_0199)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationDeviceRollAngle_300A_019A",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationDeviceRollAngle_300A_019A)));
  SWIG_Python_SetConstant(d, "tagId_t_ShieldingDeviceSequence_300A_01A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShieldingDeviceSequence_300A_01A0)));
  SWIG_Python_SetConstant(d, "tagId_t_ShieldingDeviceType_300A_01A2",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShieldingDeviceType_300A_01A2)));
  SWIG_Python_SetConstant(d, "tagId_t_ShieldingDeviceLabel_300A_01A4",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShieldingDeviceLabel_300A_01A4)));
  SWIG_Python_SetConstant(d, "tagId_t_ShieldingDeviceDescription_300A_01A6",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShieldingDeviceDescription_300A_01A6)));
  SWIG_Python_SetConstant(d, "tagId_t_ShieldingDevicePosition_300A_01A8",SWIG_From_int(static_cast< int >(imebra::tagId_t::ShieldingDevicePosition_300A_01A8)));
  SWIG_Python_SetConstant(d, "tagId_t_SetupTechnique_300A_01B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::SetupTechnique_300A_01B0)));
  SWIG_Python_SetConstant(d, "tagId_t_SetupTechniqueDescription_300A_01B2",SWIG_From_int(static_cast< int >(imebra::tagId_t::SetupTechniqueDescription_300A_01B2)));
  SWIG_Python_SetConstant(d, "tagId_t_SetupDeviceSequence_300A_01B4",SWIG_From_int(static_cast< int >(imebra::tagId_t::SetupDeviceSequence_300A_01B4)));
  SWIG_Python_SetConstant(d, "tagId_t_SetupDeviceType_300A_01B6",SWIG_From_int(static_cast< int >(imebra::tagId_t::SetupDeviceType_300A_01B6)));
  SWIG_Python_SetConstant(d, "tagId_t_SetupDeviceLabel_300A_01B8",SWIG_From_int(static_cast< int >(imebra::tagId_t::SetupDeviceLabel_300A_01B8)));
  SWIG_Python_SetConstant(d, "tagId_t_SetupDeviceDescription_300A_01BA",SWIG_From_int(static_cast< int >(imebra::tagId_t::SetupDeviceDescription_300A_01BA)));
  SWIG_Python_SetConstant(d, "tagId_t_SetupDeviceParameter_300A_01BC",SWIG_From_int(static_cast< int >(imebra::tagId_t::SetupDeviceParameter_300A_01BC)));
  SWIG_Python_SetConstant(d, "tagId_t_SetupReferenceDescription_300A_01D0",SWIG_From_int(static_cast< int >(imebra::tagId_t::SetupReferenceDescription_300A_01D0)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopVerticalSetupDisplacement_300A_01D2",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopVerticalSetupDisplacement_300A_01D2)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopLongitudinalSetupDisplacement_300A_01D4",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopLongitudinalSetupDisplacement_300A_01D4)));
  SWIG_Python_SetConstant(d, "tagId_t_TableTopLateralSetupDisplacement_300A_01D6",SWIG_From_int(static_cast< int >(imebra::tagId_t::TableTopLateralSetupDisplacement_300A_01D6)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyTreatmentTechnique_300A_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyTreatmentTechnique_300A_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyTreatmentType_300A_0202",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyTreatmentType_300A_0202)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentMachineSequence_300A_0206",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentMachineSequence_300A_0206)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceSequence_300A_0210",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceSequence_300A_0210)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceNumber_300A_0212",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceNumber_300A_0212)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceType_300A_0214",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceType_300A_0214)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceManufacturer_300A_0216",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceManufacturer_300A_0216)));
  SWIG_Python_SetConstant(d, "tagId_t_ActiveSourceDiameter_300A_0218",SWIG_From_int(static_cast< int >(imebra::tagId_t::ActiveSourceDiameter_300A_0218)));
  SWIG_Python_SetConstant(d, "tagId_t_ActiveSourceLength_300A_021A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ActiveSourceLength_300A_021A)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceModelID_300A_021B",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceModelID_300A_021B)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceDescription_300A_021C",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceDescription_300A_021C)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceEncapsulationNominalThickness_300A_0222",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceEncapsulationNominalThickness_300A_0222)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceEncapsulationNominalTransmission_300A_0224",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceEncapsulationNominalTransmission_300A_0224)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceIsotopeName_300A_0226",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceIsotopeName_300A_0226)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceIsotopeHalfLife_300A_0228",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceIsotopeHalfLife_300A_0228)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceStrengthUnits_300A_0229",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceStrengthUnits_300A_0229)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferenceAirKermaRate_300A_022A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferenceAirKermaRate_300A_022A)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceStrength_300A_022B",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceStrength_300A_022B)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceStrengthReferenceDate_300A_022C",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceStrengthReferenceDate_300A_022C)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceStrengthReferenceTime_300A_022E",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceStrengthReferenceTime_300A_022E)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicationSetupSequence_300A_0230",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicationSetupSequence_300A_0230)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicationSetupType_300A_0232",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicationSetupType_300A_0232)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicationSetupNumber_300A_0234",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicationSetupNumber_300A_0234)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicationSetupName_300A_0236",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicationSetupName_300A_0236)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicationSetupManufacturer_300A_0238",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicationSetupManufacturer_300A_0238)));
  SWIG_Python_SetConstant(d, "tagId_t_TemplateNumber_300A_0240",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemplateNumber_300A_0240)));
  SWIG_Python_SetConstant(d, "tagId_t_TemplateType_300A_0242",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemplateType_300A_0242)));
  SWIG_Python_SetConstant(d, "tagId_t_TemplateName_300A_0244",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemplateName_300A_0244)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalReferenceAirKerma_300A_0250",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalReferenceAirKerma_300A_0250)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyAccessoryDeviceSequence_300A_0260",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyAccessoryDeviceSequence_300A_0260)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyAccessoryDeviceNumber_300A_0262",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyAccessoryDeviceNumber_300A_0262)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyAccessoryDeviceID_300A_0263",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyAccessoryDeviceID_300A_0263)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyAccessoryDeviceType_300A_0264",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyAccessoryDeviceType_300A_0264)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyAccessoryDeviceName_300A_0266",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyAccessoryDeviceName_300A_0266)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyAccessoryDeviceNominalThickness_300A_026A",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyAccessoryDeviceNominalThickness_300A_026A)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyAccessoryDeviceNominalTransmission_300A_026C",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyAccessoryDeviceNominalTransmission_300A_026C)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelEffectiveLength_300A_0271",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelEffectiveLength_300A_0271)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelInnerLength_300A_0272",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelInnerLength_300A_0272)));
  SWIG_Python_SetConstant(d, "tagId_t_AfterloaderChannelID_300A_0273",SWIG_From_int(static_cast< int >(imebra::tagId_t::AfterloaderChannelID_300A_0273)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicatorTipLength_300A_0274",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicatorTipLength_300A_0274)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelSequence_300A_0280",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelSequence_300A_0280)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelNumber_300A_0282",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelNumber_300A_0282)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelLength_300A_0284",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelLength_300A_0284)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelTotalTime_300A_0286",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelTotalTime_300A_0286)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceMovementType_300A_0288",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceMovementType_300A_0288)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfPulses_300A_028A",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfPulses_300A_028A)));
  SWIG_Python_SetConstant(d, "tagId_t_PulseRepetitionInterval_300A_028C",SWIG_From_int(static_cast< int >(imebra::tagId_t::PulseRepetitionInterval_300A_028C)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicatorNumber_300A_0290",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicatorNumber_300A_0290)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicatorID_300A_0291",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicatorID_300A_0291)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicatorType_300A_0292",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicatorType_300A_0292)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicatorName_300A_0294",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicatorName_300A_0294)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicatorLength_300A_0296",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicatorLength_300A_0296)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicatorManufacturer_300A_0298",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicatorManufacturer_300A_0298)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicatorWallNominalThickness_300A_029C",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicatorWallNominalThickness_300A_029C)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicatorWallNominalTransmission_300A_029E",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicatorWallNominalTransmission_300A_029E)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceApplicatorStepSize_300A_02A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceApplicatorStepSize_300A_02A0)));
  SWIG_Python_SetConstant(d, "tagId_t_TransferTubeNumber_300A_02A2",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransferTubeNumber_300A_02A2)));
  SWIG_Python_SetConstant(d, "tagId_t_TransferTubeLength_300A_02A4",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransferTubeLength_300A_02A4)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelShieldSequence_300A_02B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelShieldSequence_300A_02B0)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelShieldNumber_300A_02B2",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelShieldNumber_300A_02B2)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelShieldID_300A_02B3",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelShieldID_300A_02B3)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelShieldName_300A_02B4",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelShieldName_300A_02B4)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelShieldNominalThickness_300A_02B8",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelShieldNominalThickness_300A_02B8)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelShieldNominalTransmission_300A_02BA",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelShieldNominalTransmission_300A_02BA)));
  SWIG_Python_SetConstant(d, "tagId_t_FinalCumulativeTimeWeight_300A_02C8",SWIG_From_int(static_cast< int >(imebra::tagId_t::FinalCumulativeTimeWeight_300A_02C8)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyControlPointSequence_300A_02D0",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyControlPointSequence_300A_02D0)));
  SWIG_Python_SetConstant(d, "tagId_t_ControlPointRelativePosition_300A_02D2",SWIG_From_int(static_cast< int >(imebra::tagId_t::ControlPointRelativePosition_300A_02D2)));
  SWIG_Python_SetConstant(d, "tagId_t_ControlPoint3DPosition_300A_02D4",SWIG_From_int(static_cast< int >(imebra::tagId_t::ControlPoint3DPosition_300A_02D4)));
  SWIG_Python_SetConstant(d, "tagId_t_CumulativeTimeWeight_300A_02D6",SWIG_From_int(static_cast< int >(imebra::tagId_t::CumulativeTimeWeight_300A_02D6)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorDivergence_300A_02E0",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorDivergence_300A_02E0)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorMountingPosition_300A_02E1",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorMountingPosition_300A_02E1)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceToCompensatorDistance_300A_02E2",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceToCompensatorDistance_300A_02E2)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalCompensatorTrayWaterEquivalentThickness_300A_02E3",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalCompensatorTrayWaterEquivalentThickness_300A_02E3)));
  SWIG_Python_SetConstant(d, "tagId_t_IsocenterToCompensatorTrayDistance_300A_02E4",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsocenterToCompensatorTrayDistance_300A_02E4)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorColumnOffset_300A_02E5",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorColumnOffset_300A_02E5)));
  SWIG_Python_SetConstant(d, "tagId_t_IsocenterToCompensatorDistances_300A_02E6",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsocenterToCompensatorDistances_300A_02E6)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorRelativeStoppingPowerRatio_300A_02E7",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorRelativeStoppingPowerRatio_300A_02E7)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorMillingToolDiameter_300A_02E8",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorMillingToolDiameter_300A_02E8)));
  SWIG_Python_SetConstant(d, "tagId_t_IonRangeCompensatorSequence_300A_02EA",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonRangeCompensatorSequence_300A_02EA)));
  SWIG_Python_SetConstant(d, "tagId_t_CompensatorDescription_300A_02EB",SWIG_From_int(static_cast< int >(imebra::tagId_t::CompensatorDescription_300A_02EB)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiationMassNumber_300A_0302",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiationMassNumber_300A_0302)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiationAtomicNumber_300A_0304",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiationAtomicNumber_300A_0304)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiationChargeState_300A_0306",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiationChargeState_300A_0306)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanMode_300A_0308",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanMode_300A_0308)));
  SWIG_Python_SetConstant(d, "tagId_t_ModulatedScanModeType_300A_0309",SWIG_From_int(static_cast< int >(imebra::tagId_t::ModulatedScanModeType_300A_0309)));
  SWIG_Python_SetConstant(d, "tagId_t_VirtualSourceAxisDistances_300A_030A",SWIG_From_int(static_cast< int >(imebra::tagId_t::VirtualSourceAxisDistances_300A_030A)));
  SWIG_Python_SetConstant(d, "tagId_t_SnoutSequence_300A_030C",SWIG_From_int(static_cast< int >(imebra::tagId_t::SnoutSequence_300A_030C)));
  SWIG_Python_SetConstant(d, "tagId_t_SnoutPosition_300A_030D",SWIG_From_int(static_cast< int >(imebra::tagId_t::SnoutPosition_300A_030D)));
  SWIG_Python_SetConstant(d, "tagId_t_SnoutID_300A_030F",SWIG_From_int(static_cast< int >(imebra::tagId_t::SnoutID_300A_030F)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfRangeShifters_300A_0312",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfRangeShifters_300A_0312)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeShifterSequence_300A_0314",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeShifterSequence_300A_0314)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeShifterNumber_300A_0316",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeShifterNumber_300A_0316)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeShifterID_300A_0318",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeShifterID_300A_0318)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeShifterType_300A_0320",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeShifterType_300A_0320)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeShifterDescription_300A_0322",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeShifterDescription_300A_0322)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfLateralSpreadingDevices_300A_0330",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfLateralSpreadingDevices_300A_0330)));
  SWIG_Python_SetConstant(d, "tagId_t_LateralSpreadingDeviceSequence_300A_0332",SWIG_From_int(static_cast< int >(imebra::tagId_t::LateralSpreadingDeviceSequence_300A_0332)));
  SWIG_Python_SetConstant(d, "tagId_t_LateralSpreadingDeviceNumber_300A_0334",SWIG_From_int(static_cast< int >(imebra::tagId_t::LateralSpreadingDeviceNumber_300A_0334)));
  SWIG_Python_SetConstant(d, "tagId_t_LateralSpreadingDeviceID_300A_0336",SWIG_From_int(static_cast< int >(imebra::tagId_t::LateralSpreadingDeviceID_300A_0336)));
  SWIG_Python_SetConstant(d, "tagId_t_LateralSpreadingDeviceType_300A_0338",SWIG_From_int(static_cast< int >(imebra::tagId_t::LateralSpreadingDeviceType_300A_0338)));
  SWIG_Python_SetConstant(d, "tagId_t_LateralSpreadingDeviceDescription_300A_033A",SWIG_From_int(static_cast< int >(imebra::tagId_t::LateralSpreadingDeviceDescription_300A_033A)));
  SWIG_Python_SetConstant(d, "tagId_t_LateralSpreadingDeviceWaterEquivalentThickness_300A_033C",SWIG_From_int(static_cast< int >(imebra::tagId_t::LateralSpreadingDeviceWaterEquivalentThickness_300A_033C)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfRangeModulators_300A_0340",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfRangeModulators_300A_0340)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeModulatorSequence_300A_0342",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeModulatorSequence_300A_0342)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeModulatorNumber_300A_0344",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeModulatorNumber_300A_0344)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeModulatorID_300A_0346",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeModulatorID_300A_0346)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeModulatorType_300A_0348",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeModulatorType_300A_0348)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeModulatorDescription_300A_034A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeModulatorDescription_300A_034A)));
  SWIG_Python_SetConstant(d, "tagId_t_BeamCurrentModulationID_300A_034C",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeamCurrentModulationID_300A_034C)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSupportType_300A_0350",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSupportType_300A_0350)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSupportID_300A_0352",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSupportID_300A_0352)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientSupportAccessoryCode_300A_0354",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientSupportAccessoryCode_300A_0354)));
  SWIG_Python_SetConstant(d, "tagId_t_TrayAccessoryCode_300A_0355",SWIG_From_int(static_cast< int >(imebra::tagId_t::TrayAccessoryCode_300A_0355)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationLightAzimuthalAngle_300A_0356",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationLightAzimuthalAngle_300A_0356)));
  SWIG_Python_SetConstant(d, "tagId_t_FixationLightPolarAngle_300A_0358",SWIG_From_int(static_cast< int >(imebra::tagId_t::FixationLightPolarAngle_300A_0358)));
  SWIG_Python_SetConstant(d, "tagId_t_MetersetRate_300A_035A",SWIG_From_int(static_cast< int >(imebra::tagId_t::MetersetRate_300A_035A)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeShifterSettingsSequence_300A_0360",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeShifterSettingsSequence_300A_0360)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeShifterSetting_300A_0362",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeShifterSetting_300A_0362)));
  SWIG_Python_SetConstant(d, "tagId_t_IsocenterToRangeShifterDistance_300A_0364",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsocenterToRangeShifterDistance_300A_0364)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeShifterWaterEquivalentThickness_300A_0366",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeShifterWaterEquivalentThickness_300A_0366)));
  SWIG_Python_SetConstant(d, "tagId_t_LateralSpreadingDeviceSettingsSequence_300A_0370",SWIG_From_int(static_cast< int >(imebra::tagId_t::LateralSpreadingDeviceSettingsSequence_300A_0370)));
  SWIG_Python_SetConstant(d, "tagId_t_LateralSpreadingDeviceSetting_300A_0372",SWIG_From_int(static_cast< int >(imebra::tagId_t::LateralSpreadingDeviceSetting_300A_0372)));
  SWIG_Python_SetConstant(d, "tagId_t_IsocenterToLateralSpreadingDeviceDistance_300A_0374",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsocenterToLateralSpreadingDeviceDistance_300A_0374)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeModulatorSettingsSequence_300A_0380",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeModulatorSettingsSequence_300A_0380)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeModulatorGatingStartValue_300A_0382",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeModulatorGatingStartValue_300A_0382)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeModulatorGatingStopValue_300A_0384",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeModulatorGatingStopValue_300A_0384)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeModulatorGatingStartWaterEquivalentThickness_300A_0386",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeModulatorGatingStartWaterEquivalentThickness_300A_0386)));
  SWIG_Python_SetConstant(d, "tagId_t_RangeModulatorGatingStopWaterEquivalentThickness_300A_0388",SWIG_From_int(static_cast< int >(imebra::tagId_t::RangeModulatorGatingStopWaterEquivalentThickness_300A_0388)));
  SWIG_Python_SetConstant(d, "tagId_t_IsocenterToRangeModulatorDistance_300A_038A",SWIG_From_int(static_cast< int >(imebra::tagId_t::IsocenterToRangeModulatorDistance_300A_038A)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanSpotTimeOffset_300A_038F",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanSpotTimeOffset_300A_038F)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanSpotTuneID_300A_0390",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanSpotTuneID_300A_0390)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanSpotPrescribedIndices_300A_0391",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanSpotPrescribedIndices_300A_0391)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfScanSpotPositions_300A_0392",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfScanSpotPositions_300A_0392)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanSpotReordered_300A_0393",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanSpotReordered_300A_0393)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanSpotPositionMap_300A_0394",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanSpotPositionMap_300A_0394)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanSpotReorderingAllowed_300A_0395",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanSpotReorderingAllowed_300A_0395)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanSpotMetersetWeights_300A_0396",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanSpotMetersetWeights_300A_0396)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanningSpotSize_300A_0398",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanningSpotSize_300A_0398)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfPaintings_300A_039A",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfPaintings_300A_039A)));
  SWIG_Python_SetConstant(d, "tagId_t_IonToleranceTableSequence_300A_03A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonToleranceTableSequence_300A_03A0)));
  SWIG_Python_SetConstant(d, "tagId_t_IonBeamSequence_300A_03A2",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonBeamSequence_300A_03A2)));
  SWIG_Python_SetConstant(d, "tagId_t_IonBeamLimitingDeviceSequence_300A_03A4",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonBeamLimitingDeviceSequence_300A_03A4)));
  SWIG_Python_SetConstant(d, "tagId_t_IonBlockSequence_300A_03A6",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonBlockSequence_300A_03A6)));
  SWIG_Python_SetConstant(d, "tagId_t_IonControlPointSequence_300A_03A8",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonControlPointSequence_300A_03A8)));
  SWIG_Python_SetConstant(d, "tagId_t_IonWedgeSequence_300A_03AA",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonWedgeSequence_300A_03AA)));
  SWIG_Python_SetConstant(d, "tagId_t_IonWedgePositionSequence_300A_03AC",SWIG_From_int(static_cast< int >(imebra::tagId_t::IonWedgePositionSequence_300A_03AC)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSetupImageSequence_300A_0401",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSetupImageSequence_300A_0401)));
  SWIG_Python_SetConstant(d, "tagId_t_SetupImageComment_300A_0402",SWIG_From_int(static_cast< int >(imebra::tagId_t::SetupImageComment_300A_0402)));
  SWIG_Python_SetConstant(d, "tagId_t_MotionSynchronizationSequence_300A_0410",SWIG_From_int(static_cast< int >(imebra::tagId_t::MotionSynchronizationSequence_300A_0410)));
  SWIG_Python_SetConstant(d, "tagId_t_ControlPointOrientation_300A_0412",SWIG_From_int(static_cast< int >(imebra::tagId_t::ControlPointOrientation_300A_0412)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralAccessorySequence_300A_0420",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralAccessorySequence_300A_0420)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralAccessoryID_300A_0421",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralAccessoryID_300A_0421)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralAccessoryDescription_300A_0422",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralAccessoryDescription_300A_0422)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralAccessoryType_300A_0423",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralAccessoryType_300A_0423)));
  SWIG_Python_SetConstant(d, "tagId_t_GeneralAccessoryNumber_300A_0424",SWIG_From_int(static_cast< int >(imebra::tagId_t::GeneralAccessoryNumber_300A_0424)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceToGeneralAccessoryDistance_300A_0425",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceToGeneralAccessoryDistance_300A_0425)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicatorGeometrySequence_300A_0431",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicatorGeometrySequence_300A_0431)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicatorApertureShape_300A_0432",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicatorApertureShape_300A_0432)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicatorOpening_300A_0433",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicatorOpening_300A_0433)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicatorOpeningX_300A_0434",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicatorOpeningX_300A_0434)));
  SWIG_Python_SetConstant(d, "tagId_t_ApplicatorOpeningY_300A_0435",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApplicatorOpeningY_300A_0435)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceToApplicatorMountingPositionDistance_300A_0436",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceToApplicatorMountingPositionDistance_300A_0436)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfBlockSlabItems_300A_0440",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfBlockSlabItems_300A_0440)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockSlabSequence_300A_0441",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockSlabSequence_300A_0441)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockSlabThickness_300A_0442",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockSlabThickness_300A_0442)));
  SWIG_Python_SetConstant(d, "tagId_t_BlockSlabNumber_300A_0443",SWIG_From_int(static_cast< int >(imebra::tagId_t::BlockSlabNumber_300A_0443)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceMotionControlSequence_300A_0450",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceMotionControlSequence_300A_0450)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceMotionExecutionMode_300A_0451",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceMotionExecutionMode_300A_0451)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceMotionObservationMode_300A_0452",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceMotionObservationMode_300A_0452)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceMotionParameterCodeSequence_300A_0453",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceMotionParameterCodeSequence_300A_0453)));
  SWIG_Python_SetConstant(d, "tagId_t_DistalDepthFraction_300A_0501",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistalDepthFraction_300A_0501)));
  SWIG_Python_SetConstant(d, "tagId_t_DistalDepth_300A_0502",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistalDepth_300A_0502)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalRangeModulationFractions_300A_0503",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalRangeModulationFractions_300A_0503)));
  SWIG_Python_SetConstant(d, "tagId_t_NominalRangeModulatedRegionDepths_300A_0504",SWIG_From_int(static_cast< int >(imebra::tagId_t::NominalRangeModulatedRegionDepths_300A_0504)));
  SWIG_Python_SetConstant(d, "tagId_t_DepthDoseParametersSequence_300A_0505",SWIG_From_int(static_cast< int >(imebra::tagId_t::DepthDoseParametersSequence_300A_0505)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredDepthDoseParametersSequence_300A_0506",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredDepthDoseParametersSequence_300A_0506)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredDistalDepthFraction_300A_0507",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredDistalDepthFraction_300A_0507)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredDistalDepth_300A_0508",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredDistalDepth_300A_0508)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredNominalRangeModulationFractions_300A_0509",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredNominalRangeModulationFractions_300A_0509)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredNominalRangeModulatedRegionDepths_300A_0510",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredNominalRangeModulatedRegionDepths_300A_0510)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveredReferenceDoseDefinition_300A_0511",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveredReferenceDoseDefinition_300A_0511)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferenceDoseDefinition_300A_0512",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferenceDoseDefinition_300A_0512)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRTPlanSequence_300C_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRTPlanSequence_300C_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedBeamSequence_300C_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedBeamSequence_300C_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedBeamNumber_300C_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedBeamNumber_300C_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedReferenceImageNumber_300C_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedReferenceImageNumber_300C_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_StartCumulativeMetersetWeight_300C_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::StartCumulativeMetersetWeight_300C_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_EndCumulativeMetersetWeight_300C_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::EndCumulativeMetersetWeight_300C_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedBrachyApplicationSetupSequence_300C_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedBrachyApplicationSetupSequence_300C_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedBrachyApplicationSetupNumber_300C_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedBrachyApplicationSetupNumber_300C_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSourceNumber_300C_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSourceNumber_300C_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFractionGroupSequence_300C_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFractionGroupSequence_300C_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFractionGroupNumber_300C_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFractionGroupNumber_300C_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedVerificationImageSequence_300C_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedVerificationImageSequence_300C_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedReferenceImageSequence_300C_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedReferenceImageSequence_300C_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedDoseReferenceSequence_300C_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedDoseReferenceSequence_300C_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedDoseReferenceNumber_300C_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedDoseReferenceNumber_300C_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachyReferencedDoseReferenceSequence_300C_0055",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachyReferencedDoseReferenceSequence_300C_0055)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedStructureSetSequence_300C_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedStructureSetSequence_300C_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPatientSetupNumber_300C_006A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPatientSetupNumber_300C_006A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedDoseSequence_300C_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedDoseSequence_300C_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedToleranceTableNumber_300C_00A0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedToleranceTableNumber_300C_00A0)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedBolusSequence_300C_00B0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedBolusSequence_300C_00B0)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedWedgeNumber_300C_00C0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedWedgeNumber_300C_00C0)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedCompensatorNumber_300C_00D0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedCompensatorNumber_300C_00D0)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedBlockNumber_300C_00E0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedBlockNumber_300C_00E0)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedControlPointIndex_300C_00F0",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedControlPointIndex_300C_00F0)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedControlPointSequence_300C_00F2",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedControlPointSequence_300C_00F2)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedStartControlPointIndex_300C_00F4",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedStartControlPointIndex_300C_00F4)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedStopControlPointIndex_300C_00F6",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedStopControlPointIndex_300C_00F6)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRangeShifterNumber_300C_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRangeShifterNumber_300C_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedLateralSpreadingDeviceNumber_300C_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedLateralSpreadingDeviceNumber_300C_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRangeModulatorNumber_300C_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRangeModulatorNumber_300C_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_OmittedBeamTaskSequence_300C_0111",SWIG_From_int(static_cast< int >(imebra::tagId_t::OmittedBeamTaskSequence_300C_0111)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForOmission_300C_0112",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForOmission_300C_0112)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForOmissionDescription_300C_0113",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForOmissionDescription_300C_0113)));
  SWIG_Python_SetConstant(d, "tagId_t_ApprovalStatus_300E_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::ApprovalStatus_300E_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_ReviewDate_300E_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReviewDate_300E_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_ReviewTime_300E_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReviewTime_300E_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_ReviewerName_300E_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReviewerName_300E_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiobiologicalDoseEffectSequence_3010_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiobiologicalDoseEffectSequence_3010_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiobiologicalDoseEffectFlag_3010_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiobiologicalDoseEffectFlag_3010_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_EffectiveDoseCalculationMethodCategoryCodeSequence_3010_0003",SWIG_From_int(static_cast< int >(imebra::tagId_t::EffectiveDoseCalculationMethodCategoryCodeSequence_3010_0003)));
  SWIG_Python_SetConstant(d, "tagId_t_EffectiveDoseCalculationMethodCodeSequence_3010_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::EffectiveDoseCalculationMethodCodeSequence_3010_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_EffectiveDoseMethodDescription_3010_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::EffectiveDoseMethodDescription_3010_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeUID_3010_0006",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeUID_3010_0006)));
  SWIG_Python_SetConstant(d, "tagId_t_OriginatingSOPInstanceReferenceSequence_3010_0007",SWIG_From_int(static_cast< int >(imebra::tagId_t::OriginatingSOPInstanceReferenceSequence_3010_0007)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeConstituentSequence_3010_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeConstituentSequence_3010_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_EquivalentConceptualVolumeInstanceReferenceSequence_3010_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::EquivalentConceptualVolumeInstanceReferenceSequence_3010_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_EquivalentConceptualVolumesSequence_3010_000A",SWIG_From_int(static_cast< int >(imebra::tagId_t::EquivalentConceptualVolumesSequence_3010_000A)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedConceptualVolumeUID_3010_000B",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedConceptualVolumeUID_3010_000B)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeCombinationExpression_3010_000C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeCombinationExpression_3010_000C)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeConstituentIndex_3010_000D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeConstituentIndex_3010_000D)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeCombinationFlag_3010_000E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeCombinationFlag_3010_000E)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeCombinationDescription_3010_000F",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeCombinationDescription_3010_000F)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeSegmentationDefinedFlag_3010_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeSegmentationDefinedFlag_3010_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeSegmentationReferenceSequence_3010_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeSegmentationReferenceSequence_3010_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeConstituentSegmentationReferenceSequence_3010_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeConstituentSegmentationReferenceSequence_3010_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_ConstituentConceptualVolumeUID_3010_0013",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConstituentConceptualVolumeUID_3010_0013)));
  SWIG_Python_SetConstant(d, "tagId_t_DerivationConceptualVolumeSequence_3010_0014",SWIG_From_int(static_cast< int >(imebra::tagId_t::DerivationConceptualVolumeSequence_3010_0014)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceConceptualVolumeUID_3010_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceConceptualVolumeUID_3010_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeDerivationAlgorithmSequence_3010_0016",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeDerivationAlgorithmSequence_3010_0016)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeDescription_3010_0017",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeDescription_3010_0017)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceConceptualVolumeSequence_3010_0018",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceConceptualVolumeSequence_3010_0018)));
  SWIG_Python_SetConstant(d, "tagId_t_AuthorIdentificationSequence_3010_0019",SWIG_From_int(static_cast< int >(imebra::tagId_t::AuthorIdentificationSequence_3010_0019)));
  SWIG_Python_SetConstant(d, "tagId_t_ManufacturersModelVersion_3010_001A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ManufacturersModelVersion_3010_001A)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceAlternateIdentifier_3010_001B",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceAlternateIdentifier_3010_001B)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceAlternateIdentifierType_3010_001C",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceAlternateIdentifierType_3010_001C)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceAlternateIdentifierFormat_3010_001D",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceAlternateIdentifierFormat_3010_001D)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentationCreationTemplateLabel_3010_001E",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentationCreationTemplateLabel_3010_001E)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentationTemplateUID_3010_001F",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentationTemplateUID_3010_001F)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedSegmentReferenceIndex_3010_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedSegmentReferenceIndex_3010_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentReferenceSequence_3010_0021",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentReferenceSequence_3010_0021)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentReferenceIndex_3010_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentReferenceIndex_3010_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_DirectSegmentReferenceSequence_3010_0023",SWIG_From_int(static_cast< int >(imebra::tagId_t::DirectSegmentReferenceSequence_3010_0023)));
  SWIG_Python_SetConstant(d, "tagId_t_CombinationSegmentReferenceSequence_3010_0024",SWIG_From_int(static_cast< int >(imebra::tagId_t::CombinationSegmentReferenceSequence_3010_0024)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeSequence_3010_0025",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeSequence_3010_0025)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentedRTAccessoryDeviceSequence_3010_0026",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentedRTAccessoryDeviceSequence_3010_0026)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentCharacteristicsSequence_3010_0027",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentCharacteristicsSequence_3010_0027)));
  SWIG_Python_SetConstant(d, "tagId_t_RelatedSegmentCharacteristicsSequence_3010_0028",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelatedSegmentCharacteristicsSequence_3010_0028)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentCharacteristicsPrecedence_3010_0029",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentCharacteristicsPrecedence_3010_0029)));
  SWIG_Python_SetConstant(d, "tagId_t_RTSegmentAnnotationSequence_3010_002A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTSegmentAnnotationSequence_3010_002A)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentAnnotationCategoryCodeSequence_3010_002B",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentAnnotationCategoryCodeSequence_3010_002B)));
  SWIG_Python_SetConstant(d, "tagId_t_SegmentAnnotationTypeCodeSequence_3010_002C",SWIG_From_int(static_cast< int >(imebra::tagId_t::SegmentAnnotationTypeCodeSequence_3010_002C)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceLabel_3010_002D",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceLabel_3010_002D)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceTypeCodeSequence_3010_002E",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceTypeCodeSequence_3010_002E)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientEquipmentRelationshipCodeSequence_3010_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientEquipmentRelationshipCodeSequence_3010_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedFiducialsUID_3010_0031",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedFiducialsUID_3010_0031)));
  SWIG_Python_SetConstant(d, "tagId_t_PatientTreatmentOrientationSequence_3010_0032",SWIG_From_int(static_cast< int >(imebra::tagId_t::PatientTreatmentOrientationSequence_3010_0032)));
  SWIG_Python_SetConstant(d, "tagId_t_UserContentLabel_3010_0033",SWIG_From_int(static_cast< int >(imebra::tagId_t::UserContentLabel_3010_0033)));
  SWIG_Python_SetConstant(d, "tagId_t_UserContentLongLabel_3010_0034",SWIG_From_int(static_cast< int >(imebra::tagId_t::UserContentLongLabel_3010_0034)));
  SWIG_Python_SetConstant(d, "tagId_t_EntityLabel_3010_0035",SWIG_From_int(static_cast< int >(imebra::tagId_t::EntityLabel_3010_0035)));
  SWIG_Python_SetConstant(d, "tagId_t_EntityName_3010_0036",SWIG_From_int(static_cast< int >(imebra::tagId_t::EntityName_3010_0036)));
  SWIG_Python_SetConstant(d, "tagId_t_EntityDescription_3010_0037",SWIG_From_int(static_cast< int >(imebra::tagId_t::EntityDescription_3010_0037)));
  SWIG_Python_SetConstant(d, "tagId_t_EntityLongLabel_3010_0038",SWIG_From_int(static_cast< int >(imebra::tagId_t::EntityLongLabel_3010_0038)));
  SWIG_Python_SetConstant(d, "tagId_t_DeviceIndex_3010_0039",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeviceIndex_3010_0039)));
  SWIG_Python_SetConstant(d, "tagId_t_RTTreatmentPhaseIndex_3010_003A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTTreatmentPhaseIndex_3010_003A)));
  SWIG_Python_SetConstant(d, "tagId_t_RTTreatmentPhaseUID_3010_003B",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTTreatmentPhaseUID_3010_003B)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPrescriptionIndex_3010_003C",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPrescriptionIndex_3010_003C)));
  SWIG_Python_SetConstant(d, "tagId_t_RTSegmentAnnotationIndex_3010_003D",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTSegmentAnnotationIndex_3010_003D)));
  SWIG_Python_SetConstant(d, "tagId_t_BasisRTTreatmentPhaseIndex_3010_003E",SWIG_From_int(static_cast< int >(imebra::tagId_t::BasisRTTreatmentPhaseIndex_3010_003E)));
  SWIG_Python_SetConstant(d, "tagId_t_RelatedRTTreatmentPhaseIndex_3010_003F",SWIG_From_int(static_cast< int >(imebra::tagId_t::RelatedRTTreatmentPhaseIndex_3010_003F)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRTTreatmentPhaseIndex_3010_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRTTreatmentPhaseIndex_3010_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRTPrescriptionIndex_3010_0041",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRTPrescriptionIndex_3010_0041)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedParentRTPrescriptionIndex_3010_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedParentRTPrescriptionIndex_3010_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_ManufacturerDeviceIdentifier_3010_0043",SWIG_From_int(static_cast< int >(imebra::tagId_t::ManufacturerDeviceIdentifier_3010_0043)));
  SWIG_Python_SetConstant(d, "tagId_t_InstanceLevelReferencedPerformedProcedureStepSequence_3010_0044",SWIG_From_int(static_cast< int >(imebra::tagId_t::InstanceLevelReferencedPerformedProcedureStepSequence_3010_0044)));
  SWIG_Python_SetConstant(d, "tagId_t_RTTreatmentPhaseIntentPresenceFlag_3010_0045",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTTreatmentPhaseIntentPresenceFlag_3010_0045)));
  SWIG_Python_SetConstant(d, "tagId_t_RadiotherapyTreatmentType_3010_0046",SWIG_From_int(static_cast< int >(imebra::tagId_t::RadiotherapyTreatmentType_3010_0046)));
  SWIG_Python_SetConstant(d, "tagId_t_TeletherapyRadiationType_3010_0047",SWIG_From_int(static_cast< int >(imebra::tagId_t::TeletherapyRadiationType_3010_0047)));
  SWIG_Python_SetConstant(d, "tagId_t_BrachytherapySourceType_3010_0048",SWIG_From_int(static_cast< int >(imebra::tagId_t::BrachytherapySourceType_3010_0048)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRTTreatmentPhaseSequence_3010_0049",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRTTreatmentPhaseSequence_3010_0049)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedDirectSegmentInstanceSequence_3010_004A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedDirectSegmentInstanceSequence_3010_004A)));
  SWIG_Python_SetConstant(d, "tagId_t_IntendedRTTreatmentPhaseSequence_3010_004B",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntendedRTTreatmentPhaseSequence_3010_004B)));
  SWIG_Python_SetConstant(d, "tagId_t_IntendedPhaseStartDate_3010_004C",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntendedPhaseStartDate_3010_004C)));
  SWIG_Python_SetConstant(d, "tagId_t_IntendedPhaseEndDate_3010_004D",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntendedPhaseEndDate_3010_004D)));
  SWIG_Python_SetConstant(d, "tagId_t_RTTreatmentPhaseIntervalSequence_3010_004E",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTTreatmentPhaseIntervalSequence_3010_004E)));
  SWIG_Python_SetConstant(d, "tagId_t_TemporalRelationshipIntervalAnchor_3010_004F",SWIG_From_int(static_cast< int >(imebra::tagId_t::TemporalRelationshipIntervalAnchor_3010_004F)));
  SWIG_Python_SetConstant(d, "tagId_t_MinimumNumberOfIntervalDays_3010_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::MinimumNumberOfIntervalDays_3010_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumNumberOfIntervalDays_3010_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumNumberOfIntervalDays_3010_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_PertinentSOPClassesInStudy_3010_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::PertinentSOPClassesInStudy_3010_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_PertinentSOPClassesInSeries_3010_0053",SWIG_From_int(static_cast< int >(imebra::tagId_t::PertinentSOPClassesInSeries_3010_0053)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPrescriptionLabel_3010_0054",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPrescriptionLabel_3010_0054)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPhysicianIntentPredecessorSequence_3010_0055",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPhysicianIntentPredecessorSequence_3010_0055)));
  SWIG_Python_SetConstant(d, "tagId_t_RTTreatmentApproachLabel_3010_0056",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTTreatmentApproachLabel_3010_0056)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPhysicianIntentSequence_3010_0057",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPhysicianIntentSequence_3010_0057)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPhysicianIntentIndex_3010_0058",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPhysicianIntentIndex_3010_0058)));
  SWIG_Python_SetConstant(d, "tagId_t_RTTreatmentIntentType_3010_0059",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTTreatmentIntentType_3010_0059)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPhysicianIntentNarrative_3010_005A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPhysicianIntentNarrative_3010_005A)));
  SWIG_Python_SetConstant(d, "tagId_t_RTProtocolCodeSequence_3010_005B",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTProtocolCodeSequence_3010_005B)));
  SWIG_Python_SetConstant(d, "tagId_t_ReasonForSuperseding_3010_005C",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReasonForSuperseding_3010_005C)));
  SWIG_Python_SetConstant(d, "tagId_t_RTDiagnosisCodeSequence_3010_005D",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTDiagnosisCodeSequence_3010_005D)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedRTPhysicianIntentIndex_3010_005E",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedRTPhysicianIntentIndex_3010_005E)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPhysicianIntentInputInstanceSequence_3010_005F",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPhysicianIntentInputInstanceSequence_3010_005F)));
  SWIG_Python_SetConstant(d, "tagId_t_RTAnatomicPrescriptionSequence_3010_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTAnatomicPrescriptionSequence_3010_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_PriorTreatmentDoseDescription_3010_0061",SWIG_From_int(static_cast< int >(imebra::tagId_t::PriorTreatmentDoseDescription_3010_0061)));
  SWIG_Python_SetConstant(d, "tagId_t_PriorTreatmentReferenceSequence_3010_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::PriorTreatmentReferenceSequence_3010_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_DosimetricObjectiveEvaluationScope_3010_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::DosimetricObjectiveEvaluationScope_3010_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_TherapeuticRoleCategoryCodeSequence_3010_0064",SWIG_From_int(static_cast< int >(imebra::tagId_t::TherapeuticRoleCategoryCodeSequence_3010_0064)));
  SWIG_Python_SetConstant(d, "tagId_t_TherapeuticRoleTypeCodeSequence_3010_0065",SWIG_From_int(static_cast< int >(imebra::tagId_t::TherapeuticRoleTypeCodeSequence_3010_0065)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeOptimizationPrecedence_3010_0066",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeOptimizationPrecedence_3010_0066)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeCategoryCodeSequence_3010_0067",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeCategoryCodeSequence_3010_0067)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeBlockingConstraint_3010_0068",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeBlockingConstraint_3010_0068)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeTypeCodeSequence_3010_0069",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeTypeCodeSequence_3010_0069)));
  SWIG_Python_SetConstant(d, "tagId_t_ConceptualVolumeTypeModifierCodeSequence_3010_006A",SWIG_From_int(static_cast< int >(imebra::tagId_t::ConceptualVolumeTypeModifierCodeSequence_3010_006A)));
  SWIG_Python_SetConstant(d, "tagId_t_RTPrescriptionSequence_3010_006B",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTPrescriptionSequence_3010_006B)));
  SWIG_Python_SetConstant(d, "tagId_t_DosimetricObjectiveSequence_3010_006C",SWIG_From_int(static_cast< int >(imebra::tagId_t::DosimetricObjectiveSequence_3010_006C)));
  SWIG_Python_SetConstant(d, "tagId_t_DosimetricObjectiveTypeCodeSequence_3010_006D",SWIG_From_int(static_cast< int >(imebra::tagId_t::DosimetricObjectiveTypeCodeSequence_3010_006D)));
  SWIG_Python_SetConstant(d, "tagId_t_DosimetricObjectiveUID_3010_006E",SWIG_From_int(static_cast< int >(imebra::tagId_t::DosimetricObjectiveUID_3010_006E)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedDosimetricObjectiveUID_3010_006F",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedDosimetricObjectiveUID_3010_006F)));
  SWIG_Python_SetConstant(d, "tagId_t_DosimetricObjectiveParameterSequence_3010_0070",SWIG_From_int(static_cast< int >(imebra::tagId_t::DosimetricObjectiveParameterSequence_3010_0070)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedDosimetricObjectivesSequence_3010_0071",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedDosimetricObjectivesSequence_3010_0071)));
  SWIG_Python_SetConstant(d, "tagId_t_AbsoluteDosimetricObjectiveFlag_3010_0073",SWIG_From_int(static_cast< int >(imebra::tagId_t::AbsoluteDosimetricObjectiveFlag_3010_0073)));
  SWIG_Python_SetConstant(d, "tagId_t_DosimetricObjectiveWeight_3010_0074",SWIG_From_int(static_cast< int >(imebra::tagId_t::DosimetricObjectiveWeight_3010_0074)));
  SWIG_Python_SetConstant(d, "tagId_t_DosimetricObjectivePurpose_3010_0075",SWIG_From_int(static_cast< int >(imebra::tagId_t::DosimetricObjectivePurpose_3010_0075)));
  SWIG_Python_SetConstant(d, "tagId_t_PlanningInputInformationSequence_3010_0076",SWIG_From_int(static_cast< int >(imebra::tagId_t::PlanningInputInformationSequence_3010_0076)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentSite_3010_0077",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentSite_3010_0077)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentSiteCodeSequence_3010_0078",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentSiteCodeSequence_3010_0078)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionPatternSequence_3010_0079",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionPatternSequence_3010_0079)));
  SWIG_Python_SetConstant(d, "tagId_t_TreatmentTechniqueNotes_3010_007A",SWIG_From_int(static_cast< int >(imebra::tagId_t::TreatmentTechniqueNotes_3010_007A)));
  SWIG_Python_SetConstant(d, "tagId_t_PrescriptionNotes_3010_007B",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrescriptionNotes_3010_007B)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfIntervalFractions_3010_007C",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfIntervalFractions_3010_007C)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFractions_3010_007D",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFractions_3010_007D)));
  SWIG_Python_SetConstant(d, "tagId_t_IntendedDeliveryDuration_3010_007E",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntendedDeliveryDuration_3010_007E)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionationNotes_3010_007F",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionationNotes_3010_007F)));
  SWIG_Python_SetConstant(d, "tagId_t_RTTreatmentTechniqueCodeSequence_3010_0080",SWIG_From_int(static_cast< int >(imebra::tagId_t::RTTreatmentTechniqueCodeSequence_3010_0080)));
  SWIG_Python_SetConstant(d, "tagId_t_PrescriptionNotesSequence_3010_0081",SWIG_From_int(static_cast< int >(imebra::tagId_t::PrescriptionNotesSequence_3010_0081)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionBasedRelationshipSequence_3010_0082",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionBasedRelationshipSequence_3010_0082)));
  SWIG_Python_SetConstant(d, "tagId_t_FractionBasedRelationshipIntervalAnchor_3010_0083",SWIG_From_int(static_cast< int >(imebra::tagId_t::FractionBasedRelationshipIntervalAnchor_3010_0083)));
  SWIG_Python_SetConstant(d, "tagId_t_MinimumHoursBetweenFractions_3010_0084",SWIG_From_int(static_cast< int >(imebra::tagId_t::MinimumHoursBetweenFractions_3010_0084)));
  SWIG_Python_SetConstant(d, "tagId_t_IntendedFractionStartTime_3010_0085",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntendedFractionStartTime_3010_0085)));
  SWIG_Python_SetConstant(d, "tagId_t_IntendedStartDayOfWeek_3010_0086",SWIG_From_int(static_cast< int >(imebra::tagId_t::IntendedStartDayOfWeek_3010_0086)));
  SWIG_Python_SetConstant(d, "tagId_t_WeekdayFractionPatternSequence_3010_0087",SWIG_From_int(static_cast< int >(imebra::tagId_t::WeekdayFractionPatternSequence_3010_0087)));
  SWIG_Python_SetConstant(d, "tagId_t_DeliveryTimeStructureCodeSequence_3010_0088",SWIG_From_int(static_cast< int >(imebra::tagId_t::DeliveryTimeStructureCodeSequence_3010_0088)));
  SWIG_Python_SetConstant(d, "tagId_t_Arbitrary_4000_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::Arbitrary_4000_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_TextComments_4000_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::TextComments_4000_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_ResultsID_4008_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResultsID_4008_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_ResultsIDIssuer_4008_0042",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResultsIDIssuer_4008_0042)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedInterpretationSequence_4008_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedInterpretationSequence_4008_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_ReportProductionStatusTrial_4008_00FF",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReportProductionStatusTrial_4008_00FF)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationRecordedDate_4008_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationRecordedDate_4008_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationRecordedTime_4008_0101",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationRecordedTime_4008_0101)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationRecorder_4008_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationRecorder_4008_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferenceToRecordedSound_4008_0103",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferenceToRecordedSound_4008_0103)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationTranscriptionDate_4008_0108",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationTranscriptionDate_4008_0108)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationTranscriptionTime_4008_0109",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationTranscriptionTime_4008_0109)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationTranscriber_4008_010A",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationTranscriber_4008_010A)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationText_4008_010B",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationText_4008_010B)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationAuthor_4008_010C",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationAuthor_4008_010C)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationApproverSequence_4008_0111",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationApproverSequence_4008_0111)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationApprovalDate_4008_0112",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationApprovalDate_4008_0112)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationApprovalTime_4008_0113",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationApprovalTime_4008_0113)));
  SWIG_Python_SetConstant(d, "tagId_t_PhysicianApprovingInterpretation_4008_0114",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhysicianApprovingInterpretation_4008_0114)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationDiagnosisDescription_4008_0115",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationDiagnosisDescription_4008_0115)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationDiagnosisCodeSequence_4008_0117",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationDiagnosisCodeSequence_4008_0117)));
  SWIG_Python_SetConstant(d, "tagId_t_ResultsDistributionListSequence_4008_0118",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResultsDistributionListSequence_4008_0118)));
  SWIG_Python_SetConstant(d, "tagId_t_DistributionName_4008_0119",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistributionName_4008_0119)));
  SWIG_Python_SetConstant(d, "tagId_t_DistributionAddress_4008_011A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DistributionAddress_4008_011A)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationID_4008_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationID_4008_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationIDIssuer_4008_0202",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationIDIssuer_4008_0202)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationTypeID_4008_0210",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationTypeID_4008_0210)));
  SWIG_Python_SetConstant(d, "tagId_t_InterpretationStatusID_4008_0212",SWIG_From_int(static_cast< int >(imebra::tagId_t::InterpretationStatusID_4008_0212)));
  SWIG_Python_SetConstant(d, "tagId_t_Impressions_4008_0300",SWIG_From_int(static_cast< int >(imebra::tagId_t::Impressions_4008_0300)));
  SWIG_Python_SetConstant(d, "tagId_t_ResultsComments_4008_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::ResultsComments_4008_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_LowEnergyDetectors_4010_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::LowEnergyDetectors_4010_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_HighEnergyDetectors_4010_0002",SWIG_From_int(static_cast< int >(imebra::tagId_t::HighEnergyDetectors_4010_0002)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorGeometrySequence_4010_0004",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorGeometrySequence_4010_0004)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreatROIVoxelSequence_4010_1001",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreatROIVoxelSequence_4010_1001)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreatROIBase_4010_1004",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreatROIBase_4010_1004)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreatROIExtents_4010_1005",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreatROIExtents_4010_1005)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreatROIBitmap_4010_1006",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreatROIBitmap_4010_1006)));
  SWIG_Python_SetConstant(d, "tagId_t_RouteSegmentID_4010_1007",SWIG_From_int(static_cast< int >(imebra::tagId_t::RouteSegmentID_4010_1007)));
  SWIG_Python_SetConstant(d, "tagId_t_GantryType_4010_1008",SWIG_From_int(static_cast< int >(imebra::tagId_t::GantryType_4010_1008)));
  SWIG_Python_SetConstant(d, "tagId_t_OOIOwnerType_4010_1009",SWIG_From_int(static_cast< int >(imebra::tagId_t::OOIOwnerType_4010_1009)));
  SWIG_Python_SetConstant(d, "tagId_t_RouteSegmentSequence_4010_100A",SWIG_From_int(static_cast< int >(imebra::tagId_t::RouteSegmentSequence_4010_100A)));
  SWIG_Python_SetConstant(d, "tagId_t_PotentialThreatObjectID_4010_1010",SWIG_From_int(static_cast< int >(imebra::tagId_t::PotentialThreatObjectID_4010_1010)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreatSequence_4010_1011",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreatSequence_4010_1011)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreatCategory_4010_1012",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreatCategory_4010_1012)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreatCategoryDescription_4010_1013",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreatCategoryDescription_4010_1013)));
  SWIG_Python_SetConstant(d, "tagId_t_ATDAbilityAssessment_4010_1014",SWIG_From_int(static_cast< int >(imebra::tagId_t::ATDAbilityAssessment_4010_1014)));
  SWIG_Python_SetConstant(d, "tagId_t_ATDAssessmentFlag_4010_1015",SWIG_From_int(static_cast< int >(imebra::tagId_t::ATDAssessmentFlag_4010_1015)));
  SWIG_Python_SetConstant(d, "tagId_t_ATDAssessmentProbability_4010_1016",SWIG_From_int(static_cast< int >(imebra::tagId_t::ATDAssessmentProbability_4010_1016)));
  SWIG_Python_SetConstant(d, "tagId_t_Mass_4010_1017",SWIG_From_int(static_cast< int >(imebra::tagId_t::Mass_4010_1017)));
  SWIG_Python_SetConstant(d, "tagId_t_Density_4010_1018",SWIG_From_int(static_cast< int >(imebra::tagId_t::Density_4010_1018)));
  SWIG_Python_SetConstant(d, "tagId_t_ZEffective_4010_1019",SWIG_From_int(static_cast< int >(imebra::tagId_t::ZEffective_4010_1019)));
  SWIG_Python_SetConstant(d, "tagId_t_BoardingPassID_4010_101A",SWIG_From_int(static_cast< int >(imebra::tagId_t::BoardingPassID_4010_101A)));
  SWIG_Python_SetConstant(d, "tagId_t_CenterOfMass_4010_101B",SWIG_From_int(static_cast< int >(imebra::tagId_t::CenterOfMass_4010_101B)));
  SWIG_Python_SetConstant(d, "tagId_t_CenterOfPTO_4010_101C",SWIG_From_int(static_cast< int >(imebra::tagId_t::CenterOfPTO_4010_101C)));
  SWIG_Python_SetConstant(d, "tagId_t_BoundingPolygon_4010_101D",SWIG_From_int(static_cast< int >(imebra::tagId_t::BoundingPolygon_4010_101D)));
  SWIG_Python_SetConstant(d, "tagId_t_RouteSegmentStartLocationID_4010_101E",SWIG_From_int(static_cast< int >(imebra::tagId_t::RouteSegmentStartLocationID_4010_101E)));
  SWIG_Python_SetConstant(d, "tagId_t_RouteSegmentEndLocationID_4010_101F",SWIG_From_int(static_cast< int >(imebra::tagId_t::RouteSegmentEndLocationID_4010_101F)));
  SWIG_Python_SetConstant(d, "tagId_t_RouteSegmentLocationIDType_4010_1020",SWIG_From_int(static_cast< int >(imebra::tagId_t::RouteSegmentLocationIDType_4010_1020)));
  SWIG_Python_SetConstant(d, "tagId_t_AbortReason_4010_1021",SWIG_From_int(static_cast< int >(imebra::tagId_t::AbortReason_4010_1021)));
  SWIG_Python_SetConstant(d, "tagId_t_VolumeOfPTO_4010_1023",SWIG_From_int(static_cast< int >(imebra::tagId_t::VolumeOfPTO_4010_1023)));
  SWIG_Python_SetConstant(d, "tagId_t_AbortFlag_4010_1024",SWIG_From_int(static_cast< int >(imebra::tagId_t::AbortFlag_4010_1024)));
  SWIG_Python_SetConstant(d, "tagId_t_RouteSegmentStartTime_4010_1025",SWIG_From_int(static_cast< int >(imebra::tagId_t::RouteSegmentStartTime_4010_1025)));
  SWIG_Python_SetConstant(d, "tagId_t_RouteSegmentEndTime_4010_1026",SWIG_From_int(static_cast< int >(imebra::tagId_t::RouteSegmentEndTime_4010_1026)));
  SWIG_Python_SetConstant(d, "tagId_t_TDRType_4010_1027",SWIG_From_int(static_cast< int >(imebra::tagId_t::TDRType_4010_1027)));
  SWIG_Python_SetConstant(d, "tagId_t_InternationalRouteSegment_4010_1028",SWIG_From_int(static_cast< int >(imebra::tagId_t::InternationalRouteSegment_4010_1028)));
  SWIG_Python_SetConstant(d, "tagId_t_ThreatDetectionAlgorithmandVersion_4010_1029",SWIG_From_int(static_cast< int >(imebra::tagId_t::ThreatDetectionAlgorithmandVersion_4010_1029)));
  SWIG_Python_SetConstant(d, "tagId_t_AssignedLocation_4010_102A",SWIG_From_int(static_cast< int >(imebra::tagId_t::AssignedLocation_4010_102A)));
  SWIG_Python_SetConstant(d, "tagId_t_AlarmDecisionTime_4010_102B",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlarmDecisionTime_4010_102B)));
  SWIG_Python_SetConstant(d, "tagId_t_AlarmDecision_4010_1031",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlarmDecision_4010_1031)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfTotalObjects_4010_1033",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfTotalObjects_4010_1033)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfAlarmObjects_4010_1034",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfAlarmObjects_4010_1034)));
  SWIG_Python_SetConstant(d, "tagId_t_PTORepresentationSequence_4010_1037",SWIG_From_int(static_cast< int >(imebra::tagId_t::PTORepresentationSequence_4010_1037)));
  SWIG_Python_SetConstant(d, "tagId_t_ATDAssessmentSequence_4010_1038",SWIG_From_int(static_cast< int >(imebra::tagId_t::ATDAssessmentSequence_4010_1038)));
  SWIG_Python_SetConstant(d, "tagId_t_TIPType_4010_1039",SWIG_From_int(static_cast< int >(imebra::tagId_t::TIPType_4010_1039)));
  SWIG_Python_SetConstant(d, "tagId_t_DICOSVersion_4010_103A",SWIG_From_int(static_cast< int >(imebra::tagId_t::DICOSVersion_4010_103A)));
  SWIG_Python_SetConstant(d, "tagId_t_OOIOwnerCreationTime_4010_1041",SWIG_From_int(static_cast< int >(imebra::tagId_t::OOIOwnerCreationTime_4010_1041)));
  SWIG_Python_SetConstant(d, "tagId_t_OOIType_4010_1042",SWIG_From_int(static_cast< int >(imebra::tagId_t::OOIType_4010_1042)));
  SWIG_Python_SetConstant(d, "tagId_t_OOISize_4010_1043",SWIG_From_int(static_cast< int >(imebra::tagId_t::OOISize_4010_1043)));
  SWIG_Python_SetConstant(d, "tagId_t_AcquisitionStatus_4010_1044",SWIG_From_int(static_cast< int >(imebra::tagId_t::AcquisitionStatus_4010_1044)));
  SWIG_Python_SetConstant(d, "tagId_t_BasisMaterialsCodeSequence_4010_1045",SWIG_From_int(static_cast< int >(imebra::tagId_t::BasisMaterialsCodeSequence_4010_1045)));
  SWIG_Python_SetConstant(d, "tagId_t_PhantomType_4010_1046",SWIG_From_int(static_cast< int >(imebra::tagId_t::PhantomType_4010_1046)));
  SWIG_Python_SetConstant(d, "tagId_t_OOIOwnerSequence_4010_1047",SWIG_From_int(static_cast< int >(imebra::tagId_t::OOIOwnerSequence_4010_1047)));
  SWIG_Python_SetConstant(d, "tagId_t_ScanType_4010_1048",SWIG_From_int(static_cast< int >(imebra::tagId_t::ScanType_4010_1048)));
  SWIG_Python_SetConstant(d, "tagId_t_ItineraryID_4010_1051",SWIG_From_int(static_cast< int >(imebra::tagId_t::ItineraryID_4010_1051)));
  SWIG_Python_SetConstant(d, "tagId_t_ItineraryIDType_4010_1052",SWIG_From_int(static_cast< int >(imebra::tagId_t::ItineraryIDType_4010_1052)));
  SWIG_Python_SetConstant(d, "tagId_t_ItineraryIDAssigningAuthority_4010_1053",SWIG_From_int(static_cast< int >(imebra::tagId_t::ItineraryIDAssigningAuthority_4010_1053)));
  SWIG_Python_SetConstant(d, "tagId_t_RouteID_4010_1054",SWIG_From_int(static_cast< int >(imebra::tagId_t::RouteID_4010_1054)));
  SWIG_Python_SetConstant(d, "tagId_t_RouteIDAssigningAuthority_4010_1055",SWIG_From_int(static_cast< int >(imebra::tagId_t::RouteIDAssigningAuthority_4010_1055)));
  SWIG_Python_SetConstant(d, "tagId_t_InboundArrivalType_4010_1056",SWIG_From_int(static_cast< int >(imebra::tagId_t::InboundArrivalType_4010_1056)));
  SWIG_Python_SetConstant(d, "tagId_t_CarrierID_4010_1058",SWIG_From_int(static_cast< int >(imebra::tagId_t::CarrierID_4010_1058)));
  SWIG_Python_SetConstant(d, "tagId_t_CarrierIDAssigningAuthority_4010_1059",SWIG_From_int(static_cast< int >(imebra::tagId_t::CarrierIDAssigningAuthority_4010_1059)));
  SWIG_Python_SetConstant(d, "tagId_t_SourceOrientation_4010_1060",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourceOrientation_4010_1060)));
  SWIG_Python_SetConstant(d, "tagId_t_SourcePosition_4010_1061",SWIG_From_int(static_cast< int >(imebra::tagId_t::SourcePosition_4010_1061)));
  SWIG_Python_SetConstant(d, "tagId_t_BeltHeight_4010_1062",SWIG_From_int(static_cast< int >(imebra::tagId_t::BeltHeight_4010_1062)));
  SWIG_Python_SetConstant(d, "tagId_t_AlgorithmRoutingCodeSequence_4010_1064",SWIG_From_int(static_cast< int >(imebra::tagId_t::AlgorithmRoutingCodeSequence_4010_1064)));
  SWIG_Python_SetConstant(d, "tagId_t_TransportClassification_4010_1067",SWIG_From_int(static_cast< int >(imebra::tagId_t::TransportClassification_4010_1067)));
  SWIG_Python_SetConstant(d, "tagId_t_OOITypeDescriptor_4010_1068",SWIG_From_int(static_cast< int >(imebra::tagId_t::OOITypeDescriptor_4010_1068)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalProcessingTime_4010_1069",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalProcessingTime_4010_1069)));
  SWIG_Python_SetConstant(d, "tagId_t_DetectorCalibrationData_4010_106C",SWIG_From_int(static_cast< int >(imebra::tagId_t::DetectorCalibrationData_4010_106C)));
  SWIG_Python_SetConstant(d, "tagId_t_AdditionalScreeningPerformed_4010_106D",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdditionalScreeningPerformed_4010_106D)));
  SWIG_Python_SetConstant(d, "tagId_t_AdditionalInspectionSelectionCriteria_4010_106E",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdditionalInspectionSelectionCriteria_4010_106E)));
  SWIG_Python_SetConstant(d, "tagId_t_AdditionalInspectionMethodSequence_4010_106F",SWIG_From_int(static_cast< int >(imebra::tagId_t::AdditionalInspectionMethodSequence_4010_106F)));
  SWIG_Python_SetConstant(d, "tagId_t_AITDeviceType_4010_1070",SWIG_From_int(static_cast< int >(imebra::tagId_t::AITDeviceType_4010_1070)));
  SWIG_Python_SetConstant(d, "tagId_t_QRMeasurementsSequence_4010_1071",SWIG_From_int(static_cast< int >(imebra::tagId_t::QRMeasurementsSequence_4010_1071)));
  SWIG_Python_SetConstant(d, "tagId_t_TargetMaterialSequence_4010_1072",SWIG_From_int(static_cast< int >(imebra::tagId_t::TargetMaterialSequence_4010_1072)));
  SWIG_Python_SetConstant(d, "tagId_t_SNRThreshold_4010_1073",SWIG_From_int(static_cast< int >(imebra::tagId_t::SNRThreshold_4010_1073)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageScaleRepresentation_4010_1075",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageScaleRepresentation_4010_1075)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedPTOSequence_4010_1076",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedPTOSequence_4010_1076)));
  SWIG_Python_SetConstant(d, "tagId_t_ReferencedTDRInstanceSequence_4010_1077",SWIG_From_int(static_cast< int >(imebra::tagId_t::ReferencedTDRInstanceSequence_4010_1077)));
  SWIG_Python_SetConstant(d, "tagId_t_PTOLocationDescription_4010_1078",SWIG_From_int(static_cast< int >(imebra::tagId_t::PTOLocationDescription_4010_1078)));
  SWIG_Python_SetConstant(d, "tagId_t_AnomalyLocatorIndicatorSequence_4010_1079",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnomalyLocatorIndicatorSequence_4010_1079)));
  SWIG_Python_SetConstant(d, "tagId_t_AnomalyLocatorIndicator_4010_107A",SWIG_From_int(static_cast< int >(imebra::tagId_t::AnomalyLocatorIndicator_4010_107A)));
  SWIG_Python_SetConstant(d, "tagId_t_PTORegionSequence_4010_107B",SWIG_From_int(static_cast< int >(imebra::tagId_t::PTORegionSequence_4010_107B)));
  SWIG_Python_SetConstant(d, "tagId_t_InspectionSelectionCriteria_4010_107C",SWIG_From_int(static_cast< int >(imebra::tagId_t::InspectionSelectionCriteria_4010_107C)));
  SWIG_Python_SetConstant(d, "tagId_t_SecondaryInspectionMethodSequence_4010_107D",SWIG_From_int(static_cast< int >(imebra::tagId_t::SecondaryInspectionMethodSequence_4010_107D)));
  SWIG_Python_SetConstant(d, "tagId_t_PRCSToRCSOrientation_4010_107E",SWIG_From_int(static_cast< int >(imebra::tagId_t::PRCSToRCSOrientation_4010_107E)));
  SWIG_Python_SetConstant(d, "tagId_t_MACParametersSequence_4FFE_0001",SWIG_From_int(static_cast< int >(imebra::tagId_t::MACParametersSequence_4FFE_0001)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveDimensions_5000_0005",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveDimensions_5000_0005)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfPoints_5000_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfPoints_5000_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_TypeOfData_5000_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::TypeOfData_5000_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveDescription_5000_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveDescription_5000_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_AxisUnits_5000_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::AxisUnits_5000_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_AxisLabels_5000_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::AxisLabels_5000_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_DataValueRepresentation_5000_0103",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataValueRepresentation_5000_0103)));
  SWIG_Python_SetConstant(d, "tagId_t_MinimumCoordinateValue_5000_0104",SWIG_From_int(static_cast< int >(imebra::tagId_t::MinimumCoordinateValue_5000_0104)));
  SWIG_Python_SetConstant(d, "tagId_t_MaximumCoordinateValue_5000_0105",SWIG_From_int(static_cast< int >(imebra::tagId_t::MaximumCoordinateValue_5000_0105)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveRange_5000_0106",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveRange_5000_0106)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveDataDescriptor_5000_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveDataDescriptor_5000_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateStartValue_5000_0112",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateStartValue_5000_0112)));
  SWIG_Python_SetConstant(d, "tagId_t_CoordinateStepValue_5000_0114",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoordinateStepValue_5000_0114)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveActivationLayer_5000_1001",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveActivationLayer_5000_1001)));
  SWIG_Python_SetConstant(d, "tagId_t_AudioType_5000_2000",SWIG_From_int(static_cast< int >(imebra::tagId_t::AudioType_5000_2000)));
  SWIG_Python_SetConstant(d, "tagId_t_AudioSampleFormat_5000_2002",SWIG_From_int(static_cast< int >(imebra::tagId_t::AudioSampleFormat_5000_2002)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfChannels_5000_2004",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfChannels_5000_2004)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfSamples_5000_2006",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfSamples_5000_2006)));
  SWIG_Python_SetConstant(d, "tagId_t_SampleRate_5000_2008",SWIG_From_int(static_cast< int >(imebra::tagId_t::SampleRate_5000_2008)));
  SWIG_Python_SetConstant(d, "tagId_t_TotalTime_5000_200A",SWIG_From_int(static_cast< int >(imebra::tagId_t::TotalTime_5000_200A)));
  SWIG_Python_SetConstant(d, "tagId_t_AudioSampleData_5000_200C",SWIG_From_int(static_cast< int >(imebra::tagId_t::AudioSampleData_5000_200C)));
  SWIG_Python_SetConstant(d, "tagId_t_AudioComments_5000_200E",SWIG_From_int(static_cast< int >(imebra::tagId_t::AudioComments_5000_200E)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveLabel_5000_2500",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveLabel_5000_2500)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveReferencedOverlaySequence_5000_2600",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveReferencedOverlaySequence_5000_2600)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveReferencedOverlayGroup_5000_2610",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveReferencedOverlayGroup_5000_2610)));
  SWIG_Python_SetConstant(d, "tagId_t_CurveData_5000_3000",SWIG_From_int(static_cast< int >(imebra::tagId_t::CurveData_5000_3000)));
  SWIG_Python_SetConstant(d, "tagId_t_SharedFunctionalGroupsSequence_5200_9229",SWIG_From_int(static_cast< int >(imebra::tagId_t::SharedFunctionalGroupsSequence_5200_9229)));
  SWIG_Python_SetConstant(d, "tagId_t_PerFrameFunctionalGroupsSequence_5200_9230",SWIG_From_int(static_cast< int >(imebra::tagId_t::PerFrameFunctionalGroupsSequence_5200_9230)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformSequence_5400_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformSequence_5400_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelMinimumValue_5400_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelMinimumValue_5400_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_ChannelMaximumValue_5400_0112",SWIG_From_int(static_cast< int >(imebra::tagId_t::ChannelMaximumValue_5400_0112)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformBitsAllocated_5400_1004",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformBitsAllocated_5400_1004)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformSampleInterpretation_5400_1006",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformSampleInterpretation_5400_1006)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformPaddingValue_5400_100A",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformPaddingValue_5400_100A)));
  SWIG_Python_SetConstant(d, "tagId_t_WaveformData_5400_1010",SWIG_From_int(static_cast< int >(imebra::tagId_t::WaveformData_5400_1010)));
  SWIG_Python_SetConstant(d, "tagId_t_FirstOrderPhaseCorrectionAngle_5600_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::FirstOrderPhaseCorrectionAngle_5600_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_SpectroscopyData_5600_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::SpectroscopyData_5600_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayRows_6000_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayRows_6000_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayColumns_6000_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayColumns_6000_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayPlanes_6000_0012",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayPlanes_6000_0012)));
  SWIG_Python_SetConstant(d, "tagId_t_NumberOfFramesInOverlay_6000_0015",SWIG_From_int(static_cast< int >(imebra::tagId_t::NumberOfFramesInOverlay_6000_0015)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayDescription_6000_0022",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayDescription_6000_0022)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayType_6000_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayType_6000_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlaySubtype_6000_0045",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlaySubtype_6000_0045)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayOrigin_6000_0050",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayOrigin_6000_0050)));
  SWIG_Python_SetConstant(d, "tagId_t_ImageFrameOrigin_6000_0051",SWIG_From_int(static_cast< int >(imebra::tagId_t::ImageFrameOrigin_6000_0051)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayPlaneOrigin_6000_0052",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayPlaneOrigin_6000_0052)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayCompressionCode_6000_0060",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayCompressionCode_6000_0060)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayCompressionOriginator_6000_0061",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayCompressionOriginator_6000_0061)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayCompressionLabel_6000_0062",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayCompressionLabel_6000_0062)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayCompressionDescription_6000_0063",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayCompressionDescription_6000_0063)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayCompressionStepPointers_6000_0066",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayCompressionStepPointers_6000_0066)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayRepeatInterval_6000_0068",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayRepeatInterval_6000_0068)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayBitsGrouped_6000_0069",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayBitsGrouped_6000_0069)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayBitsAllocated_6000_0100",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayBitsAllocated_6000_0100)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayBitPosition_6000_0102",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayBitPosition_6000_0102)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayFormat_6000_0110",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayFormat_6000_0110)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayLocation_6000_0200",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayLocation_6000_0200)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayCodeLabel_6000_0800",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayCodeLabel_6000_0800)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayNumberOfTables_6000_0802",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayNumberOfTables_6000_0802)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayCodeTableLocation_6000_0803",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayCodeTableLocation_6000_0803)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayBitsForCodeWord_6000_0804",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayBitsForCodeWord_6000_0804)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayActivationLayer_6000_1001",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayActivationLayer_6000_1001)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayDescriptorGray_6000_1100",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayDescriptorGray_6000_1100)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayDescriptorRed_6000_1101",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayDescriptorRed_6000_1101)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayDescriptorGreen_6000_1102",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayDescriptorGreen_6000_1102)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayDescriptorBlue_6000_1103",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayDescriptorBlue_6000_1103)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlaysGray_6000_1200",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlaysGray_6000_1200)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlaysRed_6000_1201",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlaysRed_6000_1201)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlaysGreen_6000_1202",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlaysGreen_6000_1202)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlaysBlue_6000_1203",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlaysBlue_6000_1203)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIArea_6000_1301",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIArea_6000_1301)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIMean_6000_1302",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIMean_6000_1302)));
  SWIG_Python_SetConstant(d, "tagId_t_ROIStandardDeviation_6000_1303",SWIG_From_int(static_cast< int >(imebra::tagId_t::ROIStandardDeviation_6000_1303)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayLabel_6000_1500",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayLabel_6000_1500)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayData_6000_3000",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayData_6000_3000)));
  SWIG_Python_SetConstant(d, "tagId_t_OverlayComments_6000_4000",SWIG_From_int(static_cast< int >(imebra::tagId_t::OverlayComments_6000_4000)));
  SWIG_Python_SetConstant(d, "tagId_t_VariablePixelData_7F00_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::VariablePixelData_7F00_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_VariableNextDataGroup_7F00_0011",SWIG_From_int(static_cast< int >(imebra::tagId_t::VariableNextDataGroup_7F00_0011)));
  SWIG_Python_SetConstant(d, "tagId_t_VariableCoefficientsSDVN_7F00_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::VariableCoefficientsSDVN_7F00_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_VariableCoefficientsSDHN_7F00_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::VariableCoefficientsSDHN_7F00_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_VariableCoefficientsSDDN_7F00_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::VariableCoefficientsSDDN_7F00_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_FloatPixelData_7FE0_0008",SWIG_From_int(static_cast< int >(imebra::tagId_t::FloatPixelData_7FE0_0008)));
  SWIG_Python_SetConstant(d, "tagId_t_DoubleFloatPixelData_7FE0_0009",SWIG_From_int(static_cast< int >(imebra::tagId_t::DoubleFloatPixelData_7FE0_0009)));
  SWIG_Python_SetConstant(d, "tagId_t_PixelData_7FE0_0010",SWIG_From_int(static_cast< int >(imebra::tagId_t::PixelData_7FE0_0010)));
  SWIG_Python_SetConstant(d, "tagId_t_CoefficientsSDVN_7FE0_0020",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoefficientsSDVN_7FE0_0020)));
  SWIG_Python_SetConstant(d, "tagId_t_CoefficientsSDHN_7FE0_0030",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoefficientsSDHN_7FE0_0030)));
  SWIG_Python_SetConstant(d, "tagId_t_CoefficientsSDDN_7FE0_0040",SWIG_From_int(static_cast< int >(imebra::tagId_t::CoefficientsSDDN_7FE0_0040)));
  SWIG_Python_SetConstant(d, "tagId_t_DigitalSignaturesSequence_FFFA_FFFA",SWIG_From_int(static_cast< int >(imebra::tagId_t::DigitalSignaturesSequence_FFFA_FFFA)));
  SWIG_Python_SetConstant(d, "tagId_t_DataSetTrailingPadding_FFFC_FFFC",SWIG_From_int(static_cast< int >(imebra::tagId_t::DataSetTrailingPadding_FFFC_FFFC)));
  SWIG_Python_SetConstant(d, "tagId_t_Item_FFFE_E000",SWIG_From_int(static_cast< int >(imebra::tagId_t::Item_FFFE_E000)));
  SWIG_Python_SetConstant(d, "tagId_t_ItemDelimitationItem_FFFE_E00D",SWIG_From_int(static_cast< int >(imebra::tagId_t::ItemDelimitationItem_FFFE_E00D)));
  SWIG_Python_SetConstant(d, "tagId_t_SequenceDelimitationItem_FFFE_E0DD",SWIG_From_int(static_cast< int >(imebra::tagId_t::SequenceDelimitationItem_FFFE_E0DD)));
  SWIG_Python_SetConstant(d, "tagId_t_endOfEnumerations",SWIG_From_int(static_cast< int >(imebra::tagId_t::endOfEnumerations)));
  PyDict_SetItemString(md,(char *)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVerificationSOPClass_1_2_840_10008_1_1",Swig_var_uidVerificationSOPClass_1_2_840_10008_1_1_get, Swig_var_uidVerificationSOPClass_1_2_840_10008_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImplicitVRLittleEndian_1_2_840_10008_1_2",Swig_var_uidImplicitVRLittleEndian_1_2_840_10008_1_2_get, Swig_var_uidImplicitVRLittleEndian_1_2_840_10008_1_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidExplicitVRLittleEndian_1_2_840_10008_1_2_1",Swig_var_uidExplicitVRLittleEndian_1_2_840_10008_1_2_1_get, Swig_var_uidExplicitVRLittleEndian_1_2_840_10008_1_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDeflatedExplicitVRLittleEndian_1_2_840_10008_1_2_1_99",Swig_var_uidDeflatedExplicitVRLittleEndian_1_2_840_10008_1_2_1_99_get, Swig_var_uidDeflatedExplicitVRLittleEndian_1_2_840_10008_1_2_1_99_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidExplicitVRBigEndian_1_2_840_10008_1_2_2",Swig_var_uidExplicitVRBigEndian_1_2_840_10008_1_2_2_get, Swig_var_uidExplicitVRBigEndian_1_2_840_10008_1_2_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGBaselineProcess1_1_2_840_10008_1_2_4_50",Swig_var_uidJPEGBaselineProcess1_1_2_840_10008_1_2_4_50_get, Swig_var_uidJPEGBaselineProcess1_1_2_840_10008_1_2_4_50_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGExtendedProcess2_4_1_2_840_10008_1_2_4_51",Swig_var_uidJPEGExtendedProcess2_4_1_2_840_10008_1_2_4_51_get, Swig_var_uidJPEGExtendedProcess2_4_1_2_840_10008_1_2_4_51_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGExtendedProcess3_5_1_2_840_10008_1_2_4_52",Swig_var_uidJPEGExtendedProcess3_5_1_2_840_10008_1_2_4_52_get, Swig_var_uidJPEGExtendedProcess3_5_1_2_840_10008_1_2_4_52_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGSpectralSelectionNonHierarchicalProcess6_8_1_2_840_10008_1_2_4_53",Swig_var_uidJPEGSpectralSelectionNonHierarchicalProcess6_8_1_2_840_10008_1_2_4_53_get, Swig_var_uidJPEGSpectralSelectionNonHierarchicalProcess6_8_1_2_840_10008_1_2_4_53_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGSpectralSelectionNonHierarchicalProcess7_9_1_2_840_10008_1_2_4_54",Swig_var_uidJPEGSpectralSelectionNonHierarchicalProcess7_9_1_2_840_10008_1_2_4_54_get, Swig_var_uidJPEGSpectralSelectionNonHierarchicalProcess7_9_1_2_840_10008_1_2_4_54_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGFullProgressionNonHierarchicalProcess10_12_1_2_840_10008_1_2_4_55",Swig_var_uidJPEGFullProgressionNonHierarchicalProcess10_12_1_2_840_10008_1_2_4_55_get, Swig_var_uidJPEGFullProgressionNonHierarchicalProcess10_12_1_2_840_10008_1_2_4_55_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGFullProgressionNonHierarchicalProcess11_13_1_2_840_10008_1_2_4_56",Swig_var_uidJPEGFullProgressionNonHierarchicalProcess11_13_1_2_840_10008_1_2_4_56_get, Swig_var_uidJPEGFullProgressionNonHierarchicalProcess11_13_1_2_840_10008_1_2_4_56_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGLosslessNonHierarchicalProcess14_1_2_840_10008_1_2_4_57",Swig_var_uidJPEGLosslessNonHierarchicalProcess14_1_2_840_10008_1_2_4_57_get, Swig_var_uidJPEGLosslessNonHierarchicalProcess14_1_2_840_10008_1_2_4_57_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGLosslessNonHierarchicalProcess15_1_2_840_10008_1_2_4_58",Swig_var_uidJPEGLosslessNonHierarchicalProcess15_1_2_840_10008_1_2_4_58_get, Swig_var_uidJPEGLosslessNonHierarchicalProcess15_1_2_840_10008_1_2_4_58_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGExtendedHierarchicalProcess16_18_1_2_840_10008_1_2_4_59",Swig_var_uidJPEGExtendedHierarchicalProcess16_18_1_2_840_10008_1_2_4_59_get, Swig_var_uidJPEGExtendedHierarchicalProcess16_18_1_2_840_10008_1_2_4_59_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGExtendedHierarchicalProcess17_19_1_2_840_10008_1_2_4_60",Swig_var_uidJPEGExtendedHierarchicalProcess17_19_1_2_840_10008_1_2_4_60_get, Swig_var_uidJPEGExtendedHierarchicalProcess17_19_1_2_840_10008_1_2_4_60_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGSpectralSelectionHierarchicalProcess20_22_1_2_840_10008_1_2_4_61",Swig_var_uidJPEGSpectralSelectionHierarchicalProcess20_22_1_2_840_10008_1_2_4_61_get, Swig_var_uidJPEGSpectralSelectionHierarchicalProcess20_22_1_2_840_10008_1_2_4_61_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGSpectralSelectionHierarchicalProcess21_23_1_2_840_10008_1_2_4_62",Swig_var_uidJPEGSpectralSelectionHierarchicalProcess21_23_1_2_840_10008_1_2_4_62_get, Swig_var_uidJPEGSpectralSelectionHierarchicalProcess21_23_1_2_840_10008_1_2_4_62_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGFullProgressionHierarchicalProcess24_26_1_2_840_10008_1_2_4_63",Swig_var_uidJPEGFullProgressionHierarchicalProcess24_26_1_2_840_10008_1_2_4_63_get, Swig_var_uidJPEGFullProgressionHierarchicalProcess24_26_1_2_840_10008_1_2_4_63_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGFullProgressionHierarchicalProcess25_27_1_2_840_10008_1_2_4_64",Swig_var_uidJPEGFullProgressionHierarchicalProcess25_27_1_2_840_10008_1_2_4_64_get, Swig_var_uidJPEGFullProgressionHierarchicalProcess25_27_1_2_840_10008_1_2_4_64_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGLosslessHierarchicalProcess28_1_2_840_10008_1_2_4_65",Swig_var_uidJPEGLosslessHierarchicalProcess28_1_2_840_10008_1_2_4_65_get, Swig_var_uidJPEGLosslessHierarchicalProcess28_1_2_840_10008_1_2_4_65_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGLosslessHierarchicalProcess29_1_2_840_10008_1_2_4_66",Swig_var_uidJPEGLosslessHierarchicalProcess29_1_2_840_10008_1_2_4_66_get, Swig_var_uidJPEGLosslessHierarchicalProcess29_1_2_840_10008_1_2_4_66_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1_1_2_840_10008_1_2_4_70",Swig_var_uidJPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1_1_2_840_10008_1_2_4_70_get, Swig_var_uidJPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1_1_2_840_10008_1_2_4_70_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGLSLosslessImageCompression_1_2_840_10008_1_2_4_80",Swig_var_uidJPEGLSLosslessImageCompression_1_2_840_10008_1_2_4_80_get, Swig_var_uidJPEGLSLosslessImageCompression_1_2_840_10008_1_2_4_80_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEGLSLossyNearLosslessImageCompression_1_2_840_10008_1_2_4_81",Swig_var_uidJPEGLSLossyNearLosslessImageCompression_1_2_840_10008_1_2_4_81_get, Swig_var_uidJPEGLSLossyNearLosslessImageCompression_1_2_840_10008_1_2_4_81_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEG2000ImageCompressionLosslessOnly_1_2_840_10008_1_2_4_90",Swig_var_uidJPEG2000ImageCompressionLosslessOnly_1_2_840_10008_1_2_4_90_get, Swig_var_uidJPEG2000ImageCompressionLosslessOnly_1_2_840_10008_1_2_4_90_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEG2000ImageCompression_1_2_840_10008_1_2_4_91",Swig_var_uidJPEG2000ImageCompression_1_2_840_10008_1_2_4_91_get, Swig_var_uidJPEG2000ImageCompression_1_2_840_10008_1_2_4_91_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEG2000Part2MulticomponentImageCompressionLosslessOnly_1_2_840_10008_1_2_4_92",Swig_var_uidJPEG2000Part2MulticomponentImageCompressionLosslessOnly_1_2_840_10008_1_2_4_92_get, Swig_var_uidJPEG2000Part2MulticomponentImageCompressionLosslessOnly_1_2_840_10008_1_2_4_92_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPEG2000Part2MulticomponentImageCompression_1_2_840_10008_1_2_4_93",Swig_var_uidJPEG2000Part2MulticomponentImageCompression_1_2_840_10008_1_2_4_93_get, Swig_var_uidJPEG2000Part2MulticomponentImageCompression_1_2_840_10008_1_2_4_93_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPIPReferenced_1_2_840_10008_1_2_4_94",Swig_var_uidJPIPReferenced_1_2_840_10008_1_2_4_94_get, Swig_var_uidJPIPReferenced_1_2_840_10008_1_2_4_94_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidJPIPReferencedDeflate_1_2_840_10008_1_2_4_95",Swig_var_uidJPIPReferencedDeflate_1_2_840_10008_1_2_4_95_get, Swig_var_uidJPIPReferencedDeflate_1_2_840_10008_1_2_4_95_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMPEG2MainProfileMainLevel_1_2_840_10008_1_2_4_100",Swig_var_uidMPEG2MainProfileMainLevel_1_2_840_10008_1_2_4_100_get, Swig_var_uidMPEG2MainProfileMainLevel_1_2_840_10008_1_2_4_100_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMPEG2MainProfileHighLevel_1_2_840_10008_1_2_4_101",Swig_var_uidMPEG2MainProfileHighLevel_1_2_840_10008_1_2_4_101_get, Swig_var_uidMPEG2MainProfileHighLevel_1_2_840_10008_1_2_4_101_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMPEG4AVCH264HighProfileLevel41_1_2_840_10008_1_2_4_102",Swig_var_uidMPEG4AVCH264HighProfileLevel41_1_2_840_10008_1_2_4_102_get, Swig_var_uidMPEG4AVCH264HighProfileLevel41_1_2_840_10008_1_2_4_102_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMPEG4AVCH264BDcompatibleHighProfileLevel41_1_2_840_10008_1_2_4_103",Swig_var_uidMPEG4AVCH264BDcompatibleHighProfileLevel41_1_2_840_10008_1_2_4_103_get, Swig_var_uidMPEG4AVCH264BDcompatibleHighProfileLevel41_1_2_840_10008_1_2_4_103_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMPEG4AVCH264HighProfileLevel42For2DVideo_1_2_840_10008_1_2_4_104",Swig_var_uidMPEG4AVCH264HighProfileLevel42For2DVideo_1_2_840_10008_1_2_4_104_get, Swig_var_uidMPEG4AVCH264HighProfileLevel42For2DVideo_1_2_840_10008_1_2_4_104_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMPEG4AVCH264HighProfileLevel42For3DVideo_1_2_840_10008_1_2_4_105",Swig_var_uidMPEG4AVCH264HighProfileLevel42For3DVideo_1_2_840_10008_1_2_4_105_get, Swig_var_uidMPEG4AVCH264HighProfileLevel42For3DVideo_1_2_840_10008_1_2_4_105_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMPEG4AVCH264StereoHighProfileLevel42_1_2_840_10008_1_2_4_106",Swig_var_uidMPEG4AVCH264StereoHighProfileLevel42_1_2_840_10008_1_2_4_106_get, Swig_var_uidMPEG4AVCH264StereoHighProfileLevel42_1_2_840_10008_1_2_4_106_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHEVCH265MainProfileLevel51_1_2_840_10008_1_2_4_107",Swig_var_uidHEVCH265MainProfileLevel51_1_2_840_10008_1_2_4_107_get, Swig_var_uidHEVCH265MainProfileLevel51_1_2_840_10008_1_2_4_107_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHEVCH265Main10ProfileLevel51_1_2_840_10008_1_2_4_108",Swig_var_uidHEVCH265Main10ProfileLevel51_1_2_840_10008_1_2_4_108_get, Swig_var_uidHEVCH265Main10ProfileLevel51_1_2_840_10008_1_2_4_108_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRLELossless_1_2_840_10008_1_2_5",Swig_var_uidRLELossless_1_2_840_10008_1_2_5_get, Swig_var_uidRLELossless_1_2_840_10008_1_2_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRFC2557MIMEencapsulation_1_2_840_10008_1_2_6_1",Swig_var_uidRFC2557MIMEencapsulation_1_2_840_10008_1_2_6_1_get, Swig_var_uidRFC2557MIMEencapsulation_1_2_840_10008_1_2_6_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidXMLEncoding_1_2_840_10008_1_2_6_2",Swig_var_uidXMLEncoding_1_2_840_10008_1_2_6_2_get, Swig_var_uidXMLEncoding_1_2_840_10008_1_2_6_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMediaStorageDirectoryStorage_1_2_840_10008_1_3_10",Swig_var_uidMediaStorageDirectoryStorage_1_2_840_10008_1_3_10_get, Swig_var_uidMediaStorageDirectoryStorage_1_2_840_10008_1_3_10_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidTalairachBrainAtlasFrameofReference_1_2_840_10008_1_4_1_1",Swig_var_uidTalairachBrainAtlasFrameofReference_1_2_840_10008_1_4_1_1_get, Swig_var_uidTalairachBrainAtlasFrameofReference_1_2_840_10008_1_4_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2T1FrameofReference_1_2_840_10008_1_4_1_2",Swig_var_uidSPM2T1FrameofReference_1_2_840_10008_1_4_1_2_get, Swig_var_uidSPM2T1FrameofReference_1_2_840_10008_1_4_1_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2T2FrameofReference_1_2_840_10008_1_4_1_3",Swig_var_uidSPM2T2FrameofReference_1_2_840_10008_1_4_1_3_get, Swig_var_uidSPM2T2FrameofReference_1_2_840_10008_1_4_1_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2PDFrameofReference_1_2_840_10008_1_4_1_4",Swig_var_uidSPM2PDFrameofReference_1_2_840_10008_1_4_1_4_get, Swig_var_uidSPM2PDFrameofReference_1_2_840_10008_1_4_1_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2EPIFrameofReference_1_2_840_10008_1_4_1_5",Swig_var_uidSPM2EPIFrameofReference_1_2_840_10008_1_4_1_5_get, Swig_var_uidSPM2EPIFrameofReference_1_2_840_10008_1_4_1_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2FILT1FrameofReference_1_2_840_10008_1_4_1_6",Swig_var_uidSPM2FILT1FrameofReference_1_2_840_10008_1_4_1_6_get, Swig_var_uidSPM2FILT1FrameofReference_1_2_840_10008_1_4_1_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2PETFrameofReference_1_2_840_10008_1_4_1_7",Swig_var_uidSPM2PETFrameofReference_1_2_840_10008_1_4_1_7_get, Swig_var_uidSPM2PETFrameofReference_1_2_840_10008_1_4_1_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2TRANSMFrameofReference_1_2_840_10008_1_4_1_8",Swig_var_uidSPM2TRANSMFrameofReference_1_2_840_10008_1_4_1_8_get, Swig_var_uidSPM2TRANSMFrameofReference_1_2_840_10008_1_4_1_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2SPECTFrameofReference_1_2_840_10008_1_4_1_9",Swig_var_uidSPM2SPECTFrameofReference_1_2_840_10008_1_4_1_9_get, Swig_var_uidSPM2SPECTFrameofReference_1_2_840_10008_1_4_1_9_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2GRAYFrameofReference_1_2_840_10008_1_4_1_10",Swig_var_uidSPM2GRAYFrameofReference_1_2_840_10008_1_4_1_10_get, Swig_var_uidSPM2GRAYFrameofReference_1_2_840_10008_1_4_1_10_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2WHITEFrameofReference_1_2_840_10008_1_4_1_11",Swig_var_uidSPM2WHITEFrameofReference_1_2_840_10008_1_4_1_11_get, Swig_var_uidSPM2WHITEFrameofReference_1_2_840_10008_1_4_1_11_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2CSFFrameofReference_1_2_840_10008_1_4_1_12",Swig_var_uidSPM2CSFFrameofReference_1_2_840_10008_1_4_1_12_get, Swig_var_uidSPM2CSFFrameofReference_1_2_840_10008_1_4_1_12_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2BRAINMASKFrameofReference_1_2_840_10008_1_4_1_13",Swig_var_uidSPM2BRAINMASKFrameofReference_1_2_840_10008_1_4_1_13_get, Swig_var_uidSPM2BRAINMASKFrameofReference_1_2_840_10008_1_4_1_13_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2AVG305T1FrameofReference_1_2_840_10008_1_4_1_14",Swig_var_uidSPM2AVG305T1FrameofReference_1_2_840_10008_1_4_1_14_get, Swig_var_uidSPM2AVG305T1FrameofReference_1_2_840_10008_1_4_1_14_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2AVG152T1FrameofReference_1_2_840_10008_1_4_1_15",Swig_var_uidSPM2AVG152T1FrameofReference_1_2_840_10008_1_4_1_15_get, Swig_var_uidSPM2AVG152T1FrameofReference_1_2_840_10008_1_4_1_15_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2AVG152T2FrameofReference_1_2_840_10008_1_4_1_16",Swig_var_uidSPM2AVG152T2FrameofReference_1_2_840_10008_1_4_1_16_get, Swig_var_uidSPM2AVG152T2FrameofReference_1_2_840_10008_1_4_1_16_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2AVG152PDFrameofReference_1_2_840_10008_1_4_1_17",Swig_var_uidSPM2AVG152PDFrameofReference_1_2_840_10008_1_4_1_17_get, Swig_var_uidSPM2AVG152PDFrameofReference_1_2_840_10008_1_4_1_17_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSPM2SINGLESUBJT1FrameofReference_1_2_840_10008_1_4_1_18",Swig_var_uidSPM2SINGLESUBJT1FrameofReference_1_2_840_10008_1_4_1_18_get, Swig_var_uidSPM2SINGLESUBJT1FrameofReference_1_2_840_10008_1_4_1_18_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidICBM452T1FrameofReference_1_2_840_10008_1_4_2_1",Swig_var_uidICBM452T1FrameofReference_1_2_840_10008_1_4_2_1_get, Swig_var_uidICBM452T1FrameofReference_1_2_840_10008_1_4_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidICBMSingleSubjectMRIFrameofReference_1_2_840_10008_1_4_2_2",Swig_var_uidICBMSingleSubjectMRIFrameofReference_1_2_840_10008_1_4_2_2_get, Swig_var_uidICBMSingleSubjectMRIFrameofReference_1_2_840_10008_1_4_2_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHotIronColorPaletteSOPInstance_1_2_840_10008_1_5_1",Swig_var_uidHotIronColorPaletteSOPInstance_1_2_840_10008_1_5_1_get, Swig_var_uidHotIronColorPaletteSOPInstance_1_2_840_10008_1_5_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPETColorPaletteSOPInstance_1_2_840_10008_1_5_2",Swig_var_uidPETColorPaletteSOPInstance_1_2_840_10008_1_5_2_get, Swig_var_uidPETColorPaletteSOPInstance_1_2_840_10008_1_5_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHotMetalBlueColorPaletteSOPInstance_1_2_840_10008_1_5_3",Swig_var_uidHotMetalBlueColorPaletteSOPInstance_1_2_840_10008_1_5_3_get, Swig_var_uidHotMetalBlueColorPaletteSOPInstance_1_2_840_10008_1_5_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPET20StepColorPaletteSOPInstance_1_2_840_10008_1_5_4",Swig_var_uidPET20StepColorPaletteSOPInstance_1_2_840_10008_1_5_4_get, Swig_var_uidPET20StepColorPaletteSOPInstance_1_2_840_10008_1_5_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSpringColorPaletteSOPInstance_1_2_840_10008_1_5_5",Swig_var_uidSpringColorPaletteSOPInstance_1_2_840_10008_1_5_5_get, Swig_var_uidSpringColorPaletteSOPInstance_1_2_840_10008_1_5_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSummerColorPaletteSOPInstance_1_2_840_10008_1_5_6",Swig_var_uidSummerColorPaletteSOPInstance_1_2_840_10008_1_5_6_get, Swig_var_uidSummerColorPaletteSOPInstance_1_2_840_10008_1_5_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidFallColorPaletteSOPInstance_1_2_840_10008_1_5_7",Swig_var_uidFallColorPaletteSOPInstance_1_2_840_10008_1_5_7_get, Swig_var_uidFallColorPaletteSOPInstance_1_2_840_10008_1_5_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidWinterColorPaletteSOPInstance_1_2_840_10008_1_5_8",Swig_var_uidWinterColorPaletteSOPInstance_1_2_840_10008_1_5_8_get, Swig_var_uidWinterColorPaletteSOPInstance_1_2_840_10008_1_5_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicStudyContentNotificationSOPClass_1_2_840_10008_1_9",Swig_var_uidBasicStudyContentNotificationSOPClass_1_2_840_10008_1_9_get, Swig_var_uidBasicStudyContentNotificationSOPClass_1_2_840_10008_1_9_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPapyrus3ImplicitVRLittleEndian_1_2_840_10008_1_20",Swig_var_uidPapyrus3ImplicitVRLittleEndian_1_2_840_10008_1_20_get, Swig_var_uidPapyrus3ImplicitVRLittleEndian_1_2_840_10008_1_20_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStorageCommitmentPushModelSOPClass_1_2_840_10008_1_20_1",Swig_var_uidStorageCommitmentPushModelSOPClass_1_2_840_10008_1_20_1_get, Swig_var_uidStorageCommitmentPushModelSOPClass_1_2_840_10008_1_20_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStorageCommitmentPushModelSOPInstance_1_2_840_10008_1_20_1_1",Swig_var_uidStorageCommitmentPushModelSOPInstance_1_2_840_10008_1_20_1_1_get, Swig_var_uidStorageCommitmentPushModelSOPInstance_1_2_840_10008_1_20_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStorageCommitmentPullModelSOPClass_1_2_840_10008_1_20_2",Swig_var_uidStorageCommitmentPullModelSOPClass_1_2_840_10008_1_20_2_get, Swig_var_uidStorageCommitmentPullModelSOPClass_1_2_840_10008_1_20_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStorageCommitmentPullModelSOPInstance_1_2_840_10008_1_20_2_1",Swig_var_uidStorageCommitmentPullModelSOPInstance_1_2_840_10008_1_20_2_1_get, Swig_var_uidStorageCommitmentPullModelSOPInstance_1_2_840_10008_1_20_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidProceduralEventLoggingSOPClass_1_2_840_10008_1_40",Swig_var_uidProceduralEventLoggingSOPClass_1_2_840_10008_1_40_get, Swig_var_uidProceduralEventLoggingSOPClass_1_2_840_10008_1_40_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidProceduralEventLoggingSOPInstance_1_2_840_10008_1_40_1",Swig_var_uidProceduralEventLoggingSOPInstance_1_2_840_10008_1_40_1_get, Swig_var_uidProceduralEventLoggingSOPInstance_1_2_840_10008_1_40_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSubstanceAdministrationLoggingSOPClass_1_2_840_10008_1_42",Swig_var_uidSubstanceAdministrationLoggingSOPClass_1_2_840_10008_1_42_get, Swig_var_uidSubstanceAdministrationLoggingSOPClass_1_2_840_10008_1_42_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSubstanceAdministrationLoggingSOPInstance_1_2_840_10008_1_42_1",Swig_var_uidSubstanceAdministrationLoggingSOPInstance_1_2_840_10008_1_42_1_get, Swig_var_uidSubstanceAdministrationLoggingSOPInstance_1_2_840_10008_1_42_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOMUIDRegistry_1_2_840_10008_2_6_1",Swig_var_uidDICOMUIDRegistry_1_2_840_10008_2_6_1_get, Swig_var_uidDICOMUIDRegistry_1_2_840_10008_2_6_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOMControlledTerminology_1_2_840_10008_2_16_4",Swig_var_uidDICOMControlledTerminology_1_2_840_10008_2_16_4_get, Swig_var_uidDICOMControlledTerminology_1_2_840_10008_2_16_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidAdultMouseAnatomyOntology_1_2_840_10008_2_16_5",Swig_var_uidAdultMouseAnatomyOntology_1_2_840_10008_2_16_5_get, Swig_var_uidAdultMouseAnatomyOntology_1_2_840_10008_2_16_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUberonOntology_1_2_840_10008_2_16_6",Swig_var_uidUberonOntology_1_2_840_10008_2_16_6_get, Swig_var_uidUberonOntology_1_2_840_10008_2_16_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidIntegratedTaxonomicInformationSystemITISTaxonomicSerialNumberTSN_1_2_840_10008_2_16_7",Swig_var_uidIntegratedTaxonomicInformationSystemITISTaxonomicSerialNumberTSN_1_2_840_10008_2_16_7_get, Swig_var_uidIntegratedTaxonomicInformationSystemITISTaxonomicSerialNumberTSN_1_2_840_10008_2_16_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMouseGenomeInitiativeMGI_1_2_840_10008_2_16_8",Swig_var_uidMouseGenomeInitiativeMGI_1_2_840_10008_2_16_8_get, Swig_var_uidMouseGenomeInitiativeMGI_1_2_840_10008_2_16_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPubChemCompoundCID_1_2_840_10008_2_16_9",Swig_var_uidPubChemCompoundCID_1_2_840_10008_2_16_9_get, Swig_var_uidPubChemCompoundCID_1_2_840_10008_2_16_9_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOMApplicationContextName_1_2_840_10008_3_1_1_1",Swig_var_uidDICOMApplicationContextName_1_2_840_10008_3_1_1_1_get, Swig_var_uidDICOMApplicationContextName_1_2_840_10008_3_1_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDetachedPatientManagementSOPClass_1_2_840_10008_3_1_2_1_1",Swig_var_uidDetachedPatientManagementSOPClass_1_2_840_10008_3_1_2_1_1_get, Swig_var_uidDetachedPatientManagementSOPClass_1_2_840_10008_3_1_2_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDetachedPatientManagementMetaSOPClass_1_2_840_10008_3_1_2_1_4",Swig_var_uidDetachedPatientManagementMetaSOPClass_1_2_840_10008_3_1_2_1_4_get, Swig_var_uidDetachedPatientManagementMetaSOPClass_1_2_840_10008_3_1_2_1_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDetachedVisitManagementSOPClass_1_2_840_10008_3_1_2_2_1",Swig_var_uidDetachedVisitManagementSOPClass_1_2_840_10008_3_1_2_2_1_get, Swig_var_uidDetachedVisitManagementSOPClass_1_2_840_10008_3_1_2_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDetachedStudyManagementSOPClass_1_2_840_10008_3_1_2_3_1",Swig_var_uidDetachedStudyManagementSOPClass_1_2_840_10008_3_1_2_3_1_get, Swig_var_uidDetachedStudyManagementSOPClass_1_2_840_10008_3_1_2_3_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStudyComponentManagementSOPClass_1_2_840_10008_3_1_2_3_2",Swig_var_uidStudyComponentManagementSOPClass_1_2_840_10008_3_1_2_3_2_get, Swig_var_uidStudyComponentManagementSOPClass_1_2_840_10008_3_1_2_3_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidModalityPerformedProcedureStepSOPClass_1_2_840_10008_3_1_2_3_3",Swig_var_uidModalityPerformedProcedureStepSOPClass_1_2_840_10008_3_1_2_3_3_get, Swig_var_uidModalityPerformedProcedureStepSOPClass_1_2_840_10008_3_1_2_3_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidModalityPerformedProcedureStepRetrieveSOPClass_1_2_840_10008_3_1_2_3_4",Swig_var_uidModalityPerformedProcedureStepRetrieveSOPClass_1_2_840_10008_3_1_2_3_4_get, Swig_var_uidModalityPerformedProcedureStepRetrieveSOPClass_1_2_840_10008_3_1_2_3_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidModalityPerformedProcedureStepNotificationSOPClass_1_2_840_10008_3_1_2_3_5",Swig_var_uidModalityPerformedProcedureStepNotificationSOPClass_1_2_840_10008_3_1_2_3_5_get, Swig_var_uidModalityPerformedProcedureStepNotificationSOPClass_1_2_840_10008_3_1_2_3_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDetachedResultsManagementSOPClass_1_2_840_10008_3_1_2_5_1",Swig_var_uidDetachedResultsManagementSOPClass_1_2_840_10008_3_1_2_5_1_get, Swig_var_uidDetachedResultsManagementSOPClass_1_2_840_10008_3_1_2_5_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDetachedResultsManagementMetaSOPClass_1_2_840_10008_3_1_2_5_4",Swig_var_uidDetachedResultsManagementMetaSOPClass_1_2_840_10008_3_1_2_5_4_get, Swig_var_uidDetachedResultsManagementMetaSOPClass_1_2_840_10008_3_1_2_5_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDetachedStudyManagementMetaSOPClass_1_2_840_10008_3_1_2_5_5",Swig_var_uidDetachedStudyManagementMetaSOPClass_1_2_840_10008_3_1_2_5_5_get, Swig_var_uidDetachedStudyManagementMetaSOPClass_1_2_840_10008_3_1_2_5_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDetachedInterpretationManagementSOPClass_1_2_840_10008_3_1_2_6_1",Swig_var_uidDetachedInterpretationManagementSOPClass_1_2_840_10008_3_1_2_6_1_get, Swig_var_uidDetachedInterpretationManagementSOPClass_1_2_840_10008_3_1_2_6_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStorageServiceClass_1_2_840_10008_4_2",Swig_var_uidStorageServiceClass_1_2_840_10008_4_2_get, Swig_var_uidStorageServiceClass_1_2_840_10008_4_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicFilmSessionSOPClass_1_2_840_10008_5_1_1_1",Swig_var_uidBasicFilmSessionSOPClass_1_2_840_10008_5_1_1_1_get, Swig_var_uidBasicFilmSessionSOPClass_1_2_840_10008_5_1_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicFilmBoxSOPClass_1_2_840_10008_5_1_1_2",Swig_var_uidBasicFilmBoxSOPClass_1_2_840_10008_5_1_1_2_get, Swig_var_uidBasicFilmBoxSOPClass_1_2_840_10008_5_1_1_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicGrayscaleImageBoxSOPClass_1_2_840_10008_5_1_1_4",Swig_var_uidBasicGrayscaleImageBoxSOPClass_1_2_840_10008_5_1_1_4_get, Swig_var_uidBasicGrayscaleImageBoxSOPClass_1_2_840_10008_5_1_1_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicColorImageBoxSOPClass_1_2_840_10008_5_1_1_4_1",Swig_var_uidBasicColorImageBoxSOPClass_1_2_840_10008_5_1_1_4_1_get, Swig_var_uidBasicColorImageBoxSOPClass_1_2_840_10008_5_1_1_4_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidReferencedImageBoxSOPClass_1_2_840_10008_5_1_1_4_2",Swig_var_uidReferencedImageBoxSOPClass_1_2_840_10008_5_1_1_4_2_get, Swig_var_uidReferencedImageBoxSOPClass_1_2_840_10008_5_1_1_4_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9",Swig_var_uidBasicGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_get, Swig_var_uidBasicGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidReferencedGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_1",Swig_var_uidReferencedGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_1_get, Swig_var_uidReferencedGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPrintJobSOPClass_1_2_840_10008_5_1_1_14",Swig_var_uidPrintJobSOPClass_1_2_840_10008_5_1_1_14_get, Swig_var_uidPrintJobSOPClass_1_2_840_10008_5_1_1_14_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicAnnotationBoxSOPClass_1_2_840_10008_5_1_1_15",Swig_var_uidBasicAnnotationBoxSOPClass_1_2_840_10008_5_1_1_15_get, Swig_var_uidBasicAnnotationBoxSOPClass_1_2_840_10008_5_1_1_15_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPrinterSOPClass_1_2_840_10008_5_1_1_16",Swig_var_uidPrinterSOPClass_1_2_840_10008_5_1_1_16_get, Swig_var_uidPrinterSOPClass_1_2_840_10008_5_1_1_16_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPrinterConfigurationRetrievalSOPClass_1_2_840_10008_5_1_1_16_376",Swig_var_uidPrinterConfigurationRetrievalSOPClass_1_2_840_10008_5_1_1_16_376_get, Swig_var_uidPrinterConfigurationRetrievalSOPClass_1_2_840_10008_5_1_1_16_376_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPrinterSOPInstance_1_2_840_10008_5_1_1_17",Swig_var_uidPrinterSOPInstance_1_2_840_10008_5_1_1_17_get, Swig_var_uidPrinterSOPInstance_1_2_840_10008_5_1_1_17_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPrinterConfigurationRetrievalSOPInstance_1_2_840_10008_5_1_1_17_376",Swig_var_uidPrinterConfigurationRetrievalSOPInstance_1_2_840_10008_5_1_1_17_376_get, Swig_var_uidPrinterConfigurationRetrievalSOPInstance_1_2_840_10008_5_1_1_17_376_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18",Swig_var_uidBasicColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_get, Swig_var_uidBasicColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidReferencedColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_1",Swig_var_uidReferencedColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_1_get, Swig_var_uidReferencedColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVOILUTBoxSOPClass_1_2_840_10008_5_1_1_22",Swig_var_uidVOILUTBoxSOPClass_1_2_840_10008_5_1_1_22_get, Swig_var_uidVOILUTBoxSOPClass_1_2_840_10008_5_1_1_22_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPresentationLUTSOPClass_1_2_840_10008_5_1_1_23",Swig_var_uidPresentationLUTSOPClass_1_2_840_10008_5_1_1_23_get, Swig_var_uidPresentationLUTSOPClass_1_2_840_10008_5_1_1_23_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24",Swig_var_uidImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_get, Swig_var_uidImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicPrintImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_1",Swig_var_uidBasicPrintImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_1_get, Swig_var_uidBasicPrintImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPrintQueueSOPInstance_1_2_840_10008_5_1_1_25",Swig_var_uidPrintQueueSOPInstance_1_2_840_10008_5_1_1_25_get, Swig_var_uidPrintQueueSOPInstance_1_2_840_10008_5_1_1_25_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPrintQueueManagementSOPClass_1_2_840_10008_5_1_1_26",Swig_var_uidPrintQueueManagementSOPClass_1_2_840_10008_5_1_1_26_get, Swig_var_uidPrintQueueManagementSOPClass_1_2_840_10008_5_1_1_26_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStoredPrintStorageSOPClass_1_2_840_10008_5_1_1_27",Swig_var_uidStoredPrintStorageSOPClass_1_2_840_10008_5_1_1_27_get, Swig_var_uidStoredPrintStorageSOPClass_1_2_840_10008_5_1_1_27_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHardcopyGrayscaleImageStorageSOPClass_1_2_840_10008_5_1_1_29",Swig_var_uidHardcopyGrayscaleImageStorageSOPClass_1_2_840_10008_5_1_1_29_get, Swig_var_uidHardcopyGrayscaleImageStorageSOPClass_1_2_840_10008_5_1_1_29_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHardcopyColorImageStorageSOPClass_1_2_840_10008_5_1_1_30",Swig_var_uidHardcopyColorImageStorageSOPClass_1_2_840_10008_5_1_1_30_get, Swig_var_uidHardcopyColorImageStorageSOPClass_1_2_840_10008_5_1_1_30_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPullPrintRequestSOPClass_1_2_840_10008_5_1_1_31",Swig_var_uidPullPrintRequestSOPClass_1_2_840_10008_5_1_1_31_get, Swig_var_uidPullPrintRequestSOPClass_1_2_840_10008_5_1_1_31_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPullStoredPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_32",Swig_var_uidPullStoredPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_32_get, Swig_var_uidPullStoredPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_32_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMediaCreationManagementSOPClassUID_1_2_840_10008_5_1_1_33",Swig_var_uidMediaCreationManagementSOPClassUID_1_2_840_10008_5_1_1_33_get, Swig_var_uidMediaCreationManagementSOPClassUID_1_2_840_10008_5_1_1_33_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDisplaySystemSOPClass_1_2_840_10008_5_1_1_40",Swig_var_uidDisplaySystemSOPClass_1_2_840_10008_5_1_1_40_get, Swig_var_uidDisplaySystemSOPClass_1_2_840_10008_5_1_1_40_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDisplaySystemSOPInstance_1_2_840_10008_5_1_1_40_1",Swig_var_uidDisplaySystemSOPInstance_1_2_840_10008_5_1_1_40_1_get, Swig_var_uidDisplaySystemSOPInstance_1_2_840_10008_5_1_1_40_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidComputedRadiographyImageStorage_1_2_840_10008_5_1_4_1_1_1",Swig_var_uidComputedRadiographyImageStorage_1_2_840_10008_5_1_4_1_1_1_get, Swig_var_uidComputedRadiographyImageStorage_1_2_840_10008_5_1_4_1_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_1",Swig_var_uidDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_1_get, Swig_var_uidDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_1_1",Swig_var_uidDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_1_1_get, Swig_var_uidDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDigitalMammographyXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_2",Swig_var_uidDigitalMammographyXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_2_get, Swig_var_uidDigitalMammographyXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDigitalMammographyXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_2_1",Swig_var_uidDigitalMammographyXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_2_1_get, Swig_var_uidDigitalMammographyXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDigitalIntraOralXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_3",Swig_var_uidDigitalIntraOralXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_3_get, Swig_var_uidDigitalIntraOralXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDigitalIntraOralXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_3_1",Swig_var_uidDigitalIntraOralXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_3_1_get, Swig_var_uidDigitalIntraOralXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_3_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidCTImageStorage_1_2_840_10008_5_1_4_1_1_2",Swig_var_uidCTImageStorage_1_2_840_10008_5_1_4_1_1_2_get, Swig_var_uidCTImageStorage_1_2_840_10008_5_1_4_1_1_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_1",Swig_var_uidEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_1_get, Swig_var_uidEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidLegacyConvertedEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_2",Swig_var_uidLegacyConvertedEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_2_get, Swig_var_uidLegacyConvertedEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUltrasoundMultiframeImageStorageRetired_1_2_840_10008_5_1_4_1_1_3",Swig_var_uidUltrasoundMultiframeImageStorageRetired_1_2_840_10008_5_1_4_1_1_3_get, Swig_var_uidUltrasoundMultiframeImageStorageRetired_1_2_840_10008_5_1_4_1_1_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUltrasoundMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_3_1",Swig_var_uidUltrasoundMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_3_1_get, Swig_var_uidUltrasoundMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_3_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMRImageStorage_1_2_840_10008_5_1_4_1_1_4",Swig_var_uidMRImageStorage_1_2_840_10008_5_1_4_1_1_4_get, Swig_var_uidMRImageStorage_1_2_840_10008_5_1_4_1_1_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_1",Swig_var_uidEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_1_get, Swig_var_uidEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMRSpectroscopyStorage_1_2_840_10008_5_1_4_1_1_4_2",Swig_var_uidMRSpectroscopyStorage_1_2_840_10008_5_1_4_1_1_4_2_get, Swig_var_uidMRSpectroscopyStorage_1_2_840_10008_5_1_4_1_1_4_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEnhancedMRColorImageStorage_1_2_840_10008_5_1_4_1_1_4_3",Swig_var_uidEnhancedMRColorImageStorage_1_2_840_10008_5_1_4_1_1_4_3_get, Swig_var_uidEnhancedMRColorImageStorage_1_2_840_10008_5_1_4_1_1_4_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidLegacyConvertedEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_4",Swig_var_uidLegacyConvertedEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_4_get, Swig_var_uidLegacyConvertedEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUltrasoundImageStorageRetired_1_2_840_10008_5_1_4_1_1_6",Swig_var_uidUltrasoundImageStorageRetired_1_2_840_10008_5_1_4_1_1_6_get, Swig_var_uidUltrasoundImageStorageRetired_1_2_840_10008_5_1_4_1_1_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUltrasoundImageStorage_1_2_840_10008_5_1_4_1_1_6_1",Swig_var_uidUltrasoundImageStorage_1_2_840_10008_5_1_4_1_1_6_1_get, Swig_var_uidUltrasoundImageStorage_1_2_840_10008_5_1_4_1_1_6_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEnhancedUSVolumeStorage_1_2_840_10008_5_1_4_1_1_6_2",Swig_var_uidEnhancedUSVolumeStorage_1_2_840_10008_5_1_4_1_1_6_2_get, Swig_var_uidEnhancedUSVolumeStorage_1_2_840_10008_5_1_4_1_1_6_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7",Swig_var_uidSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_get, Swig_var_uidSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMultiframeSingleBitSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_1",Swig_var_uidMultiframeSingleBitSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_1_get, Swig_var_uidMultiframeSingleBitSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMultiframeGrayscaleByteSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_2",Swig_var_uidMultiframeGrayscaleByteSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_2_get, Swig_var_uidMultiframeGrayscaleByteSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMultiframeGrayscaleWordSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_3",Swig_var_uidMultiframeGrayscaleWordSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_3_get, Swig_var_uidMultiframeGrayscaleWordSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMultiframeTrueColorSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_4",Swig_var_uidMultiframeTrueColorSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_4_get, Swig_var_uidMultiframeTrueColorSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStandaloneOverlayStorage_1_2_840_10008_5_1_4_1_1_8",Swig_var_uidStandaloneOverlayStorage_1_2_840_10008_5_1_4_1_1_8_get, Swig_var_uidStandaloneOverlayStorage_1_2_840_10008_5_1_4_1_1_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStandaloneCurveStorage_1_2_840_10008_5_1_4_1_1_9",Swig_var_uidStandaloneCurveStorage_1_2_840_10008_5_1_4_1_1_9_get, Swig_var_uidStandaloneCurveStorage_1_2_840_10008_5_1_4_1_1_9_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidWaveformStorageTrial_1_2_840_10008_5_1_4_1_1_9_1",Swig_var_uidWaveformStorageTrial_1_2_840_10008_5_1_4_1_1_9_1_get, Swig_var_uidWaveformStorageTrial_1_2_840_10008_5_1_4_1_1_9_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uid12leadECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_1",Swig_var_uid12leadECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_1_get, Swig_var_uid12leadECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGeneralECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_2",Swig_var_uidGeneralECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_2_get, Swig_var_uidGeneralECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidAmbulatoryECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_3",Swig_var_uidAmbulatoryECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_3_get, Swig_var_uidAmbulatoryECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHemodynamicWaveformStorage_1_2_840_10008_5_1_4_1_1_9_2_1",Swig_var_uidHemodynamicWaveformStorage_1_2_840_10008_5_1_4_1_1_9_2_1_get, Swig_var_uidHemodynamicWaveformStorage_1_2_840_10008_5_1_4_1_1_9_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidCardiacElectrophysiologyWaveformStorage_1_2_840_10008_5_1_4_1_1_9_3_1",Swig_var_uidCardiacElectrophysiologyWaveformStorage_1_2_840_10008_5_1_4_1_1_9_3_1_get, Swig_var_uidCardiacElectrophysiologyWaveformStorage_1_2_840_10008_5_1_4_1_1_9_3_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicVoiceAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_1",Swig_var_uidBasicVoiceAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_1_get, Swig_var_uidBasicVoiceAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGeneralAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_2",Swig_var_uidGeneralAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_2_get, Swig_var_uidGeneralAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidArterialPulseWaveformStorage_1_2_840_10008_5_1_4_1_1_9_5_1",Swig_var_uidArterialPulseWaveformStorage_1_2_840_10008_5_1_4_1_1_9_5_1_get, Swig_var_uidArterialPulseWaveformStorage_1_2_840_10008_5_1_4_1_1_9_5_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRespiratoryWaveformStorage_1_2_840_10008_5_1_4_1_1_9_6_1",Swig_var_uidRespiratoryWaveformStorage_1_2_840_10008_5_1_4_1_1_9_6_1_get, Swig_var_uidRespiratoryWaveformStorage_1_2_840_10008_5_1_4_1_1_9_6_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStandaloneModalityLUTStorage_1_2_840_10008_5_1_4_1_1_10",Swig_var_uidStandaloneModalityLUTStorage_1_2_840_10008_5_1_4_1_1_10_get, Swig_var_uidStandaloneModalityLUTStorage_1_2_840_10008_5_1_4_1_1_10_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStandaloneVOILUTStorage_1_2_840_10008_5_1_4_1_1_11",Swig_var_uidStandaloneVOILUTStorage_1_2_840_10008_5_1_4_1_1_11_get, Swig_var_uidStandaloneVOILUTStorage_1_2_840_10008_5_1_4_1_1_11_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_1",Swig_var_uidGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_1_get, Swig_var_uidGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_2",Swig_var_uidColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_2_get, Swig_var_uidColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPseudoColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_3",Swig_var_uidPseudoColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_3_get, Swig_var_uidPseudoColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBlendingSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_4",Swig_var_uidBlendingSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_4_get, Swig_var_uidBlendingSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidXAXRFGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_5",Swig_var_uidXAXRFGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_5_get, Swig_var_uidXAXRFGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGrayscalePlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_6",Swig_var_uidGrayscalePlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_6_get, Swig_var_uidGrayscalePlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidCompositingPlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_7",Swig_var_uidCompositingPlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_7_get, Swig_var_uidCompositingPlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidAdvancedBlendingPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_8",Swig_var_uidAdvancedBlendingPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_8_get, Swig_var_uidAdvancedBlendingPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_9",Swig_var_uidVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_9_get, Swig_var_uidVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_9_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSegmentedVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_10",Swig_var_uidSegmentedVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_10_get, Swig_var_uidSegmentedVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_10_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMultipleVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_11",Swig_var_uidMultipleVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_11_get, Swig_var_uidMultipleVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_11_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidXRayAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_12_1",Swig_var_uidXRayAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_12_1_get, Swig_var_uidXRayAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_12_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEnhancedXAImageStorage_1_2_840_10008_5_1_4_1_1_12_1_1",Swig_var_uidEnhancedXAImageStorage_1_2_840_10008_5_1_4_1_1_12_1_1_get, Swig_var_uidEnhancedXAImageStorage_1_2_840_10008_5_1_4_1_1_12_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidXRayRadiofluoroscopicImageStorage_1_2_840_10008_5_1_4_1_1_12_2",Swig_var_uidXRayRadiofluoroscopicImageStorage_1_2_840_10008_5_1_4_1_1_12_2_get, Swig_var_uidXRayRadiofluoroscopicImageStorage_1_2_840_10008_5_1_4_1_1_12_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEnhancedXRFImageStorage_1_2_840_10008_5_1_4_1_1_12_2_1",Swig_var_uidEnhancedXRFImageStorage_1_2_840_10008_5_1_4_1_1_12_2_1_get, Swig_var_uidEnhancedXRFImageStorage_1_2_840_10008_5_1_4_1_1_12_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidXRayAngiographicBiPlaneImageStorage_1_2_840_10008_5_1_4_1_1_12_3",Swig_var_uidXRayAngiographicBiPlaneImageStorage_1_2_840_10008_5_1_4_1_1_12_3_get, Swig_var_uidXRayAngiographicBiPlaneImageStorage_1_2_840_10008_5_1_4_1_1_12_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidXRay3DAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_13_1_1",Swig_var_uidXRay3DAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_13_1_1_get, Swig_var_uidXRay3DAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_13_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidXRay3DCraniofacialImageStorage_1_2_840_10008_5_1_4_1_1_13_1_2",Swig_var_uidXRay3DCraniofacialImageStorage_1_2_840_10008_5_1_4_1_1_13_1_2_get, Swig_var_uidXRay3DCraniofacialImageStorage_1_2_840_10008_5_1_4_1_1_13_1_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBreastTomosynthesisImageStorage_1_2_840_10008_5_1_4_1_1_13_1_3",Swig_var_uidBreastTomosynthesisImageStorage_1_2_840_10008_5_1_4_1_1_13_1_3_get, Swig_var_uidBreastTomosynthesisImageStorage_1_2_840_10008_5_1_4_1_1_13_1_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBreastProjectionXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_13_1_4",Swig_var_uidBreastProjectionXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_13_1_4_get, Swig_var_uidBreastProjectionXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_13_1_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBreastProjectionXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_13_1_5",Swig_var_uidBreastProjectionXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_13_1_5_get, Swig_var_uidBreastProjectionXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_13_1_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidIntravascularOpticalCoherenceTomographyImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_14_1",Swig_var_uidIntravascularOpticalCoherenceTomographyImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_14_1_get, Swig_var_uidIntravascularOpticalCoherenceTomographyImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_14_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidIntravascularOpticalCoherenceTomographyImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_14_2",Swig_var_uidIntravascularOpticalCoherenceTomographyImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_14_2_get, Swig_var_uidIntravascularOpticalCoherenceTomographyImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_14_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidNuclearMedicineImageStorageRetired_1_2_840_10008_5_1_4_1_1_5",Swig_var_uidNuclearMedicineImageStorageRetired_1_2_840_10008_5_1_4_1_1_5_get, Swig_var_uidNuclearMedicineImageStorageRetired_1_2_840_10008_5_1_4_1_1_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidNuclearMedicineImageStorage_1_2_840_10008_5_1_4_1_1_20",Swig_var_uidNuclearMedicineImageStorage_1_2_840_10008_5_1_4_1_1_20_get, Swig_var_uidNuclearMedicineImageStorage_1_2_840_10008_5_1_4_1_1_20_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidParametricMapStorage_1_2_840_10008_5_1_4_1_1_30",Swig_var_uidParametricMapStorage_1_2_840_10008_5_1_4_1_1_30_get, Swig_var_uidParametricMapStorage_1_2_840_10008_5_1_4_1_1_30_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRawDataStorage_1_2_840_10008_5_1_4_1_1_66",Swig_var_uidRawDataStorage_1_2_840_10008_5_1_4_1_1_66_get, Swig_var_uidRawDataStorage_1_2_840_10008_5_1_4_1_1_66_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_1",Swig_var_uidSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_1_get, Swig_var_uidSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSpatialFiducialsStorage_1_2_840_10008_5_1_4_1_1_66_2",Swig_var_uidSpatialFiducialsStorage_1_2_840_10008_5_1_4_1_1_66_2_get, Swig_var_uidSpatialFiducialsStorage_1_2_840_10008_5_1_4_1_1_66_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDeformableSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_3",Swig_var_uidDeformableSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_3_get, Swig_var_uidDeformableSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_4",Swig_var_uidSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_4_get, Swig_var_uidSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSurfaceSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_5",Swig_var_uidSurfaceSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_5_get, Swig_var_uidSurfaceSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidTractographyResultsStorage_1_2_840_10008_5_1_4_1_1_66_6",Swig_var_uidTractographyResultsStorage_1_2_840_10008_5_1_4_1_1_66_6_get, Swig_var_uidTractographyResultsStorage_1_2_840_10008_5_1_4_1_1_66_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRealWorldValueMappingStorage_1_2_840_10008_5_1_4_1_1_67",Swig_var_uidRealWorldValueMappingStorage_1_2_840_10008_5_1_4_1_1_67_get, Swig_var_uidRealWorldValueMappingStorage_1_2_840_10008_5_1_4_1_1_67_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSurfaceScanMeshStorage_1_2_840_10008_5_1_4_1_1_68_1",Swig_var_uidSurfaceScanMeshStorage_1_2_840_10008_5_1_4_1_1_68_1_get, Swig_var_uidSurfaceScanMeshStorage_1_2_840_10008_5_1_4_1_1_68_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSurfaceScanPointCloudStorage_1_2_840_10008_5_1_4_1_1_68_2",Swig_var_uidSurfaceScanPointCloudStorage_1_2_840_10008_5_1_4_1_1_68_2_get, Swig_var_uidSurfaceScanPointCloudStorage_1_2_840_10008_5_1_4_1_1_68_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVLImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_1",Swig_var_uidVLImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_1_get, Swig_var_uidVLImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVLMultiframeImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_2",Swig_var_uidVLMultiframeImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_2_get, Swig_var_uidVLMultiframeImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVLEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1",Swig_var_uidVLEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_get, Swig_var_uidVLEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVideoEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_1",Swig_var_uidVideoEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_1_get, Swig_var_uidVideoEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVLMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2",Swig_var_uidVLMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_get, Swig_var_uidVLMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVideoMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_1",Swig_var_uidVideoMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_1_get, Swig_var_uidVideoMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVLSlideCoordinatesMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_3",Swig_var_uidVLSlideCoordinatesMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_3_get, Swig_var_uidVLSlideCoordinatesMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVLPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4",Swig_var_uidVLPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_get, Swig_var_uidVLPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVideoPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_1",Swig_var_uidVideoPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_1_get, Swig_var_uidVideoPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidOphthalmicPhotography8BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_1",Swig_var_uidOphthalmicPhotography8BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_1_get, Swig_var_uidOphthalmicPhotography8BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidOphthalmicPhotography16BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_2",Swig_var_uidOphthalmicPhotography16BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_2_get, Swig_var_uidOphthalmicPhotography16BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStereometricRelationshipStorage_1_2_840_10008_5_1_4_1_1_77_1_5_3",Swig_var_uidStereometricRelationshipStorage_1_2_840_10008_5_1_4_1_1_77_1_5_3_get, Swig_var_uidStereometricRelationshipStorage_1_2_840_10008_5_1_4_1_1_77_1_5_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidOphthalmicTomographyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_4",Swig_var_uidOphthalmicTomographyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_4_get, Swig_var_uidOphthalmicTomographyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidWideFieldOphthalmicPhotographyStereographicProjectionImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_5",Swig_var_uidWideFieldOphthalmicPhotographyStereographicProjectionImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_5_get, Swig_var_uidWideFieldOphthalmicPhotographyStereographicProjectionImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidWideFieldOphthalmicPhotography3DCoordinatesImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_6",Swig_var_uidWideFieldOphthalmicPhotography3DCoordinatesImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_6_get, Swig_var_uidWideFieldOphthalmicPhotography3DCoordinatesImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidOphthalmicOpticalCoherenceTomographyEnFaceImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_7",Swig_var_uidOphthalmicOpticalCoherenceTomographyEnFaceImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_7_get, Swig_var_uidOphthalmicOpticalCoherenceTomographyEnFaceImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidOphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorage_1_2_840_10008_5_1_4_1_1_77_1_5_8",Swig_var_uidOphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorage_1_2_840_10008_5_1_4_1_1_77_1_5_8_get, Swig_var_uidOphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorage_1_2_840_10008_5_1_4_1_1_77_1_5_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVLWholeSlideMicroscopyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_6",Swig_var_uidVLWholeSlideMicroscopyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_6_get, Swig_var_uidVLWholeSlideMicroscopyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidLensometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_1",Swig_var_uidLensometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_1_get, Swig_var_uidLensometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidAutorefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_2",Swig_var_uidAutorefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_2_get, Swig_var_uidAutorefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidKeratometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_3",Swig_var_uidKeratometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_3_get, Swig_var_uidKeratometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSubjectiveRefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_4",Swig_var_uidSubjectiveRefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_4_get, Swig_var_uidSubjectiveRefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidVisualAcuityMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_5",Swig_var_uidVisualAcuityMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_5_get, Swig_var_uidVisualAcuityMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSpectaclePrescriptionReportStorage_1_2_840_10008_5_1_4_1_1_78_6",Swig_var_uidSpectaclePrescriptionReportStorage_1_2_840_10008_5_1_4_1_1_78_6_get, Swig_var_uidSpectaclePrescriptionReportStorage_1_2_840_10008_5_1_4_1_1_78_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidOphthalmicAxialMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_7",Swig_var_uidOphthalmicAxialMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_7_get, Swig_var_uidOphthalmicAxialMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidIntraocularLensCalculationsStorage_1_2_840_10008_5_1_4_1_1_78_8",Swig_var_uidIntraocularLensCalculationsStorage_1_2_840_10008_5_1_4_1_1_78_8_get, Swig_var_uidIntraocularLensCalculationsStorage_1_2_840_10008_5_1_4_1_1_78_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMacularGridThicknessandVolumeReportStorage_1_2_840_10008_5_1_4_1_1_79_1",Swig_var_uidMacularGridThicknessandVolumeReportStorage_1_2_840_10008_5_1_4_1_1_79_1_get, Swig_var_uidMacularGridThicknessandVolumeReportStorage_1_2_840_10008_5_1_4_1_1_79_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidOphthalmicVisualFieldStaticPerimetryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_80_1",Swig_var_uidOphthalmicVisualFieldStaticPerimetryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_80_1_get, Swig_var_uidOphthalmicVisualFieldStaticPerimetryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_80_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidOphthalmicThicknessMapStorage_1_2_840_10008_5_1_4_1_1_81_1",Swig_var_uidOphthalmicThicknessMapStorage_1_2_840_10008_5_1_4_1_1_81_1_get, Swig_var_uidOphthalmicThicknessMapStorage_1_2_840_10008_5_1_4_1_1_81_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidCornealTopographyMapStorage_1_2_840_10008_5_1_4_1_1_82_1",Swig_var_uidCornealTopographyMapStorage_1_2_840_10008_5_1_4_1_1_82_1_get, Swig_var_uidCornealTopographyMapStorage_1_2_840_10008_5_1_4_1_1_82_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidTextSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_1",Swig_var_uidTextSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_1_get, Swig_var_uidTextSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidAudioSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_2",Swig_var_uidAudioSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_2_get, Swig_var_uidAudioSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDetailSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_3",Swig_var_uidDetailSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_3_get, Swig_var_uidDetailSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidComprehensiveSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_4",Swig_var_uidComprehensiveSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_4_get, Swig_var_uidComprehensiveSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicTextSRStorage_1_2_840_10008_5_1_4_1_1_88_11",Swig_var_uidBasicTextSRStorage_1_2_840_10008_5_1_4_1_1_88_11_get, Swig_var_uidBasicTextSRStorage_1_2_840_10008_5_1_4_1_1_88_11_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEnhancedSRStorage_1_2_840_10008_5_1_4_1_1_88_22",Swig_var_uidEnhancedSRStorage_1_2_840_10008_5_1_4_1_1_88_22_get, Swig_var_uidEnhancedSRStorage_1_2_840_10008_5_1_4_1_1_88_22_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidComprehensiveSRStorage_1_2_840_10008_5_1_4_1_1_88_33",Swig_var_uidComprehensiveSRStorage_1_2_840_10008_5_1_4_1_1_88_33_get, Swig_var_uidComprehensiveSRStorage_1_2_840_10008_5_1_4_1_1_88_33_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidComprehensive3DSRStorage_1_2_840_10008_5_1_4_1_1_88_34",Swig_var_uidComprehensive3DSRStorage_1_2_840_10008_5_1_4_1_1_88_34_get, Swig_var_uidComprehensive3DSRStorage_1_2_840_10008_5_1_4_1_1_88_34_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidExtensibleSRStorage_1_2_840_10008_5_1_4_1_1_88_35",Swig_var_uidExtensibleSRStorage_1_2_840_10008_5_1_4_1_1_88_35_get, Swig_var_uidExtensibleSRStorage_1_2_840_10008_5_1_4_1_1_88_35_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidProcedureLogStorage_1_2_840_10008_5_1_4_1_1_88_40",Swig_var_uidProcedureLogStorage_1_2_840_10008_5_1_4_1_1_88_40_get, Swig_var_uidProcedureLogStorage_1_2_840_10008_5_1_4_1_1_88_40_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidMammographyCADSRStorage_1_2_840_10008_5_1_4_1_1_88_50",Swig_var_uidMammographyCADSRStorage_1_2_840_10008_5_1_4_1_1_88_50_get, Swig_var_uidMammographyCADSRStorage_1_2_840_10008_5_1_4_1_1_88_50_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidKeyObjectSelectionDocumentStorage_1_2_840_10008_5_1_4_1_1_88_59",Swig_var_uidKeyObjectSelectionDocumentStorage_1_2_840_10008_5_1_4_1_1_88_59_get, Swig_var_uidKeyObjectSelectionDocumentStorage_1_2_840_10008_5_1_4_1_1_88_59_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidChestCADSRStorage_1_2_840_10008_5_1_4_1_1_88_65",Swig_var_uidChestCADSRStorage_1_2_840_10008_5_1_4_1_1_88_65_get, Swig_var_uidChestCADSRStorage_1_2_840_10008_5_1_4_1_1_88_65_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidXRayRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_67",Swig_var_uidXRayRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_67_get, Swig_var_uidXRayRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_67_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRadiopharmaceuticalRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_68",Swig_var_uidRadiopharmaceuticalRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_68_get, Swig_var_uidRadiopharmaceuticalRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_68_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidColonCADSRStorage_1_2_840_10008_5_1_4_1_1_88_69",Swig_var_uidColonCADSRStorage_1_2_840_10008_5_1_4_1_1_88_69_get, Swig_var_uidColonCADSRStorage_1_2_840_10008_5_1_4_1_1_88_69_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImplantationPlanSRStorage_1_2_840_10008_5_1_4_1_1_88_70",Swig_var_uidImplantationPlanSRStorage_1_2_840_10008_5_1_4_1_1_88_70_get, Swig_var_uidImplantationPlanSRStorage_1_2_840_10008_5_1_4_1_1_88_70_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidAcquisitionContextSRStorage_1_2_840_10008_5_1_4_1_1_88_71",Swig_var_uidAcquisitionContextSRStorage_1_2_840_10008_5_1_4_1_1_88_71_get, Swig_var_uidAcquisitionContextSRStorage_1_2_840_10008_5_1_4_1_1_88_71_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSimplifiedAdultEchoSRStorage_1_2_840_10008_5_1_4_1_1_88_72",Swig_var_uidSimplifiedAdultEchoSRStorage_1_2_840_10008_5_1_4_1_1_88_72_get, Swig_var_uidSimplifiedAdultEchoSRStorage_1_2_840_10008_5_1_4_1_1_88_72_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPatientRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_73",Swig_var_uidPatientRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_73_get, Swig_var_uidPatientRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_73_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPlannedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_74",Swig_var_uidPlannedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_74_get, Swig_var_uidPlannedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_74_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPerformedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_75",Swig_var_uidPerformedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_75_get, Swig_var_uidPerformedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_75_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidContentAssessmentResultsStorage_1_2_840_10008_5_1_4_1_1_90_1",Swig_var_uidContentAssessmentResultsStorage_1_2_840_10008_5_1_4_1_1_90_1_get, Swig_var_uidContentAssessmentResultsStorage_1_2_840_10008_5_1_4_1_1_90_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEncapsulatedPDFStorage_1_2_840_10008_5_1_4_1_1_104_1",Swig_var_uidEncapsulatedPDFStorage_1_2_840_10008_5_1_4_1_1_104_1_get, Swig_var_uidEncapsulatedPDFStorage_1_2_840_10008_5_1_4_1_1_104_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEncapsulatedCDAStorage_1_2_840_10008_5_1_4_1_1_104_2",Swig_var_uidEncapsulatedCDAStorage_1_2_840_10008_5_1_4_1_1_104_2_get, Swig_var_uidEncapsulatedCDAStorage_1_2_840_10008_5_1_4_1_1_104_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEncapsulatedSTLStorage_1_2_840_10008_5_1_4_1_1_104_3",Swig_var_uidEncapsulatedSTLStorage_1_2_840_10008_5_1_4_1_1_104_3_get, Swig_var_uidEncapsulatedSTLStorage_1_2_840_10008_5_1_4_1_1_104_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPositronEmissionTomographyImageStorage_1_2_840_10008_5_1_4_1_1_128",Swig_var_uidPositronEmissionTomographyImageStorage_1_2_840_10008_5_1_4_1_1_128_get, Swig_var_uidPositronEmissionTomographyImageStorage_1_2_840_10008_5_1_4_1_1_128_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidLegacyConvertedEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_128_1",Swig_var_uidLegacyConvertedEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_128_1_get, Swig_var_uidLegacyConvertedEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_128_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStandalonePETCurveStorage_1_2_840_10008_5_1_4_1_1_129",Swig_var_uidStandalonePETCurveStorage_1_2_840_10008_5_1_4_1_1_129_get, Swig_var_uidStandalonePETCurveStorage_1_2_840_10008_5_1_4_1_1_129_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_130",Swig_var_uidEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_130_get, Swig_var_uidEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_130_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBasicStructuredDisplayStorage_1_2_840_10008_5_1_4_1_1_131",Swig_var_uidBasicStructuredDisplayStorage_1_2_840_10008_5_1_4_1_1_131_get, Swig_var_uidBasicStructuredDisplayStorage_1_2_840_10008_5_1_4_1_1_131_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidCTDefinedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_1",Swig_var_uidCTDefinedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_1_get, Swig_var_uidCTDefinedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidCTPerformedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_2",Swig_var_uidCTPerformedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_2_get, Swig_var_uidCTPerformedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidProtocolApprovalStorage_1_2_840_10008_5_1_4_1_1_200_3",Swig_var_uidProtocolApprovalStorage_1_2_840_10008_5_1_4_1_1_200_3_get, Swig_var_uidProtocolApprovalStorage_1_2_840_10008_5_1_4_1_1_200_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidProtocolApprovalInformationModelFIND_1_2_840_10008_5_1_4_1_1_200_4",Swig_var_uidProtocolApprovalInformationModelFIND_1_2_840_10008_5_1_4_1_1_200_4_get, Swig_var_uidProtocolApprovalInformationModelFIND_1_2_840_10008_5_1_4_1_1_200_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidProtocolApprovalInformationModelMOVE_1_2_840_10008_5_1_4_1_1_200_5",Swig_var_uidProtocolApprovalInformationModelMOVE_1_2_840_10008_5_1_4_1_1_200_5_get, Swig_var_uidProtocolApprovalInformationModelMOVE_1_2_840_10008_5_1_4_1_1_200_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidProtocolApprovalInformationModelGET_1_2_840_10008_5_1_4_1_1_200_6",Swig_var_uidProtocolApprovalInformationModelGET_1_2_840_10008_5_1_4_1_1_200_6_get, Swig_var_uidProtocolApprovalInformationModelGET_1_2_840_10008_5_1_4_1_1_200_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTImageStorage_1_2_840_10008_5_1_4_1_1_481_1",Swig_var_uidRTImageStorage_1_2_840_10008_5_1_4_1_1_481_1_get, Swig_var_uidRTImageStorage_1_2_840_10008_5_1_4_1_1_481_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTDoseStorage_1_2_840_10008_5_1_4_1_1_481_2",Swig_var_uidRTDoseStorage_1_2_840_10008_5_1_4_1_1_481_2_get, Swig_var_uidRTDoseStorage_1_2_840_10008_5_1_4_1_1_481_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTStructureSetStorage_1_2_840_10008_5_1_4_1_1_481_3",Swig_var_uidRTStructureSetStorage_1_2_840_10008_5_1_4_1_1_481_3_get, Swig_var_uidRTStructureSetStorage_1_2_840_10008_5_1_4_1_1_481_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_4",Swig_var_uidRTBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_4_get, Swig_var_uidRTBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTPlanStorage_1_2_840_10008_5_1_4_1_1_481_5",Swig_var_uidRTPlanStorage_1_2_840_10008_5_1_4_1_1_481_5_get, Swig_var_uidRTPlanStorage_1_2_840_10008_5_1_4_1_1_481_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTBrachyTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_6",Swig_var_uidRTBrachyTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_6_get, Swig_var_uidRTBrachyTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTTreatmentSummaryRecordStorage_1_2_840_10008_5_1_4_1_1_481_7",Swig_var_uidRTTreatmentSummaryRecordStorage_1_2_840_10008_5_1_4_1_1_481_7_get, Swig_var_uidRTTreatmentSummaryRecordStorage_1_2_840_10008_5_1_4_1_1_481_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTIonPlanStorage_1_2_840_10008_5_1_4_1_1_481_8",Swig_var_uidRTIonPlanStorage_1_2_840_10008_5_1_4_1_1_481_8_get, Swig_var_uidRTIonPlanStorage_1_2_840_10008_5_1_4_1_1_481_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTIonBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_9",Swig_var_uidRTIonBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_9_get, Swig_var_uidRTIonBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_9_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTPhysicianIntentStorage_1_2_840_10008_5_1_4_1_1_481_10",Swig_var_uidRTPhysicianIntentStorage_1_2_840_10008_5_1_4_1_1_481_10_get, Swig_var_uidRTPhysicianIntentStorage_1_2_840_10008_5_1_4_1_1_481_10_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTSegmentAnnotationStorage_1_2_840_10008_5_1_4_1_1_481_11",Swig_var_uidRTSegmentAnnotationStorage_1_2_840_10008_5_1_4_1_1_481_11_get, Swig_var_uidRTSegmentAnnotationStorage_1_2_840_10008_5_1_4_1_1_481_11_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOSCTImageStorage_1_2_840_10008_5_1_4_1_1_501_1",Swig_var_uidDICOSCTImageStorage_1_2_840_10008_5_1_4_1_1_501_1_get, Swig_var_uidDICOSCTImageStorage_1_2_840_10008_5_1_4_1_1_501_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOSDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_501_2_1",Swig_var_uidDICOSDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_501_2_1_get, Swig_var_uidDICOSDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_501_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOSDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_501_2_2",Swig_var_uidDICOSDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_501_2_2_get, Swig_var_uidDICOSDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_501_2_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOSThreatDetectionReportStorage_1_2_840_10008_5_1_4_1_1_501_3",Swig_var_uidDICOSThreatDetectionReportStorage_1_2_840_10008_5_1_4_1_1_501_3_get, Swig_var_uidDICOSThreatDetectionReportStorage_1_2_840_10008_5_1_4_1_1_501_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOS2DAITStorage_1_2_840_10008_5_1_4_1_1_501_4",Swig_var_uidDICOS2DAITStorage_1_2_840_10008_5_1_4_1_1_501_4_get, Swig_var_uidDICOS2DAITStorage_1_2_840_10008_5_1_4_1_1_501_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOS3DAITStorage_1_2_840_10008_5_1_4_1_1_501_5",Swig_var_uidDICOS3DAITStorage_1_2_840_10008_5_1_4_1_1_501_5_get, Swig_var_uidDICOS3DAITStorage_1_2_840_10008_5_1_4_1_1_501_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOSQuadrupoleResonanceQRStorage_1_2_840_10008_5_1_4_1_1_501_6",Swig_var_uidDICOSQuadrupoleResonanceQRStorage_1_2_840_10008_5_1_4_1_1_501_6_get, Swig_var_uidDICOSQuadrupoleResonanceQRStorage_1_2_840_10008_5_1_4_1_1_501_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEddyCurrentImageStorage_1_2_840_10008_5_1_4_1_1_601_1",Swig_var_uidEddyCurrentImageStorage_1_2_840_10008_5_1_4_1_1_601_1_get, Swig_var_uidEddyCurrentImageStorage_1_2_840_10008_5_1_4_1_1_601_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidEddyCurrentMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_601_2",Swig_var_uidEddyCurrentMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_601_2_get, Swig_var_uidEddyCurrentMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_601_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPatientRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_1_1",Swig_var_uidPatientRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_1_1_get, Swig_var_uidPatientRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPatientRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_1_2",Swig_var_uidPatientRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_1_2_get, Swig_var_uidPatientRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_1_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPatientRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_1_3",Swig_var_uidPatientRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_1_3_get, Swig_var_uidPatientRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_1_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStudyRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_2_1",Swig_var_uidStudyRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_2_1_get, Swig_var_uidStudyRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_2_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStudyRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_2_2",Swig_var_uidStudyRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_2_2_get, Swig_var_uidStudyRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_2_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidStudyRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_2_3",Swig_var_uidStudyRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_2_3_get, Swig_var_uidStudyRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_2_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPatientStudyOnlyQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_3_1",Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_3_1_get, Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_3_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPatientStudyOnlyQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_3_2",Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_3_2_get, Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_3_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidPatientStudyOnlyQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_3_3",Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_3_3_get, Swig_var_uidPatientStudyOnlyQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_3_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidCompositeInstanceRootRetrieveMOVE_1_2_840_10008_5_1_4_1_2_4_2",Swig_var_uidCompositeInstanceRootRetrieveMOVE_1_2_840_10008_5_1_4_1_2_4_2_get, Swig_var_uidCompositeInstanceRootRetrieveMOVE_1_2_840_10008_5_1_4_1_2_4_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidCompositeInstanceRootRetrieveGET_1_2_840_10008_5_1_4_1_2_4_3",Swig_var_uidCompositeInstanceRootRetrieveGET_1_2_840_10008_5_1_4_1_2_4_3_get, Swig_var_uidCompositeInstanceRootRetrieveGET_1_2_840_10008_5_1_4_1_2_4_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidCompositeInstanceRetrieveWithoutBulkDataGET_1_2_840_10008_5_1_4_1_2_5_3",Swig_var_uidCompositeInstanceRetrieveWithoutBulkDataGET_1_2_840_10008_5_1_4_1_2_5_3_get, Swig_var_uidCompositeInstanceRetrieveWithoutBulkDataGET_1_2_840_10008_5_1_4_1_2_5_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDefinedProcedureProtocolInformationModelFIND_1_2_840_10008_5_1_4_20_1",Swig_var_uidDefinedProcedureProtocolInformationModelFIND_1_2_840_10008_5_1_4_20_1_get, Swig_var_uidDefinedProcedureProtocolInformationModelFIND_1_2_840_10008_5_1_4_20_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDefinedProcedureProtocolInformationModelMOVE_1_2_840_10008_5_1_4_20_2",Swig_var_uidDefinedProcedureProtocolInformationModelMOVE_1_2_840_10008_5_1_4_20_2_get, Swig_var_uidDefinedProcedureProtocolInformationModelMOVE_1_2_840_10008_5_1_4_20_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDefinedProcedureProtocolInformationModelGET_1_2_840_10008_5_1_4_20_3",Swig_var_uidDefinedProcedureProtocolInformationModelGET_1_2_840_10008_5_1_4_20_3_get, Swig_var_uidDefinedProcedureProtocolInformationModelGET_1_2_840_10008_5_1_4_20_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidModalityWorklistInformationModelFIND_1_2_840_10008_5_1_4_31",Swig_var_uidModalityWorklistInformationModelFIND_1_2_840_10008_5_1_4_31_get, Swig_var_uidModalityWorklistInformationModelFIND_1_2_840_10008_5_1_4_31_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGeneralPurposeWorklistManagementMetaSOPClass_1_2_840_10008_5_1_4_32",Swig_var_uidGeneralPurposeWorklistManagementMetaSOPClass_1_2_840_10008_5_1_4_32_get, Swig_var_uidGeneralPurposeWorklistManagementMetaSOPClass_1_2_840_10008_5_1_4_32_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGeneralPurposeWorklistInformationModelFIND_1_2_840_10008_5_1_4_32_1",Swig_var_uidGeneralPurposeWorklistInformationModelFIND_1_2_840_10008_5_1_4_32_1_get, Swig_var_uidGeneralPurposeWorklistInformationModelFIND_1_2_840_10008_5_1_4_32_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGeneralPurposeScheduledProcedureStepSOPClass_1_2_840_10008_5_1_4_32_2",Swig_var_uidGeneralPurposeScheduledProcedureStepSOPClass_1_2_840_10008_5_1_4_32_2_get, Swig_var_uidGeneralPurposeScheduledProcedureStepSOPClass_1_2_840_10008_5_1_4_32_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGeneralPurposePerformedProcedureStepSOPClass_1_2_840_10008_5_1_4_32_3",Swig_var_uidGeneralPurposePerformedProcedureStepSOPClass_1_2_840_10008_5_1_4_32_3_get, Swig_var_uidGeneralPurposePerformedProcedureStepSOPClass_1_2_840_10008_5_1_4_32_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidInstanceAvailabilityNotificationSOPClass_1_2_840_10008_5_1_4_33",Swig_var_uidInstanceAvailabilityNotificationSOPClass_1_2_840_10008_5_1_4_33_get, Swig_var_uidInstanceAvailabilityNotificationSOPClass_1_2_840_10008_5_1_4_33_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTBeamsDeliveryInstructionStorageTrial_1_2_840_10008_5_1_4_34_1",Swig_var_uidRTBeamsDeliveryInstructionStorageTrial_1_2_840_10008_5_1_4_34_1_get, Swig_var_uidRTBeamsDeliveryInstructionStorageTrial_1_2_840_10008_5_1_4_34_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTConventionalMachineVerificationTrial_1_2_840_10008_5_1_4_34_2",Swig_var_uidRTConventionalMachineVerificationTrial_1_2_840_10008_5_1_4_34_2_get, Swig_var_uidRTConventionalMachineVerificationTrial_1_2_840_10008_5_1_4_34_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTIonMachineVerificationTrial_1_2_840_10008_5_1_4_34_3",Swig_var_uidRTIonMachineVerificationTrial_1_2_840_10008_5_1_4_34_3_get, Swig_var_uidRTIonMachineVerificationTrial_1_2_840_10008_5_1_4_34_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUnifiedWorklistandProcedureStepServiceClassTrial_1_2_840_10008_5_1_4_34_4",Swig_var_uidUnifiedWorklistandProcedureStepServiceClassTrial_1_2_840_10008_5_1_4_34_4_get, Swig_var_uidUnifiedWorklistandProcedureStepServiceClassTrial_1_2_840_10008_5_1_4_34_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUnifiedProcedureStepPushSOPClassTrial_1_2_840_10008_5_1_4_34_4_1",Swig_var_uidUnifiedProcedureStepPushSOPClassTrial_1_2_840_10008_5_1_4_34_4_1_get, Swig_var_uidUnifiedProcedureStepPushSOPClassTrial_1_2_840_10008_5_1_4_34_4_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUnifiedProcedureStepWatchSOPClassTrial_1_2_840_10008_5_1_4_34_4_2",Swig_var_uidUnifiedProcedureStepWatchSOPClassTrial_1_2_840_10008_5_1_4_34_4_2_get, Swig_var_uidUnifiedProcedureStepWatchSOPClassTrial_1_2_840_10008_5_1_4_34_4_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUnifiedProcedureStepPullSOPClassTrial_1_2_840_10008_5_1_4_34_4_3",Swig_var_uidUnifiedProcedureStepPullSOPClassTrial_1_2_840_10008_5_1_4_34_4_3_get, Swig_var_uidUnifiedProcedureStepPullSOPClassTrial_1_2_840_10008_5_1_4_34_4_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUnifiedProcedureStepEventSOPClassTrial_1_2_840_10008_5_1_4_34_4_4",Swig_var_uidUnifiedProcedureStepEventSOPClassTrial_1_2_840_10008_5_1_4_34_4_4_get, Swig_var_uidUnifiedProcedureStepEventSOPClassTrial_1_2_840_10008_5_1_4_34_4_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUPSGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5",Swig_var_uidUPSGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_get, Swig_var_uidUPSGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUPSFilteredGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_1",Swig_var_uidUPSFilteredGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_1_get, Swig_var_uidUPSFilteredGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUnifiedWorklistandProcedureStepServiceClass_1_2_840_10008_5_1_4_34_6",Swig_var_uidUnifiedWorklistandProcedureStepServiceClass_1_2_840_10008_5_1_4_34_6_get, Swig_var_uidUnifiedWorklistandProcedureStepServiceClass_1_2_840_10008_5_1_4_34_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUnifiedProcedureStepPushSOPClass_1_2_840_10008_5_1_4_34_6_1",Swig_var_uidUnifiedProcedureStepPushSOPClass_1_2_840_10008_5_1_4_34_6_1_get, Swig_var_uidUnifiedProcedureStepPushSOPClass_1_2_840_10008_5_1_4_34_6_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUnifiedProcedureStepWatchSOPClass_1_2_840_10008_5_1_4_34_6_2",Swig_var_uidUnifiedProcedureStepWatchSOPClass_1_2_840_10008_5_1_4_34_6_2_get, Swig_var_uidUnifiedProcedureStepWatchSOPClass_1_2_840_10008_5_1_4_34_6_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUnifiedProcedureStepPullSOPClass_1_2_840_10008_5_1_4_34_6_3",Swig_var_uidUnifiedProcedureStepPullSOPClass_1_2_840_10008_5_1_4_34_6_3_get, Swig_var_uidUnifiedProcedureStepPullSOPClass_1_2_840_10008_5_1_4_34_6_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUnifiedProcedureStepEventSOPClass_1_2_840_10008_5_1_4_34_6_4",Swig_var_uidUnifiedProcedureStepEventSOPClass_1_2_840_10008_5_1_4_34_6_4_get, Swig_var_uidUnifiedProcedureStepEventSOPClass_1_2_840_10008_5_1_4_34_6_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTBeamsDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_7",Swig_var_uidRTBeamsDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_7_get, Swig_var_uidRTBeamsDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTConventionalMachineVerification_1_2_840_10008_5_1_4_34_8",Swig_var_uidRTConventionalMachineVerification_1_2_840_10008_5_1_4_34_8_get, Swig_var_uidRTConventionalMachineVerification_1_2_840_10008_5_1_4_34_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTIonMachineVerification_1_2_840_10008_5_1_4_34_9",Swig_var_uidRTIonMachineVerification_1_2_840_10008_5_1_4_34_9_get, Swig_var_uidRTIonMachineVerification_1_2_840_10008_5_1_4_34_9_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidRTBrachyApplicationSetupDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_10",Swig_var_uidRTBrachyApplicationSetupDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_10_get, Swig_var_uidRTBrachyApplicationSetupDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_10_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGeneralRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_1",Swig_var_uidGeneralRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_1_get, Swig_var_uidGeneralRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidBreastImagingRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_2",Swig_var_uidBreastImagingRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_2_get, Swig_var_uidBreastImagingRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidCardiacRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_3",Swig_var_uidCardiacRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_3_get, Swig_var_uidCardiacRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHangingProtocolStorage_1_2_840_10008_5_1_4_38_1",Swig_var_uidHangingProtocolStorage_1_2_840_10008_5_1_4_38_1_get, Swig_var_uidHangingProtocolStorage_1_2_840_10008_5_1_4_38_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHangingProtocolInformationModelFIND_1_2_840_10008_5_1_4_38_2",Swig_var_uidHangingProtocolInformationModelFIND_1_2_840_10008_5_1_4_38_2_get, Swig_var_uidHangingProtocolInformationModelFIND_1_2_840_10008_5_1_4_38_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHangingProtocolInformationModelMOVE_1_2_840_10008_5_1_4_38_3",Swig_var_uidHangingProtocolInformationModelMOVE_1_2_840_10008_5_1_4_38_3_get, Swig_var_uidHangingProtocolInformationModelMOVE_1_2_840_10008_5_1_4_38_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidHangingProtocolInformationModelGET_1_2_840_10008_5_1_4_38_4",Swig_var_uidHangingProtocolInformationModelGET_1_2_840_10008_5_1_4_38_4_get, Swig_var_uidHangingProtocolInformationModelGET_1_2_840_10008_5_1_4_38_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidColorPaletteStorage_1_2_840_10008_5_1_4_39_1",Swig_var_uidColorPaletteStorage_1_2_840_10008_5_1_4_39_1_get, Swig_var_uidColorPaletteStorage_1_2_840_10008_5_1_4_39_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidColorPaletteQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_39_2",Swig_var_uidColorPaletteQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_39_2_get, Swig_var_uidColorPaletteQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_39_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidColorPaletteQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_39_3",Swig_var_uidColorPaletteQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_39_3_get, Swig_var_uidColorPaletteQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_39_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidColorPaletteQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_39_4",Swig_var_uidColorPaletteQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_39_4_get, Swig_var_uidColorPaletteQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_39_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidProductCharacteristicsQuerySOPClass_1_2_840_10008_5_1_4_41",Swig_var_uidProductCharacteristicsQuerySOPClass_1_2_840_10008_5_1_4_41_get, Swig_var_uidProductCharacteristicsQuerySOPClass_1_2_840_10008_5_1_4_41_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidSubstanceApprovalQuerySOPClass_1_2_840_10008_5_1_4_42",Swig_var_uidSubstanceApprovalQuerySOPClass_1_2_840_10008_5_1_4_42_get, Swig_var_uidSubstanceApprovalQuerySOPClass_1_2_840_10008_5_1_4_42_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGenericImplantTemplateStorage_1_2_840_10008_5_1_4_43_1",Swig_var_uidGenericImplantTemplateStorage_1_2_840_10008_5_1_4_43_1_get, Swig_var_uidGenericImplantTemplateStorage_1_2_840_10008_5_1_4_43_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGenericImplantTemplateInformationModelFIND_1_2_840_10008_5_1_4_43_2",Swig_var_uidGenericImplantTemplateInformationModelFIND_1_2_840_10008_5_1_4_43_2_get, Swig_var_uidGenericImplantTemplateInformationModelFIND_1_2_840_10008_5_1_4_43_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGenericImplantTemplateInformationModelMOVE_1_2_840_10008_5_1_4_43_3",Swig_var_uidGenericImplantTemplateInformationModelMOVE_1_2_840_10008_5_1_4_43_3_get, Swig_var_uidGenericImplantTemplateInformationModelMOVE_1_2_840_10008_5_1_4_43_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidGenericImplantTemplateInformationModelGET_1_2_840_10008_5_1_4_43_4",Swig_var_uidGenericImplantTemplateInformationModelGET_1_2_840_10008_5_1_4_43_4_get, Swig_var_uidGenericImplantTemplateInformationModelGET_1_2_840_10008_5_1_4_43_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImplantAssemblyTemplateStorage_1_2_840_10008_5_1_4_44_1",Swig_var_uidImplantAssemblyTemplateStorage_1_2_840_10008_5_1_4_44_1_get, Swig_var_uidImplantAssemblyTemplateStorage_1_2_840_10008_5_1_4_44_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImplantAssemblyTemplateInformationModelFIND_1_2_840_10008_5_1_4_44_2",Swig_var_uidImplantAssemblyTemplateInformationModelFIND_1_2_840_10008_5_1_4_44_2_get, Swig_var_uidImplantAssemblyTemplateInformationModelFIND_1_2_840_10008_5_1_4_44_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImplantAssemblyTemplateInformationModelMOVE_1_2_840_10008_5_1_4_44_3",Swig_var_uidImplantAssemblyTemplateInformationModelMOVE_1_2_840_10008_5_1_4_44_3_get, Swig_var_uidImplantAssemblyTemplateInformationModelMOVE_1_2_840_10008_5_1_4_44_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImplantAssemblyTemplateInformationModelGET_1_2_840_10008_5_1_4_44_4",Swig_var_uidImplantAssemblyTemplateInformationModelGET_1_2_840_10008_5_1_4_44_4_get, Swig_var_uidImplantAssemblyTemplateInformationModelGET_1_2_840_10008_5_1_4_44_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImplantTemplateGroupStorage_1_2_840_10008_5_1_4_45_1",Swig_var_uidImplantTemplateGroupStorage_1_2_840_10008_5_1_4_45_1_get, Swig_var_uidImplantTemplateGroupStorage_1_2_840_10008_5_1_4_45_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImplantTemplateGroupInformationModelFIND_1_2_840_10008_5_1_4_45_2",Swig_var_uidImplantTemplateGroupInformationModelFIND_1_2_840_10008_5_1_4_45_2_get, Swig_var_uidImplantTemplateGroupInformationModelFIND_1_2_840_10008_5_1_4_45_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImplantTemplateGroupInformationModelMOVE_1_2_840_10008_5_1_4_45_3",Swig_var_uidImplantTemplateGroupInformationModelMOVE_1_2_840_10008_5_1_4_45_3_get, Swig_var_uidImplantTemplateGroupInformationModelMOVE_1_2_840_10008_5_1_4_45_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidImplantTemplateGroupInformationModelGET_1_2_840_10008_5_1_4_45_4",Swig_var_uidImplantTemplateGroupInformationModelGET_1_2_840_10008_5_1_4_45_4_get, Swig_var_uidImplantTemplateGroupInformationModelGET_1_2_840_10008_5_1_4_45_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidNativeDICOMModel_1_2_840_10008_7_1_1",Swig_var_uidNativeDICOMModel_1_2_840_10008_7_1_1_get, Swig_var_uidNativeDICOMModel_1_2_840_10008_7_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidAbstractMultiDimensionalImageModel_1_2_840_10008_7_1_2",Swig_var_uidAbstractMultiDimensionalImageModel_1_2_840_10008_7_1_2_get, Swig_var_uidAbstractMultiDimensionalImageModel_1_2_840_10008_7_1_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidDICOMContentMappingResource_1_2_840_10008_8_1_1",Swig_var_uidDICOMContentMappingResource_1_2_840_10008_8_1_1_get, Swig_var_uidDICOMContentMappingResource_1_2_840_10008_8_1_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomDeviceName_1_2_840_10008_15_0_3_1",Swig_var_uiddicomDeviceName_1_2_840_10008_15_0_3_1_get, Swig_var_uiddicomDeviceName_1_2_840_10008_15_0_3_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomDescription_1_2_840_10008_15_0_3_2",Swig_var_uiddicomDescription_1_2_840_10008_15_0_3_2_get, Swig_var_uiddicomDescription_1_2_840_10008_15_0_3_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomManufacturer_1_2_840_10008_15_0_3_3",Swig_var_uiddicomManufacturer_1_2_840_10008_15_0_3_3_get, Swig_var_uiddicomManufacturer_1_2_840_10008_15_0_3_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomManufacturerModelName_1_2_840_10008_15_0_3_4",Swig_var_uiddicomManufacturerModelName_1_2_840_10008_15_0_3_4_get, Swig_var_uiddicomManufacturerModelName_1_2_840_10008_15_0_3_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomSoftwareVersion_1_2_840_10008_15_0_3_5",Swig_var_uiddicomSoftwareVersion_1_2_840_10008_15_0_3_5_get, Swig_var_uiddicomSoftwareVersion_1_2_840_10008_15_0_3_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomVendorData_1_2_840_10008_15_0_3_6",Swig_var_uiddicomVendorData_1_2_840_10008_15_0_3_6_get, Swig_var_uiddicomVendorData_1_2_840_10008_15_0_3_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomAETitle_1_2_840_10008_15_0_3_7",Swig_var_uiddicomAETitle_1_2_840_10008_15_0_3_7_get, Swig_var_uiddicomAETitle_1_2_840_10008_15_0_3_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomNetworkConnectionReference_1_2_840_10008_15_0_3_8",Swig_var_uiddicomNetworkConnectionReference_1_2_840_10008_15_0_3_8_get, Swig_var_uiddicomNetworkConnectionReference_1_2_840_10008_15_0_3_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomApplicationCluster_1_2_840_10008_15_0_3_9",Swig_var_uiddicomApplicationCluster_1_2_840_10008_15_0_3_9_get, Swig_var_uiddicomApplicationCluster_1_2_840_10008_15_0_3_9_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomAssociationInitiator_1_2_840_10008_15_0_3_10",Swig_var_uiddicomAssociationInitiator_1_2_840_10008_15_0_3_10_get, Swig_var_uiddicomAssociationInitiator_1_2_840_10008_15_0_3_10_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomAssociationAcceptor_1_2_840_10008_15_0_3_11",Swig_var_uiddicomAssociationAcceptor_1_2_840_10008_15_0_3_11_get, Swig_var_uiddicomAssociationAcceptor_1_2_840_10008_15_0_3_11_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomHostname_1_2_840_10008_15_0_3_12",Swig_var_uiddicomHostname_1_2_840_10008_15_0_3_12_get, Swig_var_uiddicomHostname_1_2_840_10008_15_0_3_12_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomPort_1_2_840_10008_15_0_3_13",Swig_var_uiddicomPort_1_2_840_10008_15_0_3_13_get, Swig_var_uiddicomPort_1_2_840_10008_15_0_3_13_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomSOPClass_1_2_840_10008_15_0_3_14",Swig_var_uiddicomSOPClass_1_2_840_10008_15_0_3_14_get, Swig_var_uiddicomSOPClass_1_2_840_10008_15_0_3_14_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomTransferRole_1_2_840_10008_15_0_3_15",Swig_var_uiddicomTransferRole_1_2_840_10008_15_0_3_15_get, Swig_var_uiddicomTransferRole_1_2_840_10008_15_0_3_15_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomTransferSyntax_1_2_840_10008_15_0_3_16",Swig_var_uiddicomTransferSyntax_1_2_840_10008_15_0_3_16_get, Swig_var_uiddicomTransferSyntax_1_2_840_10008_15_0_3_16_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomPrimaryDeviceType_1_2_840_10008_15_0_3_17",Swig_var_uiddicomPrimaryDeviceType_1_2_840_10008_15_0_3_17_get, Swig_var_uiddicomPrimaryDeviceType_1_2_840_10008_15_0_3_17_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomRelatedDeviceReference_1_2_840_10008_15_0_3_18",Swig_var_uiddicomRelatedDeviceReference_1_2_840_10008_15_0_3_18_get, Swig_var_uiddicomRelatedDeviceReference_1_2_840_10008_15_0_3_18_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomPreferredCalledAETitle_1_2_840_10008_15_0_3_19",Swig_var_uiddicomPreferredCalledAETitle_1_2_840_10008_15_0_3_19_get, Swig_var_uiddicomPreferredCalledAETitle_1_2_840_10008_15_0_3_19_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomTLSCyphersuite_1_2_840_10008_15_0_3_20",Swig_var_uiddicomTLSCyphersuite_1_2_840_10008_15_0_3_20_get, Swig_var_uiddicomTLSCyphersuite_1_2_840_10008_15_0_3_20_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomAuthorizedNodeCertificateReference_1_2_840_10008_15_0_3_21",Swig_var_uiddicomAuthorizedNodeCertificateReference_1_2_840_10008_15_0_3_21_get, Swig_var_uiddicomAuthorizedNodeCertificateReference_1_2_840_10008_15_0_3_21_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomThisNodeCertificateReference_1_2_840_10008_15_0_3_22",Swig_var_uiddicomThisNodeCertificateReference_1_2_840_10008_15_0_3_22_get, Swig_var_uiddicomThisNodeCertificateReference_1_2_840_10008_15_0_3_22_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomInstalled_1_2_840_10008_15_0_3_23",Swig_var_uiddicomInstalled_1_2_840_10008_15_0_3_23_get, Swig_var_uiddicomInstalled_1_2_840_10008_15_0_3_23_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomStationName_1_2_840_10008_15_0_3_24",Swig_var_uiddicomStationName_1_2_840_10008_15_0_3_24_get, Swig_var_uiddicomStationName_1_2_840_10008_15_0_3_24_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomDeviceSerialNumber_1_2_840_10008_15_0_3_25",Swig_var_uiddicomDeviceSerialNumber_1_2_840_10008_15_0_3_25_get, Swig_var_uiddicomDeviceSerialNumber_1_2_840_10008_15_0_3_25_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomInstitutionName_1_2_840_10008_15_0_3_26",Swig_var_uiddicomInstitutionName_1_2_840_10008_15_0_3_26_get, Swig_var_uiddicomInstitutionName_1_2_840_10008_15_0_3_26_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomInstitutionAddress_1_2_840_10008_15_0_3_27",Swig_var_uiddicomInstitutionAddress_1_2_840_10008_15_0_3_27_get, Swig_var_uiddicomInstitutionAddress_1_2_840_10008_15_0_3_27_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomInstitutionDepartmentName_1_2_840_10008_15_0_3_28",Swig_var_uiddicomInstitutionDepartmentName_1_2_840_10008_15_0_3_28_get, Swig_var_uiddicomInstitutionDepartmentName_1_2_840_10008_15_0_3_28_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomIssuerOfPatientID_1_2_840_10008_15_0_3_29",Swig_var_uiddicomIssuerOfPatientID_1_2_840_10008_15_0_3_29_get, Swig_var_uiddicomIssuerOfPatientID_1_2_840_10008_15_0_3_29_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomPreferredCallingAETitle_1_2_840_10008_15_0_3_30",Swig_var_uiddicomPreferredCallingAETitle_1_2_840_10008_15_0_3_30_get, Swig_var_uiddicomPreferredCallingAETitle_1_2_840_10008_15_0_3_30_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomSupportedCharacterSet_1_2_840_10008_15_0_3_31",Swig_var_uiddicomSupportedCharacterSet_1_2_840_10008_15_0_3_31_get, Swig_var_uiddicomSupportedCharacterSet_1_2_840_10008_15_0_3_31_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomConfigurationRoot_1_2_840_10008_15_0_4_1",Swig_var_uiddicomConfigurationRoot_1_2_840_10008_15_0_4_1_get, Swig_var_uiddicomConfigurationRoot_1_2_840_10008_15_0_4_1_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomDevicesRoot_1_2_840_10008_15_0_4_2",Swig_var_uiddicomDevicesRoot_1_2_840_10008_15_0_4_2_get, Swig_var_uiddicomDevicesRoot_1_2_840_10008_15_0_4_2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomUniqueAETitlesRegistryRoot_1_2_840_10008_15_0_4_3",Swig_var_uiddicomUniqueAETitlesRegistryRoot_1_2_840_10008_15_0_4_3_get, Swig_var_uiddicomUniqueAETitlesRegistryRoot_1_2_840_10008_15_0_4_3_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomDevice_1_2_840_10008_15_0_4_4",Swig_var_uiddicomDevice_1_2_840_10008_15_0_4_4_get, Swig_var_uiddicomDevice_1_2_840_10008_15_0_4_4_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomNetworkAE_1_2_840_10008_15_0_4_5",Swig_var_uiddicomNetworkAE_1_2_840_10008_15_0_4_5_get, Swig_var_uiddicomNetworkAE_1_2_840_10008_15_0_4_5_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomNetworkConnection_1_2_840_10008_15_0_4_6",Swig_var_uiddicomNetworkConnection_1_2_840_10008_15_0_4_6_get, Swig_var_uiddicomNetworkConnection_1_2_840_10008_15_0_4_6_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomUniqueAETitle_1_2_840_10008_15_0_4_7",Swig_var_uiddicomUniqueAETitle_1_2_840_10008_15_0_4_7_get, Swig_var_uiddicomUniqueAETitle_1_2_840_10008_15_0_4_7_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uiddicomTransferCapability_1_2_840_10008_15_0_4_8",Swig_var_uiddicomTransferCapability_1_2_840_10008_15_0_4_8_get, Swig_var_uiddicomTransferCapability_1_2_840_10008_15_0_4_8_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"uidUniversalCoordinatedTime_1_2_840_10008_15_1_1",Swig_var_uidUniversalCoordinatedTime_1_2_840_10008_15_1_1_get, Swig_var_uidUniversalCoordinatedTime_1_2_840_10008_15_1_1_set);
  SWIG_Python_SetConstant(d, "ageUnit_t_days",SWIG_From_char(static_cast< char >(imebra::ageUnit_t::days)));
  SWIG_Python_SetConstant(d, "ageUnit_t_weeks",SWIG_From_char(static_cast< char >(imebra::ageUnit_t::weeks)));
  SWIG_Python_SetConstant(d, "ageUnit_t_months",SWIG_From_char(static_cast< char >(imebra::ageUnit_t::months)));
  SWIG_Python_SetConstant(d, "ageUnit_t_years",SWIG_From_char(static_cast< char >(imebra::ageUnit_t::years)));
  SWIG_Python_SetConstant(d, "imageQuality_t_veryHigh",SWIG_From_int(static_cast< int >(imebra::imageQuality_t::veryHigh)));
  SWIG_Python_SetConstant(d, "imageQuality_t_high",SWIG_From_int(static_cast< int >(imebra::imageQuality_t::high)));
  SWIG_Python_SetConstant(d, "imageQuality_t_aboveMedium",SWIG_From_int(static_cast< int >(imebra::imageQuality_t::aboveMedium)));
  SWIG_Python_SetConstant(d, "imageQuality_t_medium",SWIG_From_int(static_cast< int >(imebra::imageQuality_t::medium)));
  SWIG_Python_SetConstant(d, "imageQuality_t_belowMedium",SWIG_From_int(static_cast< int >(imebra::imageQuality_t::belowMedium)));
  SWIG_Python_SetConstant(d, "imageQuality_t_low",SWIG_From_int(static_cast< int >(imebra::imageQuality_t::low)));
  SWIG_Python_SetConstant(d, "imageQuality_t_veryLow",SWIG_From_int(static_cast< int >(imebra::imageQuality_t::veryLow)));
  SWIG_Python_SetConstant(d, "bitDepth_t_depthU8",SWIG_From_int(static_cast< int >(imebra::bitDepth_t::depthU8)));
  SWIG_Python_SetConstant(d, "bitDepth_t_depthS8",SWIG_From_int(static_cast< int >(imebra::bitDepth_t::depthS8)));
  SWIG_Python_SetConstant(d, "bitDepth_t_depthU16",SWIG_From_int(static_cast< int >(imebra::bitDepth_t::depthU16)));
  SWIG_Python_SetConstant(d, "bitDepth_t_depthS16",SWIG_From_int(static_cast< int >(imebra::bitDepth_t::depthS16)));
  SWIG_Python_SetConstant(d, "bitDepth_t_depthU32",SWIG_From_int(static_cast< int >(imebra::bitDepth_t::depthU32)));
  SWIG_Python_SetConstant(d, "bitDepth_t_depthS32",SWIG_From_int(static_cast< int >(imebra::bitDepth_t::depthS32)));
  SWIG_Python_SetConstant(d, "codecType_t_dicom",SWIG_From_int(static_cast< int >(imebra::codecType_t::dicom)));
  SWIG_Python_SetConstant(d, "codecType_t_jpeg",SWIG_From_int(static_cast< int >(imebra::codecType_t::jpeg)));
  SWIG_Python_SetConstant(d, "overlayType_t_graphic",SWIG_From_int(static_cast< int >(imebra::overlayType_t::graphic)));
  SWIG_Python_SetConstant(d, "overlayType_t_ROI",SWIG_From_int(static_cast< int >(imebra::overlayType_t::ROI)));
  SWIG_Python_SetConstant(d, "tagVR_t_AE",SWIG_From_int(static_cast< int >(imebra::tagVR_t::AE)));
  SWIG_Python_SetConstant(d, "tagVR_t_AS",SWIG_From_int(static_cast< int >(imebra::tagVR_t::AS)));
  SWIG_Python_SetConstant(d, "tagVR_t_AT",SWIG_From_int(static_cast< int >(imebra::tagVR_t::AT)));
  SWIG_Python_SetConstant(d, "tagVR_t_CS",SWIG_From_int(static_cast< int >(imebra::tagVR_t::CS)));
  SWIG_Python_SetConstant(d, "tagVR_t_DA",SWIG_From_int(static_cast< int >(imebra::tagVR_t::DA)));
  SWIG_Python_SetConstant(d, "tagVR_t_DS",SWIG_From_int(static_cast< int >(imebra::tagVR_t::DS)));
  SWIG_Python_SetConstant(d, "tagVR_t_DT",SWIG_From_int(static_cast< int >(imebra::tagVR_t::DT)));
  SWIG_Python_SetConstant(d, "tagVR_t_FL",SWIG_From_int(static_cast< int >(imebra::tagVR_t::FL)));
  SWIG_Python_SetConstant(d, "tagVR_t_FD",SWIG_From_int(static_cast< int >(imebra::tagVR_t::FD)));
  SWIG_Python_SetConstant(d, "tagVR_t_IS",SWIG_From_int(static_cast< int >(imebra::tagVR_t::IS)));
  SWIG_Python_SetConstant(d, "tagVR_t_LO",SWIG_From_int(static_cast< int >(imebra::tagVR_t::LO)));
  SWIG_Python_SetConstant(d, "tagVR_t_LT",SWIG_From_int(static_cast< int >(imebra::tagVR_t::LT)));
  SWIG_Python_SetConstant(d, "tagVR_t_OB",SWIG_From_int(static_cast< int >(imebra::tagVR_t::OB)));
  SWIG_Python_SetConstant(d, "tagVR_t_SB",SWIG_From_int(static_cast< int >(imebra::tagVR_t::SB)));
  SWIG_Python_SetConstant(d, "tagVR_t_OD",SWIG_From_int(static_cast< int >(imebra::tagVR_t::OD)));
  SWIG_Python_SetConstant(d, "tagVR_t_OF",SWIG_From_int(static_cast< int >(imebra::tagVR_t::OF)));
  SWIG_Python_SetConstant(d, "tagVR_t_OL",SWIG_From_int(static_cast< int >(imebra::tagVR_t::OL)));
  SWIG_Python_SetConstant(d, "tagVR_t_OW",SWIG_From_int(static_cast< int >(imebra::tagVR_t::OW)));
  SWIG_Python_SetConstant(d, "tagVR_t_PN",SWIG_From_int(static_cast< int >(imebra::tagVR_t::PN)));
  SWIG_Python_SetConstant(d, "tagVR_t_SH",SWIG_From_int(static_cast< int >(imebra::tagVR_t::SH)));
  SWIG_Python_SetConstant(d, "tagVR_t_SL",SWIG_From_int(static_cast< int >(imebra::tagVR_t::SL)));
  SWIG_Python_SetConstant(d, "tagVR_t_SQ",SWIG_From_int(static_cast< int >(imebra::tagVR_t::SQ)));
  SWIG_Python_SetConstant(d, "tagVR_t_SS",SWIG_From_int(static_cast< int >(imebra::tagVR_t::SS)));
  SWIG_Python_SetConstant(d, "tagVR_t_ST",SWIG_From_int(static_cast< int >(imebra::tagVR_t::ST)));
  SWIG_Python_SetConstant(d, "tagVR_t_TM",SWIG_From_int(static_cast< int >(imebra::tagVR_t::TM)));
  SWIG_Python_SetConstant(d, "tagVR_t_UC",SWIG_From_int(static_cast< int >(imebra::tagVR_t::UC)));
  SWIG_Python_SetConstant(d, "tagVR_t_UI",SWIG_From_int(static_cast< int >(imebra::tagVR_t::UI)));
  SWIG_Python_SetConstant(d, "tagVR_t_UL",SWIG_From_int(static_cast< int >(imebra::tagVR_t::UL)));
  SWIG_Python_SetConstant(d, "tagVR_t_UN",SWIG_From_int(static_cast< int >(imebra::tagVR_t::UN)));
  SWIG_Python_SetConstant(d, "tagVR_t_UR",SWIG_From_int(static_cast< int >(imebra::tagVR_t::UR)));
  SWIG_Python_SetConstant(d, "tagVR_t_US",SWIG_From_int(static_cast< int >(imebra::tagVR_t::US)));
  SWIG_Python_SetConstant(d, "tagVR_t_UT",SWIG_From_int(static_cast< int >(imebra::tagVR_t::UT)));
  SWIG_Python_SetConstant(d, "drawBitmapType_t_drawBitmapRGB",SWIG_From_int(static_cast< int >(imebra::drawBitmapType_t::drawBitmapRGB)));
  SWIG_Python_SetConstant(d, "drawBitmapType_t_drawBitmapBGR",SWIG_From_int(static_cast< int >(imebra::drawBitmapType_t::drawBitmapBGR)));
  SWIG_Python_SetConstant(d, "drawBitmapType_t_drawBitmapRGBA",SWIG_From_int(static_cast< int >(imebra::drawBitmapType_t::drawBitmapRGBA)));
  SWIG_Python_SetConstant(d, "drawBitmapType_t_drawBitmapBGRA",SWIG_From_int(static_cast< int >(imebra::drawBitmapType_t::drawBitmapBGRA)));
  SWIG_Python_SetConstant(d, "dicomVOIFunction_t_linear",SWIG_From_int(static_cast< int >(imebra::dicomVOIFunction_t::linear)));
  SWIG_Python_SetConstant(d, "dicomVOIFunction_t_linearExact",SWIG_From_int(static_cast< int >(imebra::dicomVOIFunction_t::linearExact)));
  SWIG_Python_SetConstant(d, "dicomVOIFunction_t_sigmoid",SWIG_From_int(static_cast< int >(imebra::dicomVOIFunction_t::sigmoid)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_cStore",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::cStore)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_cGet",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::cGet)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_cFind",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::cFind)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_cMove",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::cMove)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_cCancel",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::cCancel)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_cEcho",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::cEcho)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_nEventReport",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::nEventReport)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_nGet",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::nGet)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_nSet",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::nSet)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_nAction",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::nAction)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_nCreate",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::nCreate)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_nDelete",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::nDelete)));
  SWIG_Python_SetConstant(d, "dimseCommandType_t_response",SWIG_From_int(static_cast< int >(imebra::dimseCommandType_t::response)));
  SWIG_Python_SetConstant(d, "dimseCommandPriority_t_low",SWIG_From_int(static_cast< int >(imebra::dimseCommandPriority_t::low)));
  SWIG_Python_SetConstant(d, "dimseCommandPriority_t_medium",SWIG_From_int(static_cast< int >(imebra::dimseCommandPriority_t::medium)));
  SWIG_Python_SetConstant(d, "dimseCommandPriority_t_high",SWIG_From_int(static_cast< int >(imebra::dimseCommandPriority_t::high)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_success",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::success)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_unsupportedOptionalAttributes",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::unsupportedOptionalAttributes)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_cannotUpdateperformedProcedureStepObject",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::cannotUpdateperformedProcedureStepObject)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_unsupportedSOPClass",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::unsupportedSOPClass)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_outOfResources",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::outOfResources)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_outOfResourcesCannotCalculateNumberOfMatches",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::outOfResourcesCannotCalculateNumberOfMatches)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_outOfResourcesCannotPerformSubOperations",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::outOfResourcesCannotPerformSubOperations)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_moveDestinationUnknown",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::moveDestinationUnknown)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_identifierDoesNotMatchSOPClass",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::identifierDoesNotMatchSOPClass)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_subOperationCompletedWithErrors",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::subOperationCompletedWithErrors)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_elementDiscarded",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::elementDiscarded)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_datasetDoesNotMatchSOPClass",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::datasetDoesNotMatchSOPClass)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_UPSAlreadyCanceled",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::UPSAlreadyCanceled)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_coercedInvalidValuesToValidValues",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::coercedInvalidValuesToValidValues)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_UPSStateAlreadyCompleted",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::UPSStateAlreadyCompleted)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_unableToProcess",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::unableToProcess)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_moreThanOneMatchFound",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::moreThanOneMatchFound)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_CannotSupportRequestedTemplate",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::CannotSupportRequestedTemplate)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_UPSNotUpdated",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::UPSNotUpdated)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_transactionUIDNotProvided",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::transactionUIDNotProvided)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_UPSAlreadyInProgress",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::UPSAlreadyInProgress)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_canScheduleOnlyWithNCreate",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::canScheduleOnlyWithNCreate)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_UPSCannotChangeState",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::UPSCannotChangeState)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_instanceUIDDoesNotExist",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::instanceUIDDoesNotExist)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_unknownAETitle",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::unknownAETitle)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_UPSNotSchedule",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::UPSNotSchedule)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_UPSNotInProgress",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::UPSNotInProgress)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_UPSAlreadyCompleted",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::UPSAlreadyCompleted)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_performerCannotBeContacted",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::performerCannotBeContacted)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_performerDoesNotCancel",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::performerDoesNotCancel)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_unappropriateActionForInstance",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::unappropriateActionForInstance)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_SCPDoesNotSupportEventReports",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::SCPDoesNotSupportEventReports)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_canceled",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::canceled)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_pending",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::pending)));
  SWIG_Python_SetConstant(d, "dimseStatusCode_t_pendingWithWarnings",SWIG_From_int(static_cast< int >(imebra::dimseStatusCode_t::pendingWithWarnings)));
  SWIG_Python_SetConstant(d, "dimseStatus_t_success",SWIG_From_int(static_cast< int >(imebra::dimseStatus_t::success)));
  SWIG_Python_SetConstant(d, "dimseStatus_t_warning",SWIG_From_int(static_cast< int >(imebra::dimseStatus_t::warning)));
  SWIG_Python_SetConstant(d, "dimseStatus_t_failure",SWIG_From_int(static_cast< int >(imebra::dimseStatus_t::failure)));
  SWIG_Python_SetConstant(d, "dimseStatus_t_cancel",SWIG_From_int(static_cast< int >(imebra::dimseStatus_t::cancel)));
  SWIG_Python_SetConstant(d, "dimseStatus_t_pending",SWIG_From_int(static_cast< int >(imebra::dimseStatus_t::pending)));
  
  /* Initialize threading */
  SWIG_PYTHON_INITIALIZE_THREADS;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

